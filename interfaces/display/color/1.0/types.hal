/*
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.display.color@1.0;

typedef uint64_t Handle;

/* Type enumerating various result codes returned from IDispColor methods */
enum Result : int32_t {
    OK,
    PERMISSION_DENIED                   = -1,
    NO_MEMORY                           = -12,
    BAD_VALUE                           = -22,
    INVALID_OPERATION                   = -38,
};

/*
 * Display color mode types used for mode clasification
 */
@export(name="", value_prefix="DISP_MODE_")
enum DispModeType : int32_t {
    OEM                          = 0,
    USER                         = 1,
    ALL                          = 2,
    MAX                          = 3,
};

/*
 * Display interface types
 */
@export(name="", value_prefix="DISP_INTF_")
enum DispIntfType : int32_t {
  DSI0                           = 0,
  DSI1                           = 1,
  HDMI                           = 2,
  MHL                            = 3,
  VIRTUAL                        = 4,
  MAX                            = 5,
};

/*
 * Display gamma operation
 */
@export(name="", value_prefix="DISP_GAMMA_OP_")
enum DispGammaOp : int32_t {
    GC                           = 1,
    IGC                          = 2,
    MAX                          = 3,
};

/*
 * Display gamma type
 */
@export(name="", value_prefix="DISP_GAMMA_")
enum DispGammaType : int32_t {
    CUSTOM                       = 1,
    ONE_P_ZERO                   = 2,
    TWO_P_TWO                    = 3,
    TWO_P_SIX                    = 4,
    REC601                       = 5,
    REC709                       = 6,
    SRGB                         = 7,
    MAX                          = 8,
};

/*
 * Display flags
 */
@export(name="", value_prefix="DISP_FLAG_")
enum DispFlags : int32_t {
    USE_DEFAULT_MODE             = 0x1,
    USE_ACTIVE_MODE              = 0x2,
    USE_IN_SAVE_MODE             = 0x4,
    MAX                          = 0xFF,
};

struct DisplayInfo {
    uint32_t flags;
    uint32_t id;
    uint32_t width;
    uint32_t height;
    uint32_t status;
    DispIntfType intf;
    string name;
};

struct ModeInfo {
    int32_t id;
    DispModeType type;
    string name;
};

struct Range {
    int32_t max;
    int32_t min;
    uint32_t step;
};

struct RangeFloat {
    float max;
    float min;
    float step;
};

struct PARange {
    uint32_t flags;
    Range hue;
    RangeFloat saturation;
    RangeFloat value;
    RangeFloat contrast;
    RangeFloat satThreshold;
};

struct PAConfigData {
    int32_t hue;
    float saturation;
    float value;
    float contrast;
    float sat_thresh;
};

struct PAConfig {
    bool valid;
    uint32_t flags;
    PAConfigData data;
};

struct versionInfo {
    uint8_t major;
    uint8_t minor;
    uint16_t step;
};

struct usrCBConfig {
    DispFlags flags;
    double red;
    double green;
    double blue;
};

struct usrEBRConfig {
    DispFlags flags;
    uint32_t exposure;
    uint32_t eyeProt;
    uint32_t redTint;
};

struct pccCoeff {
  double c;
  double r;
  double g;
  double b;
  double rr;
  double gg;
  double bb;
  double rg;
  double gb;
  double rb;
  double rgb;
};

struct pccCoeffData {
  uint32_t flags;
  pccCoeff r;
  pccCoeff g;
  pccCoeff b;
};

struct lutCfg {
  uint32_t flags;
  uint32_t numEntries;
  DispGammaType gamma;
  vec<uint32_t> redEntries;
  vec<uint32_t> greenEntries;
  vec<uint32_t> blueEntries;
};
