// @file sns_wigig.proto
//
// Defines the interface between external clients and the Sensors QMI Client
// Manager.  The Client Manager is the primary path for external clients
// to communicate with the SSC.
//
// Copyright (c) 2016-2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.

syntax = "proto2";
import "nanopb.proto";

// Message IDs
//
// Message IDs uniquely identify a particular message amongst all message
// supported by a Sensor, both requests and events; they need not be unique
// between different Sensors.  IDs are subdivided into several reserved pools.
// These reservations are made so that Framework components can appropriately
// optimize their processing.
//
// Reserved for Framework use only:
// 0-127   - Request Messages
// 128-255 - Non-recurrent events (configuration updates, one-time events, etc)
// 256-511 - Recurrent and/or periodic events (e.g. sensor samples)
//
// Sensor use:
// 512-767  - Request messages
// 768-1023 - Non-recurrent events
// 1024-1536 - Recurrent events
//
// Note that messages serving as request messages can also be sent as
// configuration events back to the client (with the same ID).  While batching
// data for a non-wakeup client, if the AP is in suspend and all batching space
// exhausted, the oldest recurrent events may be dropped.

enum sns_wigig_result {
 option (nanopb_enumopt).long_names = false;

 SNS_WIGIG_RESULT_SUCCESS = 0;
 SNS_WIGIG_RESULT_FAILURE = 1;
}

enum sns_wigig_mode {
 option (nanopb_enumopt).long_names = false;

 SNS_WIGIG_MODE_SEARCH = 1;
 SNS_WIGIG_MODE_FACIAL_RECOGNITION = 2;
 SNS_WIGIG_MODE_GESTURE_DETECTION = 3;
 SNS_WIGIG_MODE_STOP = 7;
 SNS_WIGIG_MODE_CUSTOM = 15;
}

enum sns_wigig_msgid {
  option (nanopb_enumopt).long_names = false;

  //below are the requests:
  //uses message sns_wigig_auto_recovery_req
  SNS_WIGIG_MSGID_SNS_WIGIG_AUTO_RECOVERY_REQ = 512;

  //uses message sns_wigig_change_mode_req
  SNS_WIGIG_MSGID_SNS_WIGIG_CHANGE_MODE_REQ = 513;

  //uses message sns_wigig_get_params_req
  SNS_WIGIG_MSGID_SNS_WIGIG_GET_PARAMS_REQ = 514;

  //uses message sns_wigig_debug_req
  SNS_WIGIG_MSGID_SNS_WIGIG_DEBUG_REQ = 515;

  //uses message sns_wigig_get_mode_req
  SNS_WIGIG_MSGID_SNS_WIGIG_GET_MODE_REQ = 516;

  //Below are the responses:
  //RESP defined as s response that corresponds with a direct request

  //uses message sns_wigig_auto_recovery_resp
  SNS_WIGIG_MSGID_SNS_WIGIG_AUTO_RECOVERY_RESP = 1024;

  //uses message sns_wigig_get_params_resp
  SNS_WIGIG_MSGID_SNS_WIGIG_GET_PARAMS_RESP = 1025;

  //uses message sns_wigig_debug_resp
  SNS_WIGIG_MSGID_SNS_WIGIG_DEBUG_RESP = 1026;

  //uses message sns_wigig_get_mode_resp
  SNS_WIGIG_MSGID_SNS_WIGIG_GET_MODE_RESP = 1027;

  //Below are the events:
  //EVENT defined as an event that is generated by SLPI at any time

  //uses message sns_wigig_ready_event
  SNS_WIGIG_MSGID_SNS_WIGIG_READY_EVENT = 1028;

  //uses message sns_wigig_reset_event
  SNS_WIGIG_MSGID_SNS_WIGIG_RESET_EVENT = 1029;

  //uses message sns_wigig_cir_data_ready_event
  SNS_WIGIG_MSGID_SNS_WIGIG_CIR_DATA_READY_EVENT = 1030;

  //uses message sns_wigig_burst_size_event
  SNS_WIGIG_MSGID_SNS_WIGIG_BURST_SIZE_EVENT = 1031;
}

message sns_wigig_auto_recovery_req {
  /* empty body */
}

message sns_wigig_change_mode_req {
  required sns_wigig_mode mode = 1;
  optional uint32 channel = 2;
}

message sns_wigig_get_params_req {
  /* empty body */
}

message sns_wigig_debug_req {
  required uint32 req_id = 1;
  optional bytes data = 2;
}
message sns_wigig_get_mode_req {
  /* empty body */
}

message sns_wigig_auto_recovery_resp {
  required uint32 error = 1;
}

message sns_wigig_get_params_resp {
  required uint32 error = 1;
  optional bytes data = 2;
}

message sns_wigig_debug_resp {
  required uint32 error = 1;
  required uint32 req_id = 2;
  optional bytes data = 3;
}

message sns_wigig_get_mode_resp {
  required uint32 error = 1;
  required sns_wigig_mode mode = 2;
}

message sns_wigig_ready_event {
  /* empty body */
}

message sns_wigig_reset_event {
  /* empty body */
}

message sns_wigig_cir_data_ready_event {
  required uint64 timestamp = 1;
  required bool mf = 2; /* More Fragments, like in IPv4 header */
  required bytes data = 3;
}

message sns_wigig_burst_size_event {
  required uint32 burst_size = 1;
}