/*!
 *
 * Copyright (c) 2018 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 */

package vendor.qti.hardware.biometrics.face@1.0;

import IBiometricsFaceClientCallback;

interface IBiometricsFace{

  /**
   * Set notification callback:
   * Registers a user function that must receive notifications from the HAL
   * This call must block if the HAL state machine is in busy state until HAL
   * leaves the busy state.
   *
   * @return deviceId is a unique handle for this face device
   */
   @callflow(next={"setActiveGroup"})
   @entry
   setNotify(IBiometricsFaceClientCallback clientCallback) generates (uint64_t deviceId);

  /**
   * Face pre-enroll enroll request:
   * Generates a unique token to upper layers to indicate the start of
   * an enrollment transaction. pre-enroll and post-enroll specify
   * a pin/password cleared time window where enrollment is allowed.
   * Pre-enroll only generates a challenge, a full hardwareAuthToken is
   * generated by trustzone after verifying a pin/password/swipe. This is to
   * ensure adding a new face template was preceded by some kind of
   * credential confirmation (e.g. device password).
   *
   * @return 0 if function failed, a uint64_t of challenge otherwise.
   */
   @callflow(next={"enroll", "postEnroll"})
   preEnroll() generates (uint64_t authChallenge);

  /**
   * Face enroll request:
   * Switches the HAL state machine to collect and store a new face
   * template.
   * client has to listen to FACE3D_ENROLLING messages via corresponding
   * callback to get the enrolled pose info.
   * Switches back as soon as enroll is complete, signalled by
   * FACE3D_ENROLLED message or after timeoutSec seconds.
   *
   * @param hat a valid Hardware Authentication Token (HAT), generated
   * as a result of a preEnroll() call.
   * @param gid a framework defined face group id.
   * @param pid a framework defined face person id.
   * @param timeoutSec a timeout in seconds.
   *
   * @return status is a value the framework logs for success or any error.
   *
   * A onError() function may be called with a more detailed error structure.
   */
   @callflow(next={"cancel", "enroll", "postEnroll", "remove"})
   enroll(uint8_t[69] hat, uint32_t gid, string pid, uint32_t timeoutSec) generates (RequestStatus status);

   /**
   * Finishes the enroll operation and invalidates the preEnroll() generated
   * challenge. This must be called at the end of a multi-face enrollment
   * session to indicate that no more faces may be added.
   *
   * @return status is a value the framework logs for success or any error.
   */
   @callflow(next={"authenticate", "enumerate", "remove"})
   postEnroll() generates (RequestStatus status);

  /**
   * getAuthenticatorId:
   * Returns a token associated with the current face set. This value
   * must change whenever a new face is enrolled, thus creating a new
   * face set.
   *
   * @return getAuthenticatorIdRet current authenticator id, 0 if function
   * failed.
   *
   * A onError() function may be called with a more detailed error structure.
   */
  @callflow(next={"authenticate"})
  getAuthenticatorId() generates (uint64_t AuthenticatorId);

  /**
   * Cancel pending enroll or authenticate message
   * to all running clients. Switches the HAL state machine back to the idle
   * state. Unlike postEnroll() doesn't invalidate the preEnroll() challenge.
   *
   * @return status is a value the framework logs for success or any error.
   *
   * A onError() function may be called with a more detailed error structure.
   */
  @callflow(next={"authenticate", "enroll", "enumerate", "remove"})
   cancel() generates (RequestStatus status);



  /**
  * Enumerate all the face templates found in the database.
   * @return pids a vector of all the enrolled face ids.
   * @return numPids the number of existing faces in the database.
   *
   * A onError() function may be called with a more detailed error structure.
   */
  @callflow(next={"remove", "enroll", "authenticate"})
   enumerate() generates (vec<string> pids, uint32_t numPids);

  /**
   * Face remove request:
   * Deletes face template(s).
   *
   * @param gid group id must match the existing gid in database
   * @param pid face id to delete or NULL to delete all pids within the
   * current group.
   *
   * @return status is a value the framework logs for success or any error.
   *
   * A onError() function may be called with a more detailed error structure.
   */
  @callflow(next={"enumerate", "authenticate", "cancel", "getAuthenticatorId"})
   remove(uint32_t gid, string pid) generates (RequestStatus status);

   /**
   * Authenticates an operation identified by operationId
   *
   * @param operationId operation id.
   * @param gid face group id.
   *
   * @return status is a value the framework logs for success or any error.
   *
   * A onError() function may be called with a more detailed error structure.
   */
  @callflow(next={"cancel", "preEnroll", "remove"})
  authenticate(uint64_t operationId, uint32_t gid) generates (RequestStatus debugErrno);


 /**
   * Initializes BiometricsFace engine
   *
   * @return status is a value the framework logs for success or any error.
   *
   * A onError() function may be called with a more detailed error structure.
   */
     @callflow(next={"cancel", "preEnroll", "remove", "authenticate", "enumerate"})
   initBiometricsFace() generates (RequestStatus status);

 /**
   * De-Initializes BiometricsFace engine
   *
   * @return status is a value the framework logs for success or any error.
   *
   * A onError() function may be called with a more detailed error structure.
   */
     @callflow(next={"initBiometricsFace"})
   deinitBiometricsFace() generates (RequestStatus status);

       /**
     * Send IPC ping to face HIDL service.
     * Ping response with the given ping_id will be notified via its corresponding callback
     * @param ping_id ping id
     * @return status is a value the framework logs for success or any error.
     */
     sendPingCommand(uint32_t ping_id) generates (RequestStatus status);
};
