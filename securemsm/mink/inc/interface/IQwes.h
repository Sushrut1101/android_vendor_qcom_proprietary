#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

/***********************************************************
 Copyright (c) 2018-2019 Qualcomm Technologies, Inc.
 All Rights Reserved.
 Confidential and Proprietary - Qualcomm Technologies, Inc.
************************************************************/

#define ISyncCallback_OP_sync 0

static inline int32_t
ISyncCallback_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ISyncCallback_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ISyncCallback_sync(Object self, int32_t status_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &status_val, sizeof(int32_t) };

  return Object_invoke(self, ISyncCallback_OP_sync, a, ObjectCounts_pack(1, 0, 0, 0));
}


#define ICertCallback_OP_cert_handle 0
#define ICertCallback_OP_cert_id 1

static inline int32_t
ICertCallback_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ICertCallback_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ICertCallback_cert_handle(Object self, int32_t status_val, int32_t handle_val)
{
  ObjectArg a[1];
  struct {
    int32_t m_status;
    int32_t m_handle;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  i.m_status = status_val;
  i.m_handle = handle_val;

  return Object_invoke(self, ICertCallback_OP_cert_handle, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
ICertCallback_cert_id(Object self, int32_t status_val, const uint8_t *id_ptr, size_t id_len)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &status_val, sizeof(int32_t) };
  a[1].bi = (ObjectBufIn) { id_ptr, id_len * sizeof(uint8_t) };

  return Object_invoke(self, ICertCallback_OP_cert_id, a, ObjectCounts_pack(2, 0, 0, 0));
}


#define IProvisionCallback_OP_data 0

static inline int32_t
IProvisionCallback_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IProvisionCallback_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IProvisionCallback_data(Object self, const void *context_ptr, size_t context_len, int32_t status_val, const uint8_t *decrypted_data_ptr, size_t decrypted_data_len)
{
  ObjectArg a[3];
  a[0].bi = (ObjectBufIn) { context_ptr, context_len * 1 };
  a[1].b = (ObjectBuf) { &status_val, sizeof(int32_t) };
  a[2].bi = (ObjectBufIn) { decrypted_data_ptr, decrypted_data_len * sizeof(uint8_t) };

  return Object_invoke(self, IProvisionCallback_OP_data, a, ObjectCounts_pack(3, 0, 0, 0));
}


#define IQwesService_OP_generateCertificate 0
#define IQwesService_OP_getCertID 1
#define IQwesService_OP_getCert 2
#define IQwesService_OP_certFormat 3
#define IQwesService_OP_certSign 4
#define IQwesService_OP_certDecrypt 5
#define IQwesService_OP_certRelease 6
#define IQwesService_OP_getProvisionedData 7
#define IQwesService_OP_getProvisioningBlob 8
#define IQwesService_OP_decryptProvisionedData 9
#define IQwesService_OP_dataGet 10
#define IQwesService_OP_attest 11
#define IQwesService_OP_checkLicense 12
#define IQwesService_OP_checkAllLicenses 13
#define IQwesService_OP_installLicense 14
#define IQwesService_OP_getLicenseInfo 15
#define IQwesService_OP_registerCallback 16
#define IQwesService_OP_forceSync 17
#define IQwesService_OP_createAttestationReport 18
#define IQwesService_OP_createAttestationReportAuto 19
#define IQwesService_OP_setClientCredentials 20

static inline int32_t
IQwesService_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IQwesService_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IQwesService_generateCertificate(Object self, const uint8_t *service_id_ptr, size_t service_id_len, const uint8_t *csr_params_ptr, size_t csr_params_len, const uint8_t *key_params_ptr, size_t key_params_len, Object cert_callback_val)
{
  ObjectArg a[4];
  a[0].bi = (ObjectBufIn) { service_id_ptr, service_id_len * sizeof(uint8_t) };
  a[1].bi = (ObjectBufIn) { csr_params_ptr, csr_params_len * sizeof(uint8_t) };
  a[2].bi = (ObjectBufIn) { key_params_ptr, key_params_len * sizeof(uint8_t) };
  a[3].o = cert_callback_val;

  return Object_invoke(self, IQwesService_OP_generateCertificate, a, ObjectCounts_pack(3, 0, 1, 0));
}

static inline int32_t
IQwesService_getCertID(Object self, int32_t cert_handle_val, uint8_t *cert_id_ptr, size_t cert_id_len, size_t *cert_id_lenout)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &cert_handle_val, sizeof(int32_t) };
  a[1].b = (ObjectBuf) { cert_id_ptr, cert_id_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_getCertID, a, ObjectCounts_pack(1, 1, 0, 0));

  *cert_id_lenout = a[1].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_getCert(Object self, const uint8_t *cert_id_ptr, size_t cert_id_len, int32_t *cert_handle_ptr)
{
  ObjectArg a[2];
  a[0].bi = (ObjectBufIn) { cert_id_ptr, cert_id_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { cert_handle_ptr, sizeof(int32_t) };

  return Object_invoke(self, IQwesService_OP_getCert, a, ObjectCounts_pack(1, 1, 0, 0));
}

static inline int32_t
IQwesService_certFormat(Object self, int32_t cert_handle_val, int32_t format_val, uint8_t *data_ptr, size_t data_len, size_t *data_lenout)
{
  ObjectArg a[2];
  struct {
    int32_t m_cert_handle;
    int32_t m_format;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  i.m_cert_handle = cert_handle_val;
  i.m_format = format_val;
  a[1].b = (ObjectBuf) { data_ptr, data_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_certFormat, a, ObjectCounts_pack(1, 1, 0, 0));

  *data_lenout = a[1].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_certSign(Object self, int32_t cert_handle_val, const uint8_t *data_ptr, size_t data_len, int32_t algorithm_val, uint8_t *sig_ptr, size_t sig_len, size_t *sig_lenout)
{
  ObjectArg a[3];
  struct {
    int32_t m_cert_handle;
    int32_t m_algorithm;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  i.m_cert_handle = cert_handle_val;
  a[1].bi = (ObjectBufIn) { data_ptr, data_len * sizeof(uint8_t) };
  i.m_algorithm = algorithm_val;
  a[2].b = (ObjectBuf) { sig_ptr, sig_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_certSign, a, ObjectCounts_pack(2, 1, 0, 0));

  *sig_lenout = a[2].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_certDecrypt(Object self, int32_t cert_handle_val, const uint8_t *cipher_ptr, size_t cipher_len, uint8_t *data_ptr, size_t data_len, size_t *data_lenout)
{
  ObjectArg a[3];
  a[0].b = (ObjectBuf) { &cert_handle_val, sizeof(int32_t) };
  a[1].bi = (ObjectBufIn) { cipher_ptr, cipher_len * sizeof(uint8_t) };
  a[2].b = (ObjectBuf) { data_ptr, data_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_certDecrypt, a, ObjectCounts_pack(2, 1, 0, 0));

  *data_lenout = a[2].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_certRelease(Object self, int32_t cert_handle_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &cert_handle_val, sizeof(int32_t) };

  return Object_invoke(self, IQwesService_OP_certRelease, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IQwesService_getProvisionedData(Object self, const uint8_t *service_id_ptr, size_t service_id_len, const void *request_opt_ptr, size_t request_opt_len, Object callback_val, const void *context_ptr, size_t context_len)
{
  ObjectArg a[4];
  a[0].bi = (ObjectBufIn) { service_id_ptr, service_id_len * sizeof(uint8_t) };
  a[1].bi = (ObjectBufIn) { request_opt_ptr, request_opt_len * 1 };
  a[3].o = callback_val;
  a[2].bi = (ObjectBufIn) { context_ptr, context_len * 1 };

  return Object_invoke(self, IQwesService_OP_getProvisionedData, a, ObjectCounts_pack(3, 0, 1, 0));
}

static inline int32_t
IQwesService_getProvisioningBlob(Object self, const uint8_t *service_id_ptr, size_t service_id_len, const void *request_opt_ptr, size_t request_opt_len, uint8_t *data_ptr, size_t data_len, size_t *data_lenout)
{
  ObjectArg a[3];
  a[0].bi = (ObjectBufIn) { service_id_ptr, service_id_len * sizeof(uint8_t) };
  a[1].bi = (ObjectBufIn) { request_opt_ptr, request_opt_len * 1 };
  a[2].b = (ObjectBuf) { data_ptr, data_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_getProvisioningBlob, a, ObjectCounts_pack(2, 1, 0, 0));

  *data_lenout = a[2].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_decryptProvisionedData(Object self, const uint8_t *encrypted_ptr, size_t encrypted_len, Object callback_val, const void *context_ptr, size_t context_len)
{
  ObjectArg a[3];
  a[0].bi = (ObjectBufIn) { encrypted_ptr, encrypted_len * sizeof(uint8_t) };
  a[2].o = callback_val;
  a[1].bi = (ObjectBufIn) { context_ptr, context_len * 1 };

  return Object_invoke(self, IQwesService_OP_decryptProvisionedData, a, ObjectCounts_pack(2, 0, 1, 0));
}

static inline int32_t
IQwesService_dataGet(Object self, int32_t handle_val, const uint8_t *decrypted_data_ptr, size_t decrypted_data_len, int32_t offset_val, int32_t bytes_to_read_val)
{
  ObjectArg a[2];
  struct {
    int32_t m_handle;
    int32_t m_offset;
    int32_t m_bytes_to_read;
  } i;
  a[0].b = (ObjectBuf) { &i, 12 };
  i.m_handle = handle_val;
  a[1].bi = (ObjectBufIn) { decrypted_data_ptr, decrypted_data_len * sizeof(uint8_t) };
  i.m_offset = offset_val;
  i.m_bytes_to_read = bytes_to_read_val;

  return Object_invoke(self, IQwesService_OP_dataGet, a, ObjectCounts_pack(2, 0, 0, 0));
}

static inline int32_t
IQwesService_attest(Object self, const uint8_t *nonce_ptr, size_t nonce_len, const uint8_t *data_ptr, size_t data_len, uint8_t *report_ptr, size_t report_len, size_t *report_lenout)
{
  ObjectArg a[3];
  a[0].bi = (ObjectBufIn) { nonce_ptr, nonce_len * sizeof(uint8_t) };
  a[1].bi = (ObjectBufIn) { data_ptr, data_len * sizeof(uint8_t) };
  a[2].b = (ObjectBuf) { report_ptr, report_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_attest, a, ObjectCounts_pack(2, 1, 0, 0));

  *report_lenout = a[2].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_checkLicense(Object self, const uint8_t *query_ptr, size_t query_len, uint8_t *results_ptr, size_t results_len, size_t *results_lenout)
{
  ObjectArg a[2];
  a[0].bi = (ObjectBufIn) { query_ptr, query_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { results_ptr, results_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_checkLicense, a, ObjectCounts_pack(1, 1, 0, 0));

  *results_lenout = a[1].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_checkAllLicenses(Object self, const uint8_t *query_ptr, size_t query_len, uint8_t *results_ptr, size_t results_len, size_t *results_lenout)
{
  ObjectArg a[2];
  a[0].bi = (ObjectBufIn) { query_ptr, query_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { results_ptr, results_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_checkAllLicenses, a, ObjectCounts_pack(1, 1, 0, 0));

  *results_lenout = a[1].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_installLicense(Object self, const uint8_t *license_buffer_ptr, size_t license_buffer_len, uint8_t *serial_ptr, size_t serial_len, size_t *serial_lenout, uint8_t *info_ptr, size_t info_len, size_t *info_lenout, uint64_t *restrictions_ptr)
{
  ObjectArg a[4];
  a[0].bi = (ObjectBufIn) { license_buffer_ptr, license_buffer_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { serial_ptr, serial_len * sizeof(uint8_t) };
  a[2].b = (ObjectBuf) { info_ptr, info_len * sizeof(uint8_t) };
  a[3].b = (ObjectBuf) { restrictions_ptr, sizeof(uint64_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_installLicense, a, ObjectCounts_pack(1, 3, 0, 0));

  *serial_lenout = a[1].b.size / sizeof(uint8_t);
  *info_lenout = a[2].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_getLicenseInfo(Object self, const uint8_t *serial_len_ptr, size_t serial_len_len, uint8_t *info_ptr, size_t info_len, size_t *info_lenout)
{
  ObjectArg a[2];
  a[0].bi = (ObjectBufIn) { serial_len_ptr, serial_len_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { info_ptr, info_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_getLicenseInfo, a, ObjectCounts_pack(1, 1, 0, 0));

  *info_lenout = a[1].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_registerCallback(Object self, Object callback_val, Object *token_ptr)
{
  ObjectArg a[2];
  a[0].o = callback_val;

  int32_t result = Object_invoke(self, IQwesService_OP_registerCallback, a, ObjectCounts_pack(0, 0, 1, 1));

  *token_ptr = a[1].o;

  return result;
}

static inline int32_t
IQwesService_forceSync(Object self)
{
  return Object_invoke(self, IQwesService_OP_forceSync, 0, 0);
}

static inline int32_t
IQwesService_createAttestationReport(Object self, const uint8_t *token_cert_ptr, size_t token_cert_len, const uint8_t *nonce_ptr, size_t nonce_len, const uint8_t *data_ptr, size_t data_len, uint8_t *report_ptr, size_t report_len, size_t *report_lenout)
{
  ObjectArg a[4];
  a[0].bi = (ObjectBufIn) { token_cert_ptr, token_cert_len * sizeof(uint8_t) };
  a[1].bi = (ObjectBufIn) { nonce_ptr, nonce_len * sizeof(uint8_t) };
  a[2].bi = (ObjectBufIn) { data_ptr, data_len * sizeof(uint8_t) };
  a[3].b = (ObjectBuf) { report_ptr, report_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, IQwesService_OP_createAttestationReport, a, ObjectCounts_pack(3, 1, 0, 0));

  *report_lenout = a[3].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
IQwesService_createAttestationReportAuto(Object self, const uint8_t *data_ptr, size_t data_len, int8_t bring_up_network_val, Object report_callback_val)
{
  ObjectArg a[3];
  a[0].bi = (ObjectBufIn) { data_ptr, data_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { &bring_up_network_val, sizeof(int8_t) };
  a[2].o = report_callback_val;

  return Object_invoke(self, IQwesService_OP_createAttestationReportAuto, a, ObjectCounts_pack(2, 0, 1, 0));
}

static inline int32_t
IQwesService_setClientCredentials(Object self, const uint8_t *credentials_ptr, size_t credentials_len)
{
  ObjectArg a[1];
  a[0].bi = (ObjectBufIn) { credentials_ptr, credentials_len * sizeof(uint8_t) };

  return Object_invoke(self, IQwesService_OP_setClientCredentials, a, ObjectCounts_pack(1, 0, 0, 0));
}


#define IReportCallback_OP_onReport 0

static inline int32_t
IReportCallback_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IReportCallback_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IReportCallback_onReport(Object self, int32_t status_val, const uint8_t *report_ptr, size_t report_len)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &status_val, sizeof(int32_t) };
  a[1].bi = (ObjectBufIn) { report_ptr, report_len * sizeof(uint8_t) };

  return Object_invoke(self, IReportCallback_OP_onReport, a, ObjectCounts_pack(2, 0, 0, 0));
}



