// =======================================================================
// Copyright (c) 2015-2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// =======================================================================

#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "impl_base.hpp"
#include "IIO.hpp"

/** @cond */

class IIOImplBase : protected ImplBase, public IIIO {
   public:
    IIOImplBase() {}
    virtual ~IIOImplBase() {}

   protected:
    virtual int32_t invoke(ObjectOp op, ObjectArg* a, ObjectCounts k) {
        switch (ObjectOp_methodID(op)) {
            case OP_getLength: {
                if (k != ObjectCounts_pack(0, 1, 0, 0) ||
                    a[0].b.size != 8) {
                    break;
                }
                uint64_t* len_ptr = (uint64_t*)a[0].b.ptr;
                return getLength(len_ptr);
            }
            case OP_readAtOffset: {
                if (k != ObjectCounts_pack(1, 1, 0, 0) ||
                    a[0].b.size != 8) {
                    break;
                }
                const uint64_t* offset_ptr = (const uint64_t*)a[0].b.ptr;
                void* data_ptr = (void*)a[1].b.ptr;
                size_t data_len = a[1].b.size / 1;
                int32_t r = readAtOffset(*offset_ptr, data_ptr, data_len, &data_len);
                a[1].b.size = data_len * 1;
                return r;
            }
            case OP_writeAtOffset: {
                if (k != ObjectCounts_pack(2, 0, 0, 0) ||
                    a[0].b.size != 8) {
                    break;
                }
                const uint64_t* offset_ptr = (const uint64_t*)a[0].b.ptr;
                const void* data_ptr = (const void*)a[1].b.ptr;
                size_t data_len = a[1].b.size / 1;
                return writeAtOffset(*offset_ptr, data_ptr, data_len);
            }
            default: { return Object_ERROR_INVALID; }
        }
        return Object_ERROR_INVALID;
    }
};

