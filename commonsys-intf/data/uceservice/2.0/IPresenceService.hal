/*********************************************************************
 Copyright (c) 2017-2018 Qualcomm Technologies, Inc.
 All Rights Reserved.
 Confidential and Proprietary - Qualcomm Technologies, Inc.
**********************************************************************/

package com.qualcomm.qti.uceservice@2.0;

import IPresenceListener;

interface IPresenceService {

  /**
   * Adds a listener to the Presence service.
   *
   * @param serviceHandle    received in IPresenceListener.onPresenceCreated() callback.
   * @param listener         IPresenceListener Object.
   * @param clientHandle     token from the client.
   *
   * @return status          status of the request placed.
   */
  addListener(int64_t serviceHandle, IPresenceListener listener,
      int64_t clientHandle) generates (UceStatus status);

  /**
   * Removes a listener from the Presence service.
   *
   * @param serviceHandle    received in IPresenceListener.onPresenceCreated() callback.
   * @param clientHandle     token provided in IUceService.createPresenceService() or
   *                         IPresenceService.addListener().
   * @return status          status of the request placed.
   */
  removeListener(int64_t serviceHandle, int64_t clientHandle) generates (UceStatus status);

  /**
   * Re-enables the Presence service from disabled state.
   *
   * The Presence Service moves to disabled state in runtime only if the network
   * sends a response for "489 Bad event" SIP response for any Presence event.
   *
   * If the client intends to resume Presence service, The client must call this API
   * before calling any new presence API requests.
   *
   * The final status of this request is notified in IPresenceListener.cmdStatus() callback.
   *
   * @param serviceHandle     received in IPresenceListener.onPresenceCreated() callback.
   * @param userData          client token for the request
   * @return status           status of the request placed.
   */
  reEnableService(int64_t serviceHandle, int64_t userData) generates (UceStatus status);

  /**
   * Sends a request to publish current device capabilities.
   * The network response is notifed in IPresenceListener.onSipResponseReceived() callback.
   *
   * @param serviceHandle     received in IPresenceListener.onPresenceCreated() callback.
   * @param myCapInfo         capabilities to share to network.
   * @param userData          client token for the request.
   * @return status           status of the request placed.
   */
  publishCapability(int64_t serviceHandle, PresenceCapabilityInfo capInfo,
      int64_t userData) generates (UceStatus status);

  /**
   * Retrieves the capability information for a single contact. Clients receive the requested
   * information via the listener callback function IPresenceListener.onCapInfoReceived() callback.
   *
   * @param serviceHandle     received in IPresenceListener.onPresenceCreated() callback.
   * @param remoteUri         remote contact URI
   *                          This has to to be a SIP URI or TEL uri of the remote contact
   * @param userData          client token for the request.
   * @return status           status of the request placed.
   */
  getContactCapability(int64_t serviceHandle, string remoteUri,
      int64_t userData) generates (UceStatus status);

  /**
   * Retrieves the capability information for a list of contacts. Clients receive the requested
   * information via the listener callback function IPresenceListener.onListCapInfoReceived() callback.
   *
   * @param serviceHandle     received in IPresenceListener.onPresenceCreated() callback.
   * @param contactList       list of remote contact URI's.
   *                          the URI should be in format of  SIP URI or TEL uri of the remote contact.
   * @param userData          client token for the request.
   * @return status           status of the request placed.
   */
  getContactListCapability (int64_t serviceHandle, vec<string> contactList,
      int64_t userData) generates (UceStatus status);


  /**
   * Sets the mapping between a new/custom feature tag and the corresponding service tuple information
   * to be included in the published document.
   * The status of this call is received in IPresenceListener.cmdStatus() callback.
   *
   * Please refer to GSMA RCS 5.3 documentation on the format of custom feature tag
   * and service tuple information.
   *
   * @param serviceHandle     received in IPresenceListener.onPresenceCreated() callback.
   * @param featureTag        feature to be supported.
   * @param serviceInfo       service information describing the featureTag.
   * @param userData          client token for the request.
   * @return status           status of the request placed.
   */
  setNewFeatureTag(int64_t serviceHandle, RcsFeatureTag featureTag, PresServiceInfo serviceInfo,
      int64_t userData) generates (UceStatus status);
};
