/*============================================================================

  Copyright (c) 2013 Qualcomm Technologies, Inc. All Rights Reserved.
  Qualcomm Technologies Proprietary and Confidential.

============================================================================*/

#ifndef CPP_DEFAULT_ASF9_H
#define CPP_DEFAULT_ASF9_H

/* Default ASF 9x9 parametes for FW 1.6.x */
float d_activity_normalization_lut[64] = {
  0.547723, 0.547723, 0.547723, 0.545510, 0.541084, 0.536659, 0.532233, 0.527808,
  0.523382, 0.518957, 0.514531, 0.510106, 0.505680, 0.501255, 0.496829, 0.492404,
  0.487978, 0.483553, 0.479127, 0.474702, 0.470276, 0.465851, 0.461425, 0.457000,
  0.452574, 0.448149, 0.443723, 0.439298, 0.434872, 0.430447, 0.426021, 0.421596,
  0.417170, 0.412745, 0.408319, 0.403894, 0.399468, 0.395043, 0.390617, 0.387298,
  0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298,
  0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298,
  0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298, 0.387298,
};

float d_weight_modulation_lut[64] = {
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
};

unsigned int d_soft_threshold_lut[64] = {
    0,   0,   0,   4,  11,  18,  25,  32,
   39,  46,  53,  60,  67,  74,  81,  88,
   95, 102, 109, 117, 124, 131, 138, 145,
  152, 159, 166, 173, 180, 187, 194, 201,
  208, 215, 222, 230, 237, 244, 251, 256,
  256, 256, 256, 256, 256, 256, 256, 256,
  256, 256, 256, 256, 256, 256, 256, 256,
  256, 256, 256, 256, 256, 256, 256, 256,
};

float d_gain_lut[64] = {
  2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000,
  2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000,
  2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000,
  2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000,
  2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000,
  2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000,
  2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000,
  2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000, 2.000000,
};

float d_gain_weight_lut[256] = {
  0.000000, 0.003899, 0.060587, 0.271237, 0.632121, 0.912962, 0.993670, 0.999916,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
  1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
};

int d_horizontal_nz[8] = { 0, 0, 0, 0, 2, 2, 2, 0 };

int d_downward_diagonal_nz[8] = { 0, 0, 0, 0, 2, 2, 2, 0 };

short d_sobel_H_coeff[25] = {
   0,      0,      0,      0,      0,
   0,      0,      0,      0,      0,
   0,      7,     42,    104,    139,
   0,     14,     83,    208,    277,
   0,      0,      0,      0,      0,
};

short d_sobel_se_diagonal_coeff[25] = {
    0,      0,     -1,     -2,     -1,     0,      0,      0,      0,
           0,     -8,    -30,    -38,   -15,      0,      0,
                   0,    -79,   -165,  -125,    -33,
                           0,   -221,  -280,
                                   0,
};

short d_hpf_h_coeff[25] = {
   0,     -1,     -3,     -3,     -4,
  -1,     -5,    -10,    -13,    -14,
  -3,    -10,    -19,    -24,    -27,
   1,      5,     10,     13,     14,
   6,     23,     43,     56,     58,
};

short d_hpf_se_diagonal_coeff[25] = {
   0,     -1,     -3,     -3,     -4,     -3,    -3,    -1,      0,
          -1,     -2,     -9,    -14,    -13,   -10,    -5,
                  13,     16,    -11,    -24,   -19,
                          58,     44,     -8,
                                  88,
};

short d_hpf_symmetric_coeff[15] = {
   0,     -1,     -3,     -3,     -4,
          -5,    -10,    -13,    -14,
                 -19,    -24,    -27,
                          32,     91,
                                 216,
};

short d_lpf_coeff[15] = {
   0,      0,      0,      0,      0,
           4,      8,     12,     16,
                  16,     24,     32,
                          36,     48,
                                  64,
};

short d_activity_lpf_coeff[6] = {
   1,      4,      6,
          16,     24,
                  36,
};

short d_activity_band_pass_coeff[6] = {
  -1,     -4,     -6,
           0,      8,
                  28,
};

int d_sp = 0;
float d_gain_cap = 7.96;

unsigned int d_gamma_corrected_luma_target = 128;

int d_en_dyna_clamp = 0;

float d_smax = 1.0;
int d_omax = 6;
float d_smin = 1.0;
int d_omin = 6;

int d_clamp_UL = 14;
int d_clamp_LL = -14;

float d_perpendicular_scale_factor = 2.0;

unsigned int d_max_value_threshold = 10000;
float d_norm_scale = 1;
unsigned int d_activity_clamp_threshold = 255;
unsigned char d_L2_norm_en = 0;
float d_median_blend_upper_offset = 0;
float d_median_blend_lower_offset = 0;

#endif
