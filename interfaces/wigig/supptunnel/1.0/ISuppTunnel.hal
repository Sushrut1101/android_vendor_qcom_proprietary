/*
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.hardware.wigig.supptunnel@1.0;

import ISuppTunnelCallback;

/**
 * Interface for supplicant tunnel for controlling a supplicant instance
 * Allows start/stop of supplicant, sending commands and receiving events
 */
interface ISuppTunnel {

  /**
   * Starts the supplicant instance
   *
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SuppTunnelStatusCode.SUCCESS|,
   *         |SuppTunnelStatusCode.FAILURE_IFACE_INVALID|
   *         |SuppTunnelStatusCode.FAILURE_UNKNOWN|
   */
  startSupplicant() generates (SuppTunnelStatus status);

  /**
   * Kills the supplicant instance
   *
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SuppTunnelStatusCode.SUCCESS|,
   *         |SuppTunnelStatusCode.FAILURE_IFACE_INVALID|
   *         |SuppTunnelStatusCode.FAILURE_UNKNOWN|
   */
  killSupplicant() generates (SuppTunnelStatus status);

  /**
   * Send a command to the supplicant synchronously and return reply
   *
   * @param command the command to execute
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SuppTunnelStatusCode.SUCCESS|,
   *         |SuppTunnelStatusCode.FAILURE_UNKNOWN|,
   *         |SuppTunnelStatusCode.FAILURE_IFACE_INVALID|
   * @return reply from supplicant (string)
   */
  doCommand(string command) generates (SuppTunnelStatus status, string reply);

  /**
   * Register a callback for receiving events from supplicant
   * All events (from all interface supported by supplicant)
   * will be received, it is caller responsibility to filter.
   *
   * @param callback Callback object
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SuppTunnelStatusCode.SUCCESS|,
   *         |SuppTunnelStatusCode.FAILURE_UNKNOWN|,
   *         |SuppTunnelStatusCode.FAILURE_IFACE_INVALID|,
   */
  registerCallback(ISuppTunnelCallback callback)
      generates (SuppTunnelStatus status);

  /**
   * Set a custom config option that will be added to
   * the config file.
   * Only config options explicitly supported by the tunnel type
   * can be added
   * specify an empty string to remove a config option
   */
   setConfigOption(string name, string value)
       generates (SuppTunnelStatus status);
};
