/*
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 */

/*
 * Structure Definition/Usage Guideline:
 *
 * If an ImsRadio request API needs to pass three or less
 * arguments, then only non-nested structs should be used for
 * the same. The struct(s) can be used in conjunction with
 * native types.
 */

package vendor.qti.hardware.radio.ims@1.0;

enum IpPresentation : int32_t {
    IP_PRESENTATION_NUM_ALLOWED,
    IP_PRESENTATION_NUM_RESTRICTED,
    IP_PRESENTATION_NUM_DEFAULT,
    IP_PRESENTATION_INVALID,
};

enum CallType : int32_t {
    CALL_TYPE_VOICE,
    CALL_TYPE_VT_TX,
    CALL_TYPE_VT_RX,
    CALL_TYPE_VT,
    CALL_TYPE_VT_NODIR,
    CALL_TYPE_CS_VS_TX,
    CALL_TYPE_CS_VS_RX,
    CALL_TYPE_PS_VS_TX,
    CALL_TYPE_PS_VS_RX,
    CALL_TYPE_UNKNOWN,
    CALL_TYPE_SMS,
    CALL_TYPE_UT,
    CALL_TYPE_INVALID,
};

enum CallDomain : int32_t {
    CALL_DOMAIN_UNKNOWN,
    CALL_DOMAIN_CS,
    CALL_DOMAIN_PS,
    CALL_DOMAIN_AUTOMATIC,
    CALL_DOMAIN_NOT_SET,
    CALL_DOMAIN_INVALID,
};

enum CallFailCause : int32_t {
    CALL_FAIL_UNOBTAINABLE_NUMBER,
    CALL_FAIL_NORMAL,
    CALL_FAIL_BUSY,
    CALL_FAIL_NORMAL_UNSPECIFIED,
    CALL_FAIL_CONGESTION,
    CALL_FAIL_INCOMPATIBILITY_DESTINATION,
    CALL_FAIL_CALL_BARRED,
    CALL_FAIL_FDN_BLOCKED,
    CALL_FAIL_IMEI_NOT_ACCEPTED,
    CALL_FAIL_DIAL_MODIFIED_TO_USSD,
    CALL_FAIL_DIAL_MODIFIED_TO_SS,
    CALL_FAIL_DIAL_MODIFIED_TO_DIAL,
    CALL_FAIL_EMERGENCY_TEMP_FAILURE,
    CALL_FAIL_EMERGENCY_PERM_FAILURE,
    CALL_FAIL_HO_NOT_FEASIBLE,
    CALL_FAIL_USER_BUSY = 501,
    CALL_FAIL_USER_REJECT = 502,
    CALL_FAIL_LOW_BATTERY = 503,
    CALL_FAIL_BLACKLISTED_CALL_ID,
    CALL_FAIL_CS_RETRY_REQUIRED,
    CALL_FAIL_NETWORK_UNAVAILABLE,
    CALL_FAIL_FEATURE_UNAVAILABLE,
    CALL_FAIL_SIP_ERROR,
    CALL_FAIL_MISC,
    CALL_FAIL_ANSWERED_ELSEWHERE,
    CALL_FAIL_PULL_OUT_OF_SYNC,
    CALL_FAIL_CAUSE_CALL_PULLED,
    CALL_FAIL_ACCESS_CLASS_BLOCKED,
    CALL_FAIL_SIP_REDIRECTED,
    CALL_FAIL_SIP_BAD_REQUEST,
    CALL_FAIL_SIP_FORBIDDEN,
    CALL_FAIL_SIP_NOT_FOUND,
    CALL_FAIL_SIP_NOT_SUPPORTED,
    CALL_FAIL_SIP_REQUEST_TIMEOUT,
    CALL_FAIL_SIP_TEMPORARILY_UNAVAILABLE,
    CALL_FAIL_SIP_BAD_ADDRESS,
    CALL_FAIL_SIP_BUSY,
    CALL_FAIL_SIP_REQUEST_CANCELLED,
    CALL_FAIL_SIP_NOT_ACCEPTABLE,
    CALL_FAIL_SIP_NOT_REACHABLE,
    CALL_FAIL_SIP_SERVER_INTERNAL_ERROR,
    CALL_FAIL_SIP_SERVER_NOT_IMPLEMENTED,
    CALL_FAIL_SIP_SERVER_BAD_GATEWAY,
    CALL_FAIL_SIP_SERVICE_UNAVAILABLE,
    CALL_FAIL_SIP_SERVER_TIMEOUT,
    CALL_FAIL_SIP_SERVER_VERSION_UNSUPPORTED,
    CALL_FAIL_SIP_SERVER_MESSAGE_TOOLARGE,
    CALL_FAIL_SIP_SERVER_PRECONDITION_FAILURE,
    CALL_FAIL_SIP_USER_REJECTED,
    CALL_FAIL_SIP_GLOBAL_ERROR,
    CALL_FAIL_MEDIA_INIT_FAILED,
    CALL_FAIL_MEDIA_NO_DATA,
    CALL_FAIL_MEDIA_NOT_ACCEPTABLE,
    CALL_FAIL_MEDIA_UNSPECIFIED_ERROR,
    CALL_FAIL_HOLD_RESUME_FAILED,
    CALL_FAIL_HOLD_RESUME_CANCELED,
    CALL_FAIL_HOLD_REINVITE_COLLISION,
    CALL_FAIL_DIAL_MODIFIED_TO_DIAL_VIDEO,
    CALL_FAIL_DIAL_VIDEO_MODIFIED_TO_DIAL,
    CALL_FAIL_DIAL_VIDEO_MODIFIED_TO_DIAL_VIDEO,
    CALL_FAIL_DIAL_VIDEO_MODIFIED_TO_SS,
    CALL_FAIL_DIAL_VIDEO_MODIFIED_TO_USSD,
    CALL_FAIL_ERROR_UNSPECIFIED,
    CALL_FAIL_INVALID,
};

enum RegState : int32_t {
    REGISTERED,
    NOT_REGISTERED,
    REGISTERING,
    INVALID,
};

enum StatusType : int32_t {
    STATUS_DISABLED,
    STATUS_PARTIALLY_ENABLED,
    STATUS_ENABLED,
    STATUS_NOT_SUPPORTED,
    STATUS_INVALID,
};

enum RadioTechType : int32_t {
    RADIO_TECH_ANY,
    RADIO_TECH_UNKNOWN,
    RADIO_TECH_GPRS,
    RADIO_TECH_EDGE,
    RADIO_TECH_UMTS,
    RADIO_TECH_IS95A,
    RADIO_TECH_IS95B,
    RADIO_TECH_1xRTT,
    RADIO_TECH_EVDO_0,
    RADIO_TECH_EVDO_A,
    RADIO_TECH_HSDPA,
    RADIO_TECH_HSUPA,
    RADIO_TECH_HSPA,
    RADIO_TECH_EVDO_B,
    RADIO_TECH_EHRPD,
    RADIO_TECH_LTE,
    RADIO_TECH_HSPAP,
    RADIO_TECH_GSM,
    RADIO_TECH_TD_SCDMA,
    RADIO_TECH_WIFI,
    RADIO_TECH_IWLAN,
    RADIO_TECH_INVALID,
};

enum ConfigItem : int32_t {
    CONFIG_ITEM_NONE,
    CONFIG_ITEM_VOCODER_AMRMODESET,
    CONFIG_ITEM_VOCODER_AMRWBMODESET,
    CONFIG_ITEM_SIP_SESSION_TIMER,
    CONFIG_ITEM_MIN_SESSION_EXPIRY,
    CONFIG_ITEM_CANCELLATION_TIMER,
    CONFIG_ITEM_T_DELAY,
    CONFIG_ITEM_SILENT_REDIAL_ENABLE,
    CONFIG_ITEM_SIP_T1_TIMER,
    CONFIG_ITEM_SIP_T2_TIMER,
    CONFIG_ITEM_SIP_TF_TIMER,
    CONFIG_ITEM_VLT_SETTING_ENABLED,
    CONFIG_ITEM_LVC_SETTING_ENABLED,
    CONFIG_ITEM_DOMAIN_NAME,
    CONFIG_ITEM_SMS_FORMAT,
    CONFIG_ITEM_SMS_OVER_IP,
    CONFIG_ITEM_PUBLISH_TIMER,
    CONFIG_ITEM_PUBLISH_TIMER_EXTENDED,
    CONFIG_ITEM_CAPABILITIES_CACHE_EXPIRATION,
    CONFIG_ITEM_AVAILABILITY_CACHE_EXPIRATION,
    CONFIG_ITEM_CAPABILITIES_POLL_INTERVAL,
    CONFIG_ITEM_SOURCE_THROTTLE_PUBLISH,
    CONFIG_ITEM_MAX_NUM_ENTRIES_IN_RCL,
    CONFIG_ITEM_CAPAB_POLL_LIST_SUB_EXP,
    CONFIG_ITEM_GZIP_FLAG,
    CONFIG_ITEM_EAB_SETTING_ENABLED,
    CONFIG_ITEM_MOBILE_DATA_ENABLED,
    CONFIG_ITEM_VOICE_OVER_WIFI_ENABLED,
    CONFIG_ITEM_VOICE_OVER_WIFI_ROAMING,
    CONFIG_ITEM_VOICE_OVER_WIFI_MODE,
    CONFIG_ITEM_CAPABILITY_DISCOVERY_ENABLED,
    CONFIG_ITEM_EMERGENCY_CALL_TIMER,
    CONFIG_ITEM_SSAC_HYSTERESIS_TIMER,
    CONFIG_ITEM_VOLTE_USER_OPT_IN_STATUS,
    CONFIG_ITEM_LBO_PCSCF_ADDRESS,
    CONFIG_ITEM_KEEP_ALIVE_ENABLED,
    CONFIG_ITEM_REGISTRATION_RETRY_BASE_TIME_SEC,
    CONFIG_ITEM_REGISTRATION_RETRY_MAX_TIME_SEC,
    CONFIG_ITEM_SPEECH_START_PORT,
    CONFIG_ITEM_SPEECH_END_PORT,
    CONFIG_ITEM_SIP_INVITE_REQ_RETX_INTERVAL_MSEC,
    CONFIG_ITEM_SIP_INVITE_RSP_WAIT_TIME_MSEC,
    CONFIG_ITEM_SIP_INVITE_RSP_RETX_WAIT_TIME_MSEC,
    CONFIG_ITEM_SIP_NON_INVITE_REQ_RETX_INTERVAL_MSEC,
    CONFIG_ITEM_SIP_NON_INVITE_TXN_TIMEOUT_TIMER_MSEC,
    CONFIG_ITEM_SIP_INVITE_RSP_RETX_INTERVAL_MSEC,
    CONFIG_ITEM_SIP_ACK_RECEIPT_WAIT_TIME_MSEC,
    CONFIG_ITEM_SIP_ACK_RETX_WAIT_TIME_MSEC,
    CONFIG_ITEM_SIP_NON_INVITE_REQ_RETX_WAIT_TIME_MSEC,
    CONFIG_ITEM_SIP_NON_INVITE_RSP_RETX_WAIT_TIME_MSEC,
    CONFIG_ITEM_AMR_WB_OCTET_ALIGNED_PT,
    CONFIG_ITEM_AMR_WB_BANDWIDTH_EFFICIENT_PT,
    CONFIG_ITEM_AMR_OCTET_ALIGNED_PT,
    CONFIG_ITEM_AMR_BANDWIDTH_EFFICIENT_PT,
    CONFIG_ITEM_DTMF_WB_PT,
    CONFIG_ITEM_DTMF_NB_PT,
    CONFIG_ITEM_AMR_DEFAULT_MODE,
    CONFIG_ITEM_SMS_PSI,
    CONFIG_ITEM_VIDEO_QUALITY,
    CONFIG_ITEM_THRESHOLD_LTE1,
    CONFIG_ITEM_THRESHOLD_LTE2,
    CONFIG_ITEM_THRESHOLD_LTE3,
    CONFIG_ITEM_THRESHOLD_1x,
    CONFIG_ITEM_THRESHOLD_WIFI_A,
    CONFIG_ITEM_THRESHOLD_WIFI_B,
    CONFIG_ITEM_T_EPDG_LTE,
    CONFIG_ITEM_T_EPDG_WIFI,
    CONFIG_ITEM_T_EPDG_1x,
    CONFIG_ITEM_VWF_SETTING_ENABLED,
    CONFIG_ITEM_VCE_SETTING_ENABLED,
    CONFIG_ITEM_RTT_SETTING_ENABLED,
    CONFIG_ITEM_SMS_APP,
    CONFIG_ITEM_VVM_APP,
    CONFIG_ITEM_INVALID,
};

enum ConfigFailureCause : int32_t {
    CONFIG_NO_ERR,
    CONFIG_IMS_NOT_READY,
    CONFIG_FILE_NOT_AVAILABLE,
    CONFIG_READ_FAILED,
    CONFIG_WRITE_FAILED,
    CONFIG_OTHER_INTERNAL_ERR,
    CONFIG_FAILURE_INVALID,
};

enum ToneOperation : int32_t {
    STOP,
    START,
    INVALID,
};

enum HandoverType : int32_t {
    START,
    COMPLETE_SUCCESS,
    COMPLETE_FAIL,
    CANCEL,
    NOT_TRIGGERED,
    NOT_TRIGGERED_MOBILE_DATA_OFF,
    INVALID,
};

enum CallState : int32_t {
    CALL_ACTIVE,
    CALL_HOLDING,
    CALL_DIALING,
    CALL_ALERTING,
    CALL_INCOMING,
    CALL_WAITING,
    CALL_END,
    CALL_STATE_INVALID,
};

enum ServiceType : int32_t {
    SMS,
    VOIP,
    VT,
    INVALID,
};

enum ExtraType : int32_t {
    LTE_TO_IWLAN_HO_FAIL,
    INVALID,
};

enum RadioState : int32_t {
    RADIO_STATE_OFF,
    RADIO_STATE_UNAVAILABLE,
    RADIO_STATE_ON,
    RADIO_STATE_INVALID,
};

enum ServiceClassStatus : int32_t {
    DISABLED,
    ENABLED,
    INVALID,
};

enum FacilityType : int32_t {
    FACILITY_CLIP,    /* Calling Line Identification Presentation */
    FACILITY_COLP,    /* Connected Line Identification Presentation */
    FACILITY_BAOC,    /* Bar All Outgoing Calls */
    FACILITY_BAOIC,   /* Bar All Outgoing International Calls */
    FACILITY_BAOICxH, /* Bar all Outgoing International Calls except those
                           * directed to home PLMN country
                           */
    FACILITY_BAIC,    /* Bar All Incoming Calls */
    FACILITY_BAICr,   /* Bar All Incoming Calls when Roaming outside
                           * the home PLMN country
                           */
    FACILITY_BA_ALL,  /* Bar All incoming & outgoing Calls */
    FACILITY_BA_MO,   /* Bar All Outgoing Calls */
    FACILITY_BA_MT,  /* Bar All Incming Calls */
    FACILITY_BS_MT,  /* Bar Incoming Calls from specific DN */
    FACILITY_BAICa,  /* Bar All Incoming Calls from Anonymous numbers*/
    FACILITY_INVALID,
};

enum ClipStatus : int32_t {
    NOT_PROVISIONED,
    PROVISIONED,
    STATUS_UNKNOWN,
    INVALID,
};

enum TtyMode : int32_t {
    TTY_MODE_OFF,
    TTY_MODE_FULL,
    TTY_MODE_HCO,
    TTY_MODE_VCO,
    TTY_MODE_INVALID,
};

enum ConferenceCallState : int32_t {
    RINGING,
    FOREGROUND,
    BACKGROUND,
    INVALID,
};

enum CallModifyFailCause : int32_t {
    E_SUCCESS,
    E_RADIO_NOT_AVAILABLE,
    E_GENERIC_FAILURE,
    E_REQUEST_NOT_SUPPORTED,
    E_CANCELLED,
    E_UNUSED,
    E_INVALID_PARAMETER,
    E_REJECTED_BY_REMOTE,
    E_IMS_DEREGISTERED,
    E_NETWORK_NOT_SUPPORTED,
    E_HOLD_RESUME_FAILED,
    E_HOLD_RESUME_CANCELED,
    E_REINVITE_COLLISION,
    E_INVALID,
};

enum NotificationType : int32_t {
    MO,
    MT,
    INVALID,
};

enum MessageType : int32_t {
    MWI_MSG_NONE,
    MWI_MSG_VOICE,
    MWI_MSG_VIDEO,
    MWI_MSG_FAX,
    MWI_MSG_PAGER,
    MWI_MSG_MULTIMEDIA,
    MWI_MSG_TEXT,
    MWI_MSG_INVALID,
};

enum MessagePriority : int32_t {
    MWI_MSG_PRIORITY_UNKNOWN,
    MWI_MSG_PRIORITY_LOW,
    MWI_MSG_PRIORITY_NORMAL,
    MWI_MSG_PRIORITY_URGENT,
    MWI_MSG_PRIORITY_INVALID,
};

enum EctType : int32_t {
    BLIND_TRANSFER,
    ASSURED_TRANSFER,
    CONSULTATIVE_TRANSFER,
    INVALID,
};

enum ConfParticipantOperation : int32_t {
    ADD,
    REMOVE,
    INVALID,
};

enum BlockReasonType : int32_t {
    PDP_FAILURE,
    REGISTRATION_FAILURE,
    HANDOVER_FAILURE,
    OTHER_FAILURE,
    INVALID,
};

enum RegFailureReasonType : int32_t {
    UNSPECIFIED,
    MOBILE_IP,
    INTERNAL,
    CALL_MANAGER_DEFINED,
    TYPE_3GPP_SPEC_DEFINED,
    PPP,
    EHRPD,
    IPV6,
    IWLAN,
    HANDOFF,
    INVALID,
};

enum RttMode : int32_t {
    RTT_MODE_DISABLED,
    RTT_MODE_FULL,
    RTT_MODE_INVALID,
};

struct RegistrationInfo {
    RegState state;
    uint32_t errorCode;
    string errorMessage;
    RadioTechType radioTech;
    string pAssociatedUris;
};

struct StatusForAccessTech {
    RadioTechType networkMode;
    StatusType status;
    uint32_t restrictCause;
    bool hasRegistration;
    RegistrationInfo registration;
};

struct ServiceStatusInfo {
    bool hasIsValid;
    bool isValid;
    ServiceType type;
    CallType callType;
    StatusType status;
    vec<uint8_t> userdata;
    uint32_t restrictCause;
    vec<StatusForAccessTech> accTechStatus;
    RttMode rttMode;
};

struct CallDetails {
    CallType callType;
    CallDomain callDomain;
    uint32_t extrasLength;
    vec<string> extras;

    vec<ServiceStatusInfo> localAbility;
    vec<ServiceStatusInfo> peerAbility;
    uint32_t callSubstate;
    uint32_t mediaId;
    uint32_t causeCode;
    RttMode rttMode;
    string sipAlternateUri;
};

struct DialRequest {
    string address;
    uint32_t clirMode;
    IpPresentation presentation;
    bool hasCallDetails;
    CallDetails callDetails;
    bool hasIsConferenceUri;
    bool isConferenceUri;
    bool hasIsCallPull;
    bool isCallPull;
    bool hasIsEncrypted;
    bool isEncrypted;
};

struct SipErrorInfo {
    uint32_t errorCode;
    string errorString;
};

struct CallFailCauseResponse {
    CallFailCause failCause;
    vec<uint8_t> errorinfo;
    string networkErrorString;
    bool hasErrorDetails;
    SipErrorInfo errorDetails;
};

struct HangupRequestInfo {
    uint32_t connIndex;
    bool hasMultiParty;
    bool multiParty;
    string connUri;
    uint32_t conf_id;
    bool hasFailCauseResponse;
    CallFailCauseResponse failCauseResponse;
};

struct ConfigInfo {
    ConfigItem item;
    bool hasBoolValue;
    bool boolValue;
    uint32_t intValue;
    string stringValue;
    ConfigFailureCause errorCause;
};

struct Extra {
    ExtraType type;
    vec<uint8_t> extraInfo;
};

struct HandoverInfo {
    HandoverType type;
    RadioTechType srcTech;
    RadioTechType targetTech;
    bool hasHoExtra;
    Extra hoExtra;
    string errorCode;
    string errorMessage;
};

struct CallInfo {
    CallState state;
    uint32_t index;
    uint32_t toa;
    bool hasIsMpty;
    bool isMpty;
    bool hasIsMT;
    bool isMT;
    uint32_t als;
    bool hasIsVoice;
    bool isVoice;
    bool hasIsVoicePrivacy;
    bool isVoicePrivacy;
    string number;
    uint32_t numberPresentation;
    string name;
    uint32_t namePresentation;
    bool hasCallDetails;
    CallDetails callDetails;
    bool hasFailCause;
    CallFailCauseResponse failCause;
    bool hasIsEncrypted;
    bool isEncrypted;
    bool hasIsCalledPartyRinging;
    bool isCalledPartyRinging;
    string historyInfo;
    bool hasIsVideoConfSupported;
    bool isVideoConfSupported;
};

struct CbNumInfo {
    ServiceClassStatus status;
    string number;
};

struct CbNumListInfo {
    uint32_t serviceClass; /* only voice class i.e 1 is supported */
    vec<CbNumInfo> cbNumInfo; /* every element in CbNumInfo corresponds to
                               * each serviceClass */
};

struct SuppServiceStatus {
    ServiceClassStatus status;
    FacilityType facilityType; /* values are of type enum FacilityType */
    string failureCause; /* Deprecated. Please use errorDetails field */
    vec<CbNumListInfo> cbNumListInfo; /* used by FACILITY_BS_MT for query operation */
    bool hasErrorDetails;
    SipErrorInfo errorDetails; /* SIP error details on failure */
};

struct ClipProvisionStatus{
    ClipStatus clipStatus;
    bool hasErrorDetails;
    SipErrorInfo errorDetails;
};

struct ClirInfo {
    uint32_t paramM;
    uint32_t paramN;
};

struct ColrInfo {
    IpPresentation presentation;
    bool hasErrorDetails;
    SipErrorInfo errorDetails; /* SIP error details on failure */
};

struct DtmfInfo {
    string dtmf;
};

struct TtyInfo {
    TtyMode mode; /* Tty Mode */
    vec<uint8_t> userData; /* Additional user data related to this notification for future */
};

struct ConferenceInfo {
    vec<uint8_t> confInfoUri;
    ConferenceCallState conferenceCallState; /* Conference Call state*/
};

struct ViceInfo {
    vec<uint8_t> viceInfoUri; /* XML for Dialog Event Package
                               * as per RFC 4235
                               */
};

struct CallModifyInfo {
    uint32_t callIndex;
    bool hasCallDetails;
    CallDetails callDetails;
    CallModifyFailCause failCause;
};

struct CallFwdTimerInfo {
    uint32_t year;
    uint32_t month;
    uint32_t day;
    uint32_t hour;
    uint32_t minute;
    uint32_t second;
    uint32_t timezone;
};

struct CallForwardInfo {
    uint32_t status;
    uint32_t reason;
    uint32_t serviceClass;
    uint32_t toa;
    string number;
    uint32_t timeSeconds;
    bool hasCallFwdTimerStart;
    CallFwdTimerInfo callFwdTimerStart;
    bool hasCallFwdTimerEnd;
    CallFwdTimerInfo callFwdTimerEnd;
};

struct SuppServiceNotification {
    NotificationType notificationType;
    uint32_t code;
    uint32_t index;
    uint32_t type;
    string number;
    uint32_t connId;
    string historyInfo;
    bool hasHoldTone;
    bool holdTone;
};


struct ExplicitCallTransferInfo {
    uint32_t callId; /* Active call id to be transferred; Mandatory parameter */
    EctType ectType; /* Explicit Call Transfer type; Mandatory parameter */
    string targetAddress; /* Transfer Target address; Mandatory for Blind and Assured transfer */
    uint32_t targetCallId; /* Transfer Target call id; Mandatory for Consultative transfer */
};

struct MessageSummary {
    MessageType type;
    uint32_t newMessageCount;
    uint32_t oldMessageCount;
    uint32_t newUrgentMessageCount;
    uint32_t oldUrgentMessageCount;
};

struct MessageDetails {
    string toAddress;
    string fromAddress;
    string subject;
    string date;
    MessagePriority priority;
    string id;
    MessageType type;
};

struct MessageWaitingIndication {
    vec<MessageSummary> messageSummary;
    string ueAddress;
    vec<MessageDetails> messageDetails;
};

struct DeflectRequestInfo {
    uint32_t connIndex; /* Connection id to be deflected*/
    string number; /* connection would be deflected to this number */
};

struct AddressInfo {
    string city;
    string state;
    string country;
    string postalCode;
    string countryCode;
};

struct ImsSubConfigInfo {
    uint32_t simultStackCount; /* Simultaneous IMS stack static
                                  support, is 1 for 7+1, 7+5 and
                                  7+7 reduced scope; is 2 for
                                  7+7 full scope */
    vec<bool> imsStackEnabled; /* index of the array corresponds to
                                  slot number and value true corresponds to IMS enabled.
                                  ex: [true, false] - Ims enabled on slot 1; disabled on slot 2 */
};

struct ParticipantStatusInfo {
    uint32_t callId; /* Call id */
    ConfParticipantOperation operation; /* Operation Add or Remove */
    uint32_t sipStatus; /* sip error code as defined in RFC3261 */
    string participantUri; /* Participant URI */
    bool hasIsEct; /* isEct present or not */
    bool isEct; /* is explicit call transfer */
};

struct BlockReasonDetails {
    RegFailureReasonType regFailureReasonType;
    uint32_t regFailureReason;
};

struct BlockStatus {
    BlockReasonType blockReason;
    bool hasBlockReasonDetails;
    BlockReasonDetails blockReasonDetails;
};

enum VoWiFiCallQualityInfo : int32_t {
    VOWIFI_CALL_QUALITY_NONE,
    VOWIFI_CALL_QUALITY_EXCELLENT,
    VOWIFI_CALL_QUALITY_FAIR,
    VOWIFI_CALL_QUALITY_BAD,
    VOWIFI_CALL_QUALITY_INVALID,
};

enum SsServiceType : int32_t {
  SS_CFU,
  SS_CF_BUSY,
  SS_CF_NO_REPLY,
  SS_CF_NOT_REACHABLE,
  SS_CF_ALL,
  SS_CF_ALL_CONDITIONAL,
  SS_CFUT,
  SS_CLIP,
  SS_CLIR,
  SS_COLP,
  SS_COLR,
  SS_CNAP,
  SS_WAIT,
  SS_BAOC,
  SS_BAOIC,
  SS_BAOIC_EXC_HOME,
  SS_BAIC,
  SS_BAIC_ROAMING,
  SS_ALL_BARRING,
  SS_OUTGOING_BARRING,
  SS_INCOMING_BARRING,
  SS_INCOMING_BARRING_DN,
  SS_INCOMING_BARRING_ANONYMOUS,
  SS_INVALID,
};

enum SsRequestType : int32_t {
  SS_ACTIVATION,
  SS_DEACTIVATION,
  SS_INTERROGATION,
  SS_REGISTRATION,
  SS_ERASURE,
  SS_INVALID,
};

enum SsTeleserviceType : int32_t {
  SS_ALL_TELE_AND_BEARER_SERVICES,
  SS_ALL_TELESEVICES,
  SS_TELEPHONY,
  SS_ALL_DATA_TELESERVICES,
  SS_SMS_SERVICES,
  SS_ALL_TELESERVICES_EXCEPT_SMS,
  SS_INVALID,
};

struct CfData {
    vec<CallForwardInfo> cfInfo;
};

struct SsInfoData {
   vec<uint32_t> ssInfo;
};

struct StkCcUnsolSsResult {
    SsServiceType serviceType;
    SsRequestType requestType;
    SsTeleserviceType teleserviceType;
    uint32_t serviceClass;
    uint32_t result;
    // Only one of the below three vectors may contain values and others must be empty
    vec<SsInfoData> ssInfoData;     // Valid for all supplementary services.
                                    // This field will be empty for SsRequestType.SS_INTERROGATION
                                    // and Service Type SsServiceType.SS_CF_*,
                                    // SsServiceType.SS_INCOMING_BARRING_DN,
                                    // SsServiceType.SS_INCOMING_BARRING_ANONYMOUS.
    vec<CfData> cfData;             // Valid only for supplementary services
                                    // SsServiceType.SS_CF_* and SsRequestType.SS_INTERROGATION
    vec<CbNumInfo> cbNumInfo;       // Valid only for SsServiceType.SS_INCOMING_BARRING_DN and
                                    // SsServiceType.SS_INCOMING_BARRING_ANONYMOUS
};
