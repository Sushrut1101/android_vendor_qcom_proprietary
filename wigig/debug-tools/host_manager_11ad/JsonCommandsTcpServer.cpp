/*
* Copyright (c) 2018-2019 Qualcomm Technologies, Inc.
* All Rights Reserved.
* Confidential and Proprietary - Qualcomm Technologies, Inc.
*/

#include <thread>
#include "JsonCommandsTcpServer.h"
#include "Host.h"
#include "JsonCommandsHandler.h"
#include "EventsDefinitions.h"
#include "TcpNetworkInterface.h"

using namespace std;

// *************************************************************************************************

JsonCommandsTcpServer::JsonCommandsTcpServer(unsigned int jsonCommandsTcpPort, Host& host) :
    m_port(jsonCommandsTcpPort),
    m_pSocket(new TcpNetworkInterfaces::NetworkInterface("JSON Cmd")),
    m_host(host),
    m_running(true)
{
}

// *************************************************************************************************

void JsonCommandsTcpServer::Start()
{
    LOG_VERBOSE << "Starting json commands TCP server on port " << m_port << endl;
    m_pSocket->Bind(m_port);
    m_pSocket->Listen();

    //Loop that waits for clients to connect to the json commands TCP server unless stopped (by request of the user or a problem)
    while (m_running)
    {
        try
        {
            thread serverThread(&JsonCommandsTcpServer::ServerThread, this, m_pSocket->Accept()); //open a new thread for each client
            serverThread.detach();
        }
        catch (const exception &e)
        {
            LOG_ERROR << "Couldn't make a new connection or starting a new thread in Json Commands TCP server for a new client " << e.what() << endl;
        }
    }
}

void JsonCommandsTcpServer::Stop()
{
    LOG_INFO << "Stopping the json commands TCP server" << endl;
    m_running = false;
}



// *************************************************************************************************
//A thread function to handle each client that connects to the server
void JsonCommandsTcpServer::ServerThread(unique_ptr<TcpNetworkInterfaces::NetworkInterface> client)
{
    unique_ptr<JsonCommandsHandler> pJsonCommandsHandler(new JsonCommandsHandler(stTcp));
    ConnectionStatus keepConnectionAliveFromCommand = KEEP_CONNECTION_ALIVE; //A flag for the content of the command - says if the client wants to close connection
    ConnectionStatus keepConnectionAliveFromReply = KEEP_CONNECTION_ALIVE; //A flag for the reply status, for problems in sending reply etc..
                                                                           // notify that new client is connected to the host (send list of connected users before adding the new one, and a notification of the new one)
    m_host.PushEvent(ClientConnectedEvent(m_host.GetHostInfo().GetConnectedUsers(), client->GetPeerName()));
    m_host.GetHostInfo().AddNewConnectedUser(client->GetPeerName()); // add the user's to the host's connected users

    try
    {
        do
        {
            string singleMessage;
            if (!client->Receive(singleMessage) || singleMessage.empty())
            {   //message back from the client is "", means the connection is closed
                break;
            }

            LOG_VERBOSE << "Message from Client to Json commands TCP server: " << singleMessage << endl;

            //Try to execute the command from the client, get back from function if to keep the connection with the client alive or not
            string referencedResponse;
            keepConnectionAliveFromCommand = pJsonCommandsHandler->ExecuteCommand(singleMessage, referencedResponse);

            //Reply back to the client an answer for his command. If it wasn't successful - close the connection
            keepConnectionAliveFromReply = Reply(client.get(), referencedResponse);
        } while (keepConnectionAliveFromCommand != CLOSE_CONNECTION && keepConnectionAliveFromReply != CLOSE_CONNECTION);
    }
    catch (const exception &e)
    {
        LOG_ERROR << "There was a problem with the server thread of json commands TCP server, error: " << e.what() << endl;
    }

    LOG_INFO << "Closed connection with the client: " << client->GetPeerName() << endl;
    m_host.GetHostInfo().RemoveConnectedUser(client->GetPeerName());
    //notify that new client is disconnected from the host
    m_host.PushEvent(ClientDisconnectedEvent(m_host.GetHostInfo().GetConnectedUsers(), client->GetPeerName()));
}

// *************************************************************************************************

ConnectionStatus JsonCommandsTcpServer::Reply(TcpNetworkInterfaces::NetworkInterface *client, string &responseMessage)
{
    LOG_VERBOSE << "Replying from a buffer (" << responseMessage.size() << "B) Content: " << responseMessage << endl;

    if (responseMessage.empty())
    {
        LOG_ERROR << "No reply generated by a json command handler - connection will be closed" << endl;
        return CLOSE_CONNECTION;
    }

    if (!client->SendString(responseMessage))
    {
        LOG_ERROR << "Couldn't send the message to the client, closing connection" << endl;
        return CLOSE_CONNECTION;
    }

    return KEEP_CONNECTION_ALIVE;
}


// *************************************************************************************************
