// =======================================================================
// Copyright (c) 2015-2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// =======================================================================

#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"

/** @cond */

class IIIO {
   public:
    static const int32_t ERROR_OFFSET_OUT_OF_BOUNDS = INT32_C(10);
    static const int32_t ERROR_SOURCE_BUFFER_TOO_LARGE = INT32_C(11);
    static const int32_t ERROR_INVALID_BUFFER_AND_OFFSET = INT32_C(12);

    virtual ~IIIO() {}

    virtual int32_t getLength(uint64_t* len_ptr) = 0;
    virtual int32_t readAtOffset(uint64_t offset_val, void* data_ptr, size_t data_len, size_t* data_lenout) = 0;
    virtual int32_t writeAtOffset(uint64_t offset_val, const void* data_ptr, size_t data_len) = 0;

   protected:
    static const ObjectOp OP_getLength = 0;
    static const ObjectOp OP_readAtOffset = 1;
    static const ObjectOp OP_writeAtOffset = 2;
};

class IIO : public IIIO, public ProxyBase {
   public:
    IIO() {}
    IIO(Object impl) : ProxyBase(impl) {}
    virtual ~IIO() {}

    virtual int32_t getLength(uint64_t* len_ptr) {
        ObjectArg a[1];
        a[0].b = (ObjectBuf) {len_ptr, sizeof(uint64_t)};

        return invoke(OP_getLength, a, ObjectCounts_pack(0, 1, 0, 0));
    }

    virtual int32_t readAtOffset(uint64_t offset_val, void* data_ptr, size_t data_len, size_t* data_lenout) {
        ObjectArg a[2];
        a[0].b = (ObjectBuf) {&offset_val, sizeof(uint64_t)};
        a[1].b = (ObjectBuf) {data_ptr, data_len * 1};

        int32_t result = invoke(OP_readAtOffset, a, ObjectCounts_pack(1, 1, 0, 0));
        if (Object_OK != result) { return result; }

        *data_lenout = a[1].b.size / 1;

        return result;
    }

    virtual int32_t writeAtOffset(uint64_t offset_val, const void* data_ptr, size_t data_len) {
        ObjectArg a[2];
        a[0].b = (ObjectBuf) {&offset_val, sizeof(uint64_t)};
        a[1].bi = (ObjectBufIn) {data_ptr, data_len * 1};

        return invoke(OP_writeAtOffset, a, ObjectCounts_pack(2, 0, 0, 0));
    }

};

