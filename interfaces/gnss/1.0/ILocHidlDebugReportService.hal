/*
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.gnss@1.0;

interface ILocHidlDebugReportService {

    /* Types used in status elements */
    struct LocHidlTime {
        uint64_t tv_sec;
        uint64_t tv_nsec;
    };

    @export(name="", value_prefix="LOC_HIDL_GNSS_EPH_TYPE_")
    enum GnssEphemerisType : uint32_t {
        UNKNOWN = 0,
        EPHEMERIS,
        ALMANAC
    };

    @export(name="", value_prefix="LOC_HIDL_GNSS_EPH_SOURCE_")
    enum GnssEphemerisSource : uint32_t {
        UNKNOWN = 0,
        DEMODULATED,
        SUPL_PROVIDED,
        OTHER_SERVER_PROVIDED,
        LOCAL_SRC
    };

    struct LocHidlSystemStatusNav {
        GnssEphemerisType    mType;
        GnssEphemerisSource  mSource;
        int32_t              mAgeSec;
    };

    struct LocHidlApTimeStamp {
        LocHidlTime apTimeStamp;
        float       apTimeStampUncertaintyMs;
    };

    struct LocHidlGnssSvUsedInPosition {
        uint64_t gps_sv_used_ids_mask;
        uint64_t glo_sv_used_ids_mask;
        uint64_t gal_sv_used_ids_mask;
        uint64_t bds_sv_used_ids_mask;
        uint64_t qzss_sv_used_ids_mask;
    };

    struct LocHidlUlpLocation {
        LocHidlLocation gpsLocation;
        uint16_t        position_source;
        uint32_t        tech_mask;
        vec<uint8_t>    raw_data;
        bool            is_indoor;
        float           floor_number;
        string          map_url;
        string          map_index;
    };

    struct LocHidlLocationExtended {
        uint16_t                 flags;
        float                    altitudeMeanSeaLevel;
        float                    pdop;
        float                    hdop;
        float                    vdop;
        float                    magneticDeviation;
        float                    vert_unc;
        float                    speed_unc;
        float                    bearing_unc;
        uint32_t                 horizontal_reliability;
        uint32_t                 vertical_reliability;
        float                    horUncEllipseSemiMajor;
        float                    horUncEllipseSemiMinor;
        float                    horUncEllipseOrientAzimuth;
        LocHidlApTimeStamp           apTimeStamp;
        LocHidlGnssSvUsedInPosition  svUsedIds;
        uint32_t                     navSolutionMask;
        uint32_t                     tech_mask;
    };

    /* Various Status Reports */
    struct LocHidlSystemStatusLocation {
        LocHidlTime              mUtcTime;
        LocHidlTime              mUtcReported;
        LocHidlUlpLocation       mLocation;
        LocHidlLocationExtended  mLocationEx;
    };

    struct LocHidlSystemStatusTimeAndClock {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint16_t mGpsWeek;
        uint32_t mGpsTowMs;
        uint8_t  mTimeValid;
        uint8_t  mTimeSource;
        int32_t  mTimeUnc;
        int32_t  mClockFreqBias;
        int32_t  mClockFreqBiasUnc;
        int32_t  mLeapSeconds;
        int32_t  mLeapSecUnc;
    };

    struct LocHidlSystemStatusXoState {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint8_t  mXoState;
    };

    struct LocHidlSystemStatusRfAndParams {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        int32_t  mPgaGain;
        uint32_t mGpsBpAmpI;
        uint32_t mGpsBpAmpQ;
        uint32_t mAdcI;
        uint32_t mAdcQ;
        uint32_t mJammerGps;
        uint32_t mJammerGlo;
        uint32_t mJammerBds;
        uint32_t mJammerGal;
        double   mAgcGps;
        double   mAgcGlo;
        double   mAgcBds;
        double   mAgcGal;
    };

    struct LocHidlSystemStatusErrRecovery {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint32_t mRecErrorRecovery;
    };

    struct LocHidlSystemStatusInjectedPosition {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint8_t  mEpiValidity;
        float    mEpiLat;
        float    mEpiLon;
        float    mEpiAlt;
        float    mEpiHepe;
        float    mEpiAltUnc;
        uint8_t  mEpiSrc;
    };

    struct LocHidlSystemStatusBestPosition {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        float    mBestLat;
        float    mBestLon;
        float    mBestAlt;
        float    mBestHepe;
        float    mBestAltUnc;
    };

    struct LocHidlSystemStatusXtra {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint8_t   mXtraValidMask;
        uint32_t  mGpsXtraAge;
        uint32_t  mGloXtraAge;
        uint32_t  mBdsXtraAge;
        uint32_t  mGalXtraAge;
        uint32_t  mQzssXtraAge;
        uint32_t  mGpsXtraValid;
        uint32_t  mGloXtraValid;
        uint64_t  mBdsXtraValid;
        uint64_t  mGalXtraValid;
        uint8_t   mQzssXtraValid;
    };

    struct LocHidlSystemStatusEphemeris {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint32_t  mGpsEpheValid;
        uint32_t  mGloEpheValid;
        uint64_t  mBdsEpheValid;
        uint64_t  mGalEpheValid;
        uint8_t   mQzssEpheValid;
    };

    struct LocHidlSystemStatusSvHealth {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint32_t  mGpsUnknownMask;
        uint32_t  mGloUnknownMask;
        uint64_t  mBdsUnknownMask;
        uint64_t  mGalUnknownMask;
        uint8_t   mQzssUnknownMask;
        uint32_t  mGpsGoodMask;
        uint32_t  mGloGoodMask;
        uint64_t  mBdsGoodMask;
        uint64_t  mGalGoodMask;
        uint8_t   mQzssGoodMask;
        uint32_t  mGpsBadMask;
        uint32_t  mGloBadMask;
        uint64_t  mBdsBadMask;
        uint64_t  mGalBadMask;
        uint8_t   mQzssBadMask;
    };

    struct LocHidlSystemStatusPdr {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint32_t  mFixInfoMask;
    };

    struct LocHidlSystemStatusNavData {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        vec<LocHidlSystemStatusNav> mNav;
    };

    struct LocHidlSystemStatusPositionFailure {
        LocHidlTime mUtcTime;
        LocHidlTime mUtcReported;
        uint32_t  mFixInfoMask;
        uint32_t  mHepeLimit;
    };

    struct LocHidlSystemStatusReports {
        bool mSuccess;
        vec<LocHidlSystemStatusLocation>         mLocationVec;
        vec<LocHidlSystemStatusTimeAndClock>     mTimeAndClockVec;
        vec<LocHidlSystemStatusXoState>          mXoStateVec;
        vec<LocHidlSystemStatusRfAndParams>      mRfAndParamsVec;
        vec<LocHidlSystemStatusErrRecovery>      mErrRecoveryVec;
        vec<LocHidlSystemStatusInjectedPosition> mInjectedPositionVec;
        vec<LocHidlSystemStatusBestPosition>     mBestPositionVec;
        vec<LocHidlSystemStatusXtra>             mXtraVec;
        vec<LocHidlSystemStatusEphemeris>        mEphemerisVec;
        vec<LocHidlSystemStatusSvHealth>         mSvHealthVec;
        vec<LocHidlSystemStatusPdr>              mPdrVec;
        vec<LocHidlSystemStatusNavData>          mNavDataVec;
        vec<LocHidlSystemStatusPositionFailure>  mPositionFailureVec;
    };

    /* Interface */
    init() generates (bool success);
    deinit() generates (bool success);
    getReport(int32_t maxReports) generates (LocHidlSystemStatusReports reports);
};
