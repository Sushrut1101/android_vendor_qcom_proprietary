/*
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 */

package vendor.qti.hardware.radio.ims@1.0;

import IImsRadioResponse;
import IImsRadioIndication;

interface IImsRadio {
    /**
     * Set callback that has response functions for the requests send from ImsService
     *
     * @param imsRadioResponse Object containing the call backs for requests like DIAL, etc.
     * @param imsRadioIndication Object containing the call backs for UNSOLs
     */
    setCallback(IImsRadioResponse imsRadioResponse, IImsRadioIndication imsRadioIndication);

    /**
     * ImsQmiIF.REQUEST_DIAL
     *
     * @param token to match request/response. Responses must include the same token as requests.
     * @param DailRequest - the struct containing the dial request params like address, clir
     * call details, etc.
     *
     */
    oneway dial(int32_t token, DialRequest dialRequest);

    /**
     * ImsQmiIF.REQUEST_ADD_PARTICIPANT
     *
     * @param token to match request/response. Responses must include the same token as requests.
     * @param DailRequest - the struct containing the dial request params like address, clir
     * call details, etc.
     *
     */
    oneway addParticipant(int32_t token, DialRequest dialRequest);

    /**
     * ImsQmiIF.REQUEST_IMS_REGISTRATION_STATE
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway getImsRegistrationState(int32_t token);

    /**
     * ImsQmiIF.REQUEST_ANSWER
     *
     * @param token Id to match request/response. Response must include same token.
     * @param callType
     * @param IpPresentation
     * @param mode Rtt Mode
     *
     */
    oneway answer(int32_t token, CallType callType, IpPresentation presentation, RttMode mode);

    /**
     * ImsQmiIF.REQUEST_HANGUP
     *
     * @param token Id to match request/response. Response must include same token.
     * @param hangup Payload for the hangup request. It consists of connection index,
     *               is_multiparty, connetion URI, conference Id, fail cause.
     *
     */
    oneway hangup(int32_t token, HangupRequestInfo hangup);

    /**
     * ImsQmiIF.REQUEST_IMS_REG_STATE_CHANGE
     *
     * @param token Id to match request/response. Response must include same token.
     * @param state New registration state requested.
     *
     */
    oneway requestRegistrationChange(int32_t token, RegState state);

    /**
     * ImsQmiIF.REQUEST_IMS_QUERY_SERVICE_STATUS
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway queryServiceStatus(int32_t token);

    /**
     * ImsQmiIF.REQUEST_IMS_SET_SERVICE_STATUS
     *
     * @param token Id to match request/response. Response must include same token.
     * @param srvStatusInfo New service state requested.
     *
     */
    oneway setServiceStatus(int32_t token, ServiceStatusInfo srvStatusInfo);

    /**
     * ImsQmiIF.REQUEST_HOLD
     *
     * @param token Id to match request/response. Response must include same token.
     * @param callId Id of the call to be held.
     *
     */
    oneway hold(int32_t token, uint32_t callId);

    /**
     * ImsQmiIF.REQUEST_RESUME
     *
     * @param token Id to match request/response. Response must include same token.
     * @param callId Id of the call to be resumed.
     *
     */
    oneway resume(int32_t token, uint32_t callId);

    /**
     * ImsQmiIF.REQUEST_SET_IMS_CONFIG
     *
     * @param token Id to match request/response. Response must include same token.
     * @param config Config to be set. Contains item and value.
     *
     */
    oneway setConfig(int32_t token, ConfigInfo config);

    /**
     * ImsQmiIF.REQUEST_GET_IMS_CONFIG
     *
     * @param token Id to match request/response. Response must include same token.
     * @param config Config requested. Contains item and value.
     *
     */
    oneway getConfig(int32_t token, ConfigInfo config);

    /**
     * ImsQmiIF.REQUEST_CONFERENCE
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway conference(int32_t token);

   /**
     * ImsQmiIF.REQUEST_QUERY_CLIP
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway getClip(int32_t token);

    /**
     * ImsQmiIF.REQUEST_QUERY_CLIR
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway getClir(int32_t token);

    /**
     * ImsQmiIF.REQUEST_SET_CLIR
     *
     * @param token Id to match request/response. Response must include same token.
     * @param clirInfo CLIR info to set
     *
     */
    oneway setClir(int32_t token, ClirInfo clirInfo);

    /**
     * ImsQmiIF.REQUEST_GET_COLR
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway getColr(int32_t token);

    /**
     * ImsQmiIF.REQUEST_SET_COLR
     *
     * @param token Id to match request/response. Response must include same token.
     * @param colrInfo COLR Info - IP presentation and error details to be set
     *
     */
    oneway setColr(int32_t token, ColrInfo colrInfo);

    /**
     * ImsQmiIF.REQUEST_EXIT_EMERGENCY_CALLBACK_MODE
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway exitEmergencyCallbackMode(int32_t token);

    /**
     * ImsQmiIF.REQUEST_DTMF
     *
     * @param token Id to match request/response. Response must include same token.
     * @param dtmfInfo DTMF tones to send
     *
     */
    oneway sendDtmf(int32_t token, DtmfInfo dtmfInfo);

    /**
     * ImsQmiIF.REQUEST_DTMF_START
     *
     * @param token Id to match request/response. Response must include same token.
     * @param dtmfInfo DTMF tones to send
     *
     */
    oneway startDtmf(int32_t token, DtmfInfo dtmfInfo);

    /**
     * ImsQmiIF.REQUEST_DTMF_STOP
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway stopDtmf(int32_t token);

    /**
     * ImsQmiIF.REQUEST_SEND_UI_TTY_MODE
     *
     * @param token Id to match request/response. Response must include same token.
     * @param ttyInfo TTY info to set having TTY mode and additional info as bytes
     *
     */
    oneway setUiTtyMode(int32_t token, TtyInfo ttyInfo);

    /**
     * ImsQmiIF.REQUEST_MODIFY_CALL_INITIATE
     *
     * @param token Id to match request/response. Response must include same token.
     * @param CallModifyInfo new call modify type requested
     */
    oneway modifyCallInitiate(int32_t token, CallModifyInfo callModifyInfo);

    /**
     * ImsQmiIF.REQUEST_MODIFY_CALL_CONFIRM
     *
     * @param token Id to match request/response. Response must include same token.
     * @param CallModifyInfo new call modify type confirmed
     */
    oneway modifyCallConfirm(int32_t token, CallModifyInfo callModifyInfo);

    /**
     * ImsQmiIF.REQUEST_QUERY_CALL_FORWARD_STATUS
     *
     * @param token Id to match request/response. Response must include same token.
     * @param callForwardInfo Call forward query details.
     *
     */
    oneway queryCallForwardStatus(int32_t token, CallForwardInfo callForwardInfo);

    /**
     * ImsQmiIF.REQUEST_SET_CALL_FORWARD_STATUS
     *
     * @param token Id to match request/response. Response must include same token.
     * @param callForwardInfo Set call forward request details.
     *
     */
    oneway setCallForwardStatus(int32_t token, CallForwardInfo callForwardInfo);

    /**
     * ImsQmiIF.REQUEST_QUERY_CALL_WAITING
     *
     * @param token Id to match request/response. Response must include same token.
     * @param serviceClass serviceClass on which the call waiting is set.
     *
     */
    oneway getCallWaiting(int32_t token, uint32_t serviceClass);

    /**
     * ImsQmiIF.REQUEST_SET_CALL_WAITING
     *
     * @param token Id to match request/response. Response must include same token.
     * @param serviceClass serviceClass on which the call waiting is set.
     *
     */
    oneway setCallWaiting(int32_t token, ServiceClassStatus serviceStatus, uint32_t serviceClass);

    /**
     * ImsQmiIF.REQUEST_SET_SUPP_SVC_NOTIFICATION
     *
     * @param token Id to match request/response. Response must include same token.
     * @param status Service class status.
     *
     */
    oneway setSuppServiceNotification(int32_t token, ServiceClassStatus status);

    /**
     * ImsQmiIF.REQUEST_EXPLICIT_CALL_TRANSFER
     *
     * @param token Id to match request/response. Response must include same token.
     * @param ectInfo Payload for the call transfer request.
     *
     */
    oneway explicitCallTransfer(int32_t token, ExplicitCallTransferInfo ectInfo);

    /**
     * ImsQmiIF.REQUEST_SUPP_SVC_STATUS
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway suppServiceStatus(int32_t token, int32_t operationType, FacilityType facilityType,
            CbNumListInfo cbNumListInfo);

   /**
     * ImsQmiIF.REQUEST_GET_RTP_STATISTICS
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway getRtpStatistics(int32_t token);

    /**
     * ImsQmiIF.REQUEST_GET_RTP_ERROR_STATISTICS
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway getRtpErrorStatistics(int32_t token);

    /**
     * ImsQmiIF.REQUEST_DEFLECT_CALL
     *
     * @param token Id to match request/response. Response must include same token.
     * @param deflectRequestInfo Payload for the call deflect request.
     *
     */
    oneway deflectCall(int32_t token, DeflectRequestInfo deflectRequestInfo);

    /**
     * ImsQmiIF.REQUEST_SEND_GEOLOCATION_INFO
     *
     * @param token to match request/response. Responses must include the same token as requests.
     * @param lat - Latitude location coordinate
     * @param lon - Longitude location coordinate
     * @param addesssInfo - the struct containing the reverse-geocoded address information.
     *
     */
    oneway sendGeolocationInfo(int32_t token, double lat, double lon, AddressInfo addressInfo);

    /**
     * ImsQmiIF.REQUEST_GET_IMS_SUB_CONFIG
     *
     * @param token Id to match request/response. Response must include same token.
     *
     */
    oneway getImsSubConfig(int32_t token);

    /**
     * ImsQmiIF.REQUEST_SEND_RTT_MSG
     *
     * @param token Id to match request/response. Response must include same token.
     * @param  message Rtt text message
     *
     */
    oneway sendRttMessage(int32_t token, string message);

    /**
     * ImsQmiIF.REQUEST_CANCEL_MODIFY_CALL
     *
     * @param token Id to match request/response. Response must include same token.
     * @param callId Id of the call to be cancelled modify.
     *
     */
    oneway cancelModifyCall(int32_t token, uint32_t callId);
};
