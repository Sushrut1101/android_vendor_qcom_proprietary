/* module_gamma40.h
 *
 * Copyright (c) 2012-2014, 2016 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

#ifndef __MODULE_GAMMA40_H__
#define __MODULE_GAMMA40_H__

/* std headers */
#include "pthread.h"

/* hal headers */
#include "cam_types.h"

/* isp headers */
#include "isp_common.h"
#include "isp_defs.h"
#include "gamma40_reg.h"
#include "chromatix.h"
#include "isp_adrc_tune_def.h"

/* Macros defines */
#define GAMMA40_HW_PACK_BIT             8  /*delta << 8 | base_value*/
#define GAMMA40_NUM_ENTRIES             64
#define GAMMA40_CHROMATIX_LUT_SIZE      512
#define MAX_GAMMA_TABLE_SIZE            512
#define DEFAULT_CONTRAST                5
#define ISP_GAMMA_NUM_ENTRIES           64
#define ISP_GAMMA_NUM_CHANNEL           3

/* Enum defines */
typedef enum {
  GAMMA_TABLE_DEFAULT = 0,
  GAMMA_TABLE_OUTDOOR,
  GAMMA_TABLE_LOWLIGHT,
  GAMMA_TABLE_BACKLIGHT,
  GAMMA_TABLE_SOLARIZE,
  GAMMA_TABLE_POSTERIZE,
  GAMMA_TABLE_WHITE_BOARD,
  GAMMA_TABLE_BLACK_BOARD,
  GAMMA_TABLE_USER1,
  GAMMA_TABLE_INVALID
} gamma_table_type;

typedef enum {
  ISP_GAMMA_LINEAR_MAPPING_OF_10_BIT_GAMMA_TABLE,
  ISP_GAMMA_PIECEWISE_LINEAR_MAPPING_OF_10_BIT_GAMMA_TABLE,
  ISP_LAST_GAMMA_MAPPING_MODE_ENUM =
    ISP_GAMMA_PIECEWISE_LINEAR_MAPPING_OF_10_BIT_GAMMA_TABLE
} ISP_GammaMappingModeType;

/* Struct defines */
/** gamma_table_t
 *
 *  @hw_table_r: hw update table for R
 *  @hw_table_r: hw update table for G
 *  @hw_table_r: hw update table for B
 **/

typedef struct VFE_GammaTable {
  int16_t       hw_table_r[ISP_GAMMA_NUM_ENTRIES];
  int16_t       hw_table_g[ISP_GAMMA_NUM_ENTRIES];
  int16_t       hw_table_b[ISP_GAMMA_NUM_ENTRIES];
} gamma_table_t;

/** ISP_GammaConfigCmdType
 *
 *  @LutSel: LUT select
 *  @Gamatbl: gamma table
 **/

typedef struct ISP_GammaConfigCmdType {
  ISP_GammaLutSelect    LutSel;
  gamma_table_t         Gamatbl;
} ISP_GammaConfigCmdType;

/** gamma_rgb_t
 *
 *  @gamma_r: R value for gamma
 *  @gamma_g: G value for gamma
 *  @gamma_b: B value for gamma
 **/

typedef struct {
  uint16_t       gamma_r[GAMMA_TABLE_SIZE];
  uint16_t       gamma_g[GAMMA_TABLE_SIZE];
  uint16_t       gamma_b[GAMMA_TABLE_SIZE];
} gamma_rgb_t;

typedef struct {
  uint8_t     gamma_r[ISP_GAMMA_NUM_ENTRIES];
  uint8_t     gamma_g[ISP_GAMMA_NUM_ENTRIES];
  uint8_t     gamma_b[ISP_GAMMA_NUM_ENTRIES];
} gamma_rgb_ds_t;


/** gamma_rgb_ptr_t
 *
 *  @p_gamma_r: pointer to gamma R table
 *  @p_gamma_g: pointer to gamma G table
 *  @p_gamma_b: pointer to gamma B table
 **/

typedef struct {
  uint8_t*      p_gamma_r;
  uint8_t*      p_gamma_g;
  uint8_t*      p_gamma_b;
} gamma_rgb_ptr_t;

typedef boolean (*ext_interpolate)(void *,
  void *, void *);
typedef boolean (*get_trigger_ratio)(void *,
  void *, void *);
typedef boolean (*ext_set_table)(void *,
  void *, void *);
typedef boolean (*ext_set_spl_effect)(void *,
  void *, void *);

typedef struct {
  ext_interpolate ext_interpolate;
  get_trigger_ratio get_trigger_ratio;
  ext_set_table ext_set_table;
  ext_set_spl_effect ext_set_spl_effect;
} ext_override_func;

/** gamma40_t
 *
 *  @isp_out_info: isp output info
 *  @l_stream_info: stram info list
 *  @sensor_out_info: sensor output info
 *  @ISP_GammaCfgCmd: ISP_GammaCfgCmd
 *  @applied_table: applied table value store to pass to eztune diag info
 *  @gamma_table_rgb: gamma table rgb
 *  @default_gamma_tbl: default gamma tbl
 *  @lowlight_gamma_tbl: lowlight gamma tbl
 *  @outdoor_gamma_tbl: outdoor gamma tbl
 *  @solarize_gamma_table: solarize gamma table
 *  @gamma_table_type: gamma table type
 *  @gamma_ratio: gamma ratio
 *  @gamma_lut_size: gamma lut size
 *  @contrast: contrast
 *  @backlight_severity: backlight severity
 *  @vfe_reconfig: vfe reconfig
 *  @enable_backlight_compensation: enable backlight compensation
 *  @reload_params: reload params
 **/
typedef struct {
  isp_out_info_t                 isp_out_info;
  mct_list_t                    *l_stream_info;
  sensor_out_info_t              sensor_out_info;
  aec_update_t                   aec_update;
  asd_update_t                   asd_update;
  int32_t                        backlight_comp_update;

  ISP_GammaConfigCmdType         ISP_GammaCfgCmd;
  gamma_table_t                  applied_table;
  gamma_rgb_ds_t                 gamma_table_rgb;
  gamma_rgb_ds_t                 default_gamma_tbl;
  gamma_rgb_ds_t                 lowlight_gamma_tbl;
  gamma_rgb_ds_t                 outdoor_gamma_tbl;
  gamma_rgb_ds_t                    solarize_gamma_table;
  gamma_table_type               gamma_table_type;
  trigger_ratio_t                gamma_ratio;
  uint32_t                       gamma_startidx;
  uint32_t                       gamma_endidx;
  isp_effects_params_t           effects;
  cam_scene_mode_type            bestshot_mode;

  uint32_t                       gamma_lut_size;
  uint32_t                       backlight_severity;
  uint32_t                       vfe_reconfig;
  int32_t                        enable_backlight_compensation;
  boolean                        effect_applied;
  int32_t                        reload_params;
  ext_override_func             *ext_func_table;
  isp_adrc_knee_gain_lut         adrc_gain_lut_table;
} gamma40_t;

#if OVERRIDE_FUNC
boolean gamma40_fill_func_table_ext(gamma40_t *);
#define FILL_FUNC_TABLE(field) gamma40_fill_func_table_ext(field)
#else
boolean gamma40_fill_func_table(gamma40_t *gamma);
#define FILL_FUNC_TABLE(field) gamma40_fill_func_table(field)
#endif

static const uint8_t ipl_gammaSigmoid0_5[256] = {
    0,  11,  16,20,  23,  25,  28,  30,  32,  34,
   36,  37,  39,41,  42,  44,  45,  47,  48,  49,
   50,  52,  53,54,  55,  56,  58,  59,  60,  61,
   62,  63,  64,65,  66,  67,  68,  69,  70,  71,
   71,  72,  73,74,  75,  76,  77,  77,  78,  79,
   80,  81,  81,82,  83,  84,  84,  85,  86,  87,
   87,  88,  89,90,  90,  91,  92,  92,  93,  94,
   94,  95,  96,96,  97,  98,  98,  99, 100, 100,
  101, 102, 102, 103, 103, 104, 105, 105, 106, 107,
  107, 108, 108, 109, 109, 110, 111, 111, 112, 112,
  113, 113, 114, 115, 115, 116, 116, 117, 117, 118,
  118, 119, 119, 120, 121, 121, 122, 122, 123, 123,
  124, 124, 125, 125, 126, 126, 127, 127, 128, 128,
  129, 129, 130, 130, 131, 131, 132, 132, 133, 133,
  134, 134, 135, 136, 136, 137, 137, 138, 138, 139,
  139, 140, 140, 141, 142, 142, 143, 143, 144, 144,
  145, 146, 146, 147, 147, 148, 148, 149, 150, 150,
  151, 152, 152, 153, 153, 154, 155, 155, 156, 157,
  157, 158, 159, 159, 160, 161, 161, 162, 163, 163,
  164, 165, 165, 166, 167, 168, 168, 169, 170, 171,
  171, 172, 173, 174, 174, 175, 176, 177, 178, 178,
  179, 180, 181, 182, 183, 184, 184, 185, 186, 187,
  188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
  199, 200, 201, 202, 203, 205, 206, 207, 208, 210,
  211, 213, 214, 216, 218, 219, 221, 223, 225, 227,
  230, 232, 235, 239, 244, 255
};
static const uint8_t ipl_gammaSigmoid0_6[256] = {
  0,   7,  11,  13,  16,  18,  20,  22,  24,  26,
  28,  29,  31,  32,  34,  35,  37,  38,  39,  41,
  42,  43,  44,  46,  47,  48,  49,  50,  51,  52,
  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
  64,  65,  65,  66,  67,  68,  69,  70,  71,  72,
  73,  74,  74,  75,  76,  77,  78,  79,  79,  80,
  81,  82,  83,  84,  84,  85,  86,  87,  87,  88,
  89,  90,  90,  91,  92,  93,  93,  94,  95,  96,
  96,  97,  98,  99,  99, 100, 101, 101, 102, 103,
  103, 104, 105, 106, 106, 107, 108, 108, 109, 110,
  110, 111, 112, 112, 113, 113, 114, 115, 115, 116,
  117, 117, 118, 119, 119, 120, 120, 121, 122, 122,
  123, 124, 124, 125, 125, 126, 127, 127, 128, 128,
  129, 130, 130, 131, 131, 132, 133, 133, 134, 135,
  135, 136, 136, 137, 138, 138, 139, 140, 140, 141,
  142, 142, 143, 143, 144, 145, 145, 146, 147, 147,
  148, 149, 149, 150, 151, 152, 152, 153, 154, 154,
  155, 156, 156, 157, 158, 159, 159, 160, 161, 162,
  162, 163, 164, 165, 165, 166, 167, 168, 168, 169,
  170, 171, 171, 172, 173, 174, 175, 176, 176, 177,
  178, 179, 180, 181, 181, 182, 183, 184, 185, 186,
  187, 188, 189, 190, 190, 191, 192, 193, 194, 195,
  196, 197, 198, 199, 200, 201, 203, 204, 205, 206,
  207, 208, 209, 211, 212, 213, 214, 216, 217, 218,
  220, 221, 223, 224, 226, 227, 229, 231, 233, 235,
  237, 239, 242, 244, 248, 255
};
static const uint8_t ipl_gammaSigmoid0_7[256] = {
  0,   4,   7,   9,  11,  13,  15,  17,  18,  20,
  21,  23,  24,  26,  27,  29,  30,  31,  32,  34,
  35,  36,  37,  38,  40,  41,  42,  43,  44,  45,
  46,  47,  48,  50,  51,  52,  53,  54,  55,  56,
 .57,  58,  59,  60,  61,  62,  62,  63,  64,  65,
  66,  67,  68,  69,  70,  71,  72,  73,  73,  74,
  75,  76,  77,  78,  79,  80,  80,  81,  82,  83,
  84,  85,  85,  86,  87,  88,  89,  90,  90,  91,
  92,  93,  94,  94,  95,  96,  97,  98,  98,  99,
  100, 101, 101, 102, 103, 104, 105, 105, 106, 107,
  108, 108, 109, 110, 111, 111, 112, 113, 114, 114,
  115, 116, 116, 117, 118, 119, 119, 120, 121, 121,
  122, 123, 124, 124, 125, 126, 126, 127, 128, 129,
  129, 130, 131, 131, 132, 133, 134, 134, 135, 136,
  136, 137, 138, 139, 139, 140, 141, 141, 142, 143,
  144, 144, 145, 146, 147, 147, 148, 149, 150, 150,
  151, 152, 153, 154, 154, 155, 156, 157, 157, 158,
  159, 160, 161, 161, 162, 163, 164, 165, 165, 166,
  167, 168, 169, 170, 170, 171, 172, 173, 174, 175,
  175, 176, 177, 178, 179, 180, 181, 182, 182, 183,
  184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
  193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
  203, 204, 205, 207, 208, 209, 210, 211, 212, 213,
  214, 215, 217, 218, 219, 220, 221, 223, 224, 225,
  226, 228, 229, 231, 232, 234, 235, 237, 238, 240,
  242, 244, 246, 248, 251, 255
};
static const uint8_t ipl_gammaSigmoid0_8[256] = {
  0,   3,   5,   6,   8,  10,  11,  13,  14,  15,
  17,  18,  19,  21,  22,  23,  24,  25,  27,  28,
  29,  30,  31,  32,  34,  35,  36,  37,  38,  39,
  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
  70,  71,  72,  73,  73,  74,  75,  76,  77,  78,
  79,  80,  81,  82,  83,  83,  84,  85,  86,  87,
  88,  89,  90,  90,  91,  92,  93,  94,  95,  96,
  96,  97,  98,  99, 100, 101, 102, 102, 103, 104,
  105, 106, 107, 107, 108, 109, 110, 111, 112, 112,
  113, 114, 115, 116, 117, 117, 118, 119, 120, 121,
  121, 122, 123, 124, 125, 125, 126, 127, 128, 129,
  130, 130, 131, 132, 133, 134, 134, 135, 136, 137,
  138, 138, 139, 140, 141, 142, 143, 143, 144, 145,
  146, 147, 148, 148, 149, 150, 151, 152, 153, 153,
  154, 155, 156, 157, 158, 159, 159, 160, 161, 162,
  163, 164, 165, 165, 166, 167, 168, 169, 170, 171,
  172, 172, 173, 174, 175, 176, 177, 178, 179, 180,
  181, 182, 182, 183, 184, 185, 186, 187, 188, 189,
  190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
  200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
  210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
  220, 221, 223, 224, 225, 226, 227, 228, 230, 231,
  232, 233, 234, 236, 237, 238, 240, 241, 242, 244,
  245, 247, 249, 250, 252, 255
};
static const uint8_t ipl_gammaSigmoid0_9[256] = {
  0,   2,   3,   4,   6,   7,   8,   9,  11,  12,
  13,  14,  15,  16,  17,  19,  20,  21,  22,  23,
  24,  25,  26,  27,  28,  29,  30,  32,  33,  34,
  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,
  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,
  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
  65,  66,  67,  68,  69,  70,  70,  71,  72,  73,
  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
  84,  85,  86,  87,  88,  89,  89,  90,  91,  92,
  93,  94,  95,  96,  97,  98,  99, 100, 101, 102,
  102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 113, 114, 115, 116, 117, 118, 119, 120,
  121, 122, 123, 123, 124, 125, 126, 127, 128, 129,
  130, 131, 132, 132, 133, 134, 135, 136, 137, 138,
  139, 140, 141, 142, 142, 143, 144, 145, 146, 147,
  148, 149, 150, 151, 152, 153, 153, 154, 155, 156,
  157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
  166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
  176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
  185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
  195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
  205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
  215, 216, 217, 218, 219, 220, 221, 222, 223, 225,
  226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
  236, 238, 239, 240, 241, 242, 243, 244, 246, 247,
  248, 249, 251, 252, 253, 255
};
static const uint8_t ipl_gammaSigmoid1_0[256] = {
  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,
  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,
  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,
  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,
  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,
  100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
  110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
  120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
  130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
  140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
  160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
  170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
  180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
  190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
  200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
  210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
  220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
  230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
  240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
  250, 251, 252, 253, 254, 255
};
static const uint8_t ipl_gammaSigmoid1_2[256] = {
  0,   0,   1,   1,   2,   3,   3,   4,   5,   5,
  6,   7,   7,   8,   9,  10,  11,  11,  12,  13,
 14,  15,  15,  16,  17,  18,  19,  20,  21,  22,
 22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
 32,  33,  34,  35,  36,  37,  38,  38,  39,  40,
 41,  42,  43,  44,  45,  46,  48,  49,  50,  51,
 52,  53,  54,  55,  56,  57,  58,  59,  60,  61,
 62,  63,  64,  65,  66,  67,  69,  70,  71,  72,
 73,  74,  75,  76,  77,  78,  79,  81,  82,  83,
 84,  85,  86,  87,  88,  90,  91,  92,  93,  94,
 95,  96,  98,  99, 100, 101, 102, 103, 104, 106,
107, 108, 109, 110, 111, 113, 114, 115, 116, 117,
119, 120, 121, 122, 123, 125, 126, 127, 128, 129,
130, 132, 133, 134, 135, 136, 138, 139, 140, 141,
142, 144, 145, 146, 147, 148, 149, 151, 152, 153,
154, 155, 156, 157, 159, 160, 161, 162, 163, 164,
165, 167, 168, 169, 170, 171, 172, 173, 174, 176,
177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
209, 210, 211, 212, 213, 214, 215, 216, 217, 217,
218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
228, 229, 230, 231, 232, 233, 233, 234, 235, 236,
237, 238, 239, 240, 240, 241, 242, 243, 244, 244,
245, 246, 247, 248, 248, 249, 250, 250, 251, 252,
252, 253, 254, 254, 255, 255
};
static const uint8_t ipl_gammaSigmoid1_5[256] = {
  0,   0,   0,   0,   1,   1,   1,   2,   2,   2,
  3,   3,   4,   4,   5,   5,   6,   6,   7,   7,
  8,   9,   9,  10,  10,  11,  12,  12,  13,  14,
 15,  15,  16,  17,  18,  18,  19,  20,  21,  22,
 22,  23,  24,  25,  26,  27,  28,  29,  29,  30,
 31,  32,  33,  34,  35,  36,  37,  38,  39,  40,
 41,  42,  43,  44,  45,  46,  47,  49,  50,  51,
 52,  53,  54,  55,  56,  58,  59,  60,  61,  62,
 63,  65,  66,  67,  68,  69,  71,  72,  73,  74,
 76,  77,  78,  79,  81,  82,  83,  85,  86,  87,
 89,  90,  91,  93,  94,  95,  97,  98,  99, 101,
102, 104, 105, 106, 108, 109, 111, 112, 114, 115,
116, 118, 119, 121, 122, 124, 125, 127, 128, 130,
131, 133, 134, 136, 137, 139, 140, 141, 143, 144,
146, 147, 149, 150, 151, 153, 154, 156, 157, 158,
160, 161, 162, 164, 165, 166, 168, 169, 170, 172,
173, 174, 176, 177, 178, 179, 181, 182, 183, 184,
186, 187, 188, 189, 190, 192, 193, 194, 195, 196,
197, 199, 200, 201, 202, 203, 204, 205, 206, 208,
209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
219, 220, 221, 222, 223, 224, 225, 226, 226, 227,
228, 229, 230, 231, 232, 233, 233, 234, 235, 236,
237, 237, 238, 239, 240, 240, 241, 242, 243, 243,
244, 245, 245, 246, 246, 247, 248, 248, 249, 249,
250, 250, 251, 251, 252, 252, 253, 253, 253, 254,
254, 254, 255, 255, 255, 255
};
static const uint8_t ipl_gammaSigmoid1_8[256] = {
  0,   0,   0,   0,   0,   0,   1,   1,   1,   1,
  1,   2,   2,   2,   2,   3,   3,   3,   4,   4,
  5,   5,   5,   6,   6,   7,   7,   8,   8,   9,
  9,  10,  11,  11,  12,  12,  13,  14,  14,  15,
 16,  17,  17,  18,  19,  20,  20,  21,  22,  23,
 24,  25,  25,  26,  27,  28,  29,  30,  31,  32,
 33,  34,  35,  36,  37,  38,  39,  40,  41,  42,
 43,  44,  46,  47,  48,  49,  50,  51,  53,  54,
 55,  56,  58,  59,  60,  61,  63,  64,  65,  67,
 68,  69,  71,  72,  74,  75,  77,  78,  79,  81,
 82,  84,  85,  87,  88,  90,  91,  93,  95,  96,
 98,  99, 101, 103, 104, 106, 108, 109, 111, 113,
114, 116, 118, 120, 121, 123, 125, 127, 128, 130,
132, 134, 135, 137, 139, 141, 142, 144, 146, 147,
149, 151, 152, 154, 156, 157, 159, 160, 162, 164,
165, 167, 168, 170, 171, 173, 174, 176, 177, 178,
180, 181, 183, 184, 186, 187, 188, 190, 191, 192,
194, 195, 196, 197, 199, 200, 201, 202, 204, 205,
206, 207, 208, 209, 211, 212, 213, 214, 215, 216,
217, 218, 219, 220, 221, 222, 223, 224, 225, 226,
227, 228, 229, 230, 230, 231, 232, 233, 234, 235,
235, 236, 237, 238, 238, 239, 240, 241, 241, 242,
243, 243, 244, 244, 245, 246, 246, 247, 247, 248,
248, 249, 249, 250, 250, 250, 251, 251, 252, 252,
252, 253, 253, 253, 253, 254, 254, 254, 254, 254,
255, 255, 255, 255, 255, 255
};
static const uint8_t ipl_gammaSigmoid2_1[256] = {
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  1,   1,   1,   1,   1,   1,   2,   2,   2,   2,
  3,   3,   3,   3,   4,   4,   5,   5,   5,   6,
  6,   7,   7,   7,   8,   8,   9,   9,  10,  11,
 11,  12,  12,  13,  14,  14,  15,  16,  16,  17,
 18,  19,  19,  20,  21,  22,  23,  24,  24,  25,
 26,  27,  28,  29,  30,  31,  32,  33,  34,  35,
 36,  37,  38,  40,  41,  42,  43,  44,  45,  47,
 48,  49,  50,  52,  53,  54,  56,  57,  59,  60,
 61,  63,  64,  66,  67,  69,  70,  72,  73,  75,
 77,  78,  80,  81,  83,  85,  87,  88,  90,  92,
 94,  95,  97,  99, 101, 103, 105, 106, 108, 110,
112, 114, 116, 118, 120, 122, 124, 126, 129, 131,
133, 135, 137, 139, 141, 143, 145, 147, 149, 150,
152, 154, 156, 158, 160, 161, 163, 165, 167, 168,
170, 172, 174, 175, 177, 178, 180, 182, 183, 185,
186, 188, 189, 191, 192, 194, 195, 196, 198, 199,
201, 202, 203, 205, 206, 207, 208, 210, 211, 212,
213, 214, 215, 217, 218, 219, 220, 221, 222, 223,
224, 225, 226, 227, 228, 229, 230, 231, 231, 232,
233, 234, 235, 236, 236, 237, 238, 239, 239, 240,
241, 241, 242, 243, 243, 244, 244, 245, 246, 246,
247, 247, 248, 248, 248, 249, 249, 250, 250, 250,
251, 251, 252, 252, 252, 252, 253, 253, 253, 253,
254, 254, 254, 254, 254, 254, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255
};
static const uint8_t ipl_gammaSigmoid2_4[256] = {
  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  0,   0,   0,   1,   1,   1,   1,   1,   1,   1,
  1,   2,   2,   2,   2,   3,   3,   3,   3,   4,
  4,   4,   5,   5,   5,   6,   6,   7,   7,   7,
  8,   8,   9,   9,  10,  10,  11,  12,  12,  13,
 13,  14,  15,  16,  16,  17,  18,  18,  19,  20,
 21,  22,  23,  23,  24,  25,  26,  27,  28,  29,
 30,  31,  32,  33,  35,  36,  37,  38,  39,  40,
 42,  43,  44,  46,  47,  48,  50,  51,  52,  54,
 55,  57,  58,  60,  61,  63,  65,  66,  68,  69,
 71,  73,  75,  76,  78,  80,  82,  84,  86,  88,
 89,  91,  93,  95,  97, 100, 102, 104, 106, 108,
110, 112, 115, 117, 119, 122, 124, 126, 129, 131,
133, 136, 138, 140, 143, 145, 147, 149, 151, 153,
155, 158, 160, 162, 164, 166, 167, 169, 171, 173,
175, 177, 179, 180, 182, 184, 186, 187, 189, 190,
192, 194, 195, 197, 198, 200, 201, 203, 204, 205,
207, 208, 209, 211, 212, 213, 215, 216, 217, 218,
219, 220, 222, 223, 224, 225, 226, 227, 228, 229,
230, 231, 232, 232, 233, 234, 235, 236, 237, 237,
238, 239, 239, 240, 241, 242, 242, 243, 243, 244,
245, 245, 246, 246, 247, 247, 248, 248, 248, 249,
249, 250, 250, 250, 251, 251, 251, 252, 252, 252,
252, 253, 253, 253, 253, 254, 254, 254, 254, 254,
254, 254, 254, 255, 255, 255, 255, 255, 255, 255,
255, 255, 255, 255, 255, 255
};
static const uint16_t VFE_Whiteboard_GammaTable[1024] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5,
  6, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13, 14,
  14, 15, 16, 16, 17, 18, 19, 20, 20, 21, 22, 22, 23, 24, 24, 25,
  26, 27, 28, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39,
  40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55,
  56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72,
  73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91,
  92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110,
  112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127,
  128,
  130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145,
  146,
  147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
  162,
  163, 164, 165, 166, 166, 167, 168, 169, 170, 171, 172, 173, 174, 174, 175,
  176,
  177, 178, 179, 179, 180, 181, 182, 183, 183, 184, 185, 185, 186, 187, 187,
  188,
  189, 190, 190, 191, 192, 192, 193, 194, 194, 195, 196, 196, 197, 198, 198,
  199,
  200, 201, 201, 202, 202, 203, 203, 204, 205, 205, 206, 207, 207, 207, 208,
  209,
  209, 209, 210, 210, 210, 211, 212, 212, 212, 213, 214, 214, 215, 215, 216,
  216,
  216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 221, 222, 222, 222,
  223,
  223, 224, 224, 224, 225, 225, 225, 226, 226, 227, 227, 227, 228, 228, 228,
  229,
  229, 230, 230, 230, 231, 231, 231, 231, 232, 232, 232, 233, 233, 234, 234,
  234,
  235, 235, 235, 235, 235, 236, 236, 236, 236, 237, 237, 237, 237, 238, 238,
  238,
  239, 239, 239, 240, 240, 240, 241, 241, 241, 241, 242, 242, 242, 242, 242,
  243,
  243, 243, 243, 244, 244, 244, 244, 244, 245, 245, 245, 245, 245, 246, 246,
  246,
  246, 246, 246, 246, 246, 246, 247, 247, 247, 247, 247, 248, 248, 248, 248,
  248,
  249, 249, 249, 249, 249, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
  251,
  251, 251, 251, 251, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 253,
  253,
  253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
};

static const uint8_t VFE_Posterization_GammaTable[1024] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
  85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 170, 170, 170, 170, 170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  170,
  170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255,
};

static const uint16_t VFE_Blackboard_GammaTable[1024] = {
  /* Gamma table */
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3,
  4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8,
  8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13,
  13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19,
  19, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24,
  25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 30, 31,
  31, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38,
  38, 39, 39, 39, 40, 40, 40, 41, 41, 42, 42, 42, 43, 43, 43, 44,
  44, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50,
  51, 51, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 56, 56, 57, 57,
  58, 58, 58, 59, 59, 60, 60, 61, 61, 61, 62, 62, 63, 63, 63, 64,
  64, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 69, 69, 69, 70, 70,
  71, 71, 71, 72, 72, 73, 73, 74, 74, 74, 75, 75, 76, 76, 77, 77,
  77, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 83, 83,
  83, 84, 84, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 89, 89, 89,
  90, 90, 90, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 95, 95, 95,
  96, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 100, 101, 101, 101, 102,
  102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 106, 106, 106, 107, 107,
  107,
  108, 108, 108, 109, 109, 110, 110, 111, 111, 111, 112, 112, 112, 113, 113,
  113,
  114, 114, 115, 115, 115, 116, 116, 116, 117, 117, 117, 118, 118, 118, 119,
  119,
  119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 123, 123, 123, 124, 124,
  124,
  125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129,
  130,
  130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 134, 134, 134, 135, 135,
  135,
  136, 136, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140,
  140,
  141, 141, 141, 141, 142, 142, 142, 143, 143, 143, 143, 144, 144, 145, 145,
  145,
  145, 146, 146, 147, 147, 147, 147, 148, 148, 148, 149, 149, 149, 149, 150,
  150,
  150, 150, 151, 151, 152, 152, 152, 152, 153, 153, 154, 154, 154, 154, 155,
  155,
  155, 155, 156, 156, 156, 156, 157, 157, 157, 157, 158, 158, 159, 159, 159,
  159,
  160, 160, 160, 161, 161, 161, 161, 162, 162, 163, 163, 163, 163, 164, 164,
  164,
  164, 165, 165, 165, 165, 165, 166, 166, 166, 166, 167, 167, 167, 168, 168,
  168,
  168, 169, 169, 170, 170, 170, 170, 171, 171, 171, 172, 172, 172, 172, 173,
  173,
  173, 173, 173, 174, 174, 174, 174, 174, 175, 175, 175, 175, 176, 176, 176,
  177,
  177, 177, 177, 178, 178, 178, 179, 179, 179, 179, 180, 180, 180, 181, 181,
  181,
  181, 182, 182, 182, 182, 183, 183, 183, 183, 184, 184, 184, 184, 184, 185,
  185,
  185, 185, 185, 185, 186, 186, 186, 186, 187, 187, 187, 188, 188, 188, 188,
  189,
  189, 189, 189, 190, 190, 190, 190, 191, 191, 191, 191, 192, 192, 192, 192,
  193,
  193, 193, 193, 194, 194, 194, 194, 195, 195, 195, 195, 196, 196, 196, 196,
  197,
  197, 197, 197, 197, 197, 198, 198, 198, 198, 198, 198, 198, 199, 199, 199,
  199,
  200, 200, 200, 200, 201, 201, 201, 201, 202, 202, 202, 202, 202, 203, 203,
  203,
  203, 204, 204, 204, 204, 205, 205, 205, 205, 206, 206, 206, 206, 206, 207,
  207,
  207, 207, 208, 208, 208, 208, 208, 209, 209, 209, 209, 210, 210, 210, 210,
  210,
  210, 210, 211, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212, 213,
  213,
  213, 213, 213, 214, 214, 214, 214, 215, 215, 215, 215, 215, 215, 216, 216,
  216,
  216, 217, 217, 217, 217, 217, 218, 218, 218, 218, 219, 219, 219, 219, 219,
  219,
  220, 220, 220, 220, 221, 221, 221, 221, 221, 221, 222, 222, 222, 222, 223,
  223,
  223, 223, 223, 223, 224, 224, 224, 224, 225, 225, 225, 225, 225, 225, 225,
  226,
  226, 226, 226, 227, 227, 227, 227, 227, 227, 227, 227, 228, 228, 228, 228,
  228,
  228, 228, 228, 228, 229, 229, 229, 229, 230, 230, 230, 230, 230, 230, 230,
  231,
  231, 231, 231, 232, 232, 232, 232, 232, 232, 232, 233, 233, 233, 233, 234,
  234,
  234, 234, 234, 234, 234, 235, 235, 235, 235, 236, 236, 236, 236, 236, 236,
  236,
  236, 237, 237, 237, 237, 238, 238, 238, 238, 238, 238, 238, 239, 239, 239,
  239,
  240, 240, 240, 240, 240, 240, 240, 240, 241, 241, 241, 241, 242, 242, 242,
  242,
  242, 242, 242, 242, 243, 243, 243, 243, 244, 244, 244, 244, 244, 244, 244,
  244,
  244, 244, 244, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 246, 246,
  246,
  246, 247, 247, 247, 247, 247, 247, 247, 247, 247, 248, 248, 248, 248, 249,
  249,
  249, 249, 249, 249, 249, 249, 249, 250, 250, 250, 250, 251, 251, 251, 251,
  251,
  251, 251, 251, 251, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 254,
  255,
};
#endif
