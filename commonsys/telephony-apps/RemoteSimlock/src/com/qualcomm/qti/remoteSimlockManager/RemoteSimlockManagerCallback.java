/******************************************************************************
  @file    RemoteSimlockManagerCallback.java
  @brief   RemoteSimlock asyncronous response callback definition. Client code can
           override the same and pass it to RemoteSimlock Manager.

  ---------------------------------------------------------------------------
  Copyright (c) 2018 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ---------------------------------------------------------------------------
******************************************************************************/

package com.qualcomm.qti.remoteSimlock.manager;

import com.qualcomm.qti.remoteSimlock.IUimRemoteSimlockServiceCallback;

public class RemoteSimlockManagerCallback extends IUimRemoteSimlockServiceCallback.Stub {
    /**
     * Simlock remote lock/unlock response.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param simlockResponse
     *    Integrity protected response of the remote lock/unlock operation
     *
     * @return None
     */
    public void uimRemoteSimlockProcessSimlockDataResponse(int token, int responseCode,
         byte[] simlockResponse) {
        // Dummy function
    }

    /**
     * Encrypted Key.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param encryptedKey
     *    Encrypted value of the key
     *
     * @return None
     */
    public void uimRemoteSimlockGetSharedKeyResponse(int token, int responseCode,
         byte[] encryptedKey) {
        // Dummy function
    }

    /**
     * Generated HMAC.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param hmacData
     *    HMAC generated on the input data
     *
     * @return None
     */
    public void uimRemoteSimlockGenerateHMACResponse(int token, int responseCode,
         byte[] hmacData) {
        // Dummy function
    }

    /**
     * Highest major and minor version of incoming blob
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param majorVersion
     *    Highest major version of the incoming blob
     *
     * @param minorVersion
     *    Highest minor version of the incoming blob
     *
     * @return None
     */
    public void uimRemoteSimlockGetVersionResponse(int token, int responseCode,
         int majorVersion, int minorVersion) {
        // Dummy function
    }

    /**
     * SIMLOCK status response
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *    UIM_REMOTE_SIMLOCK_RESP_GET_TIME_FAILED = 2;
     *
     * @param unlockStatus
     *    UIM_REMOTE_SIMLOCK_STATE_LOCKED = 0
     *    UIM_REMOTE_SIMLOCK_STATE_TEMPORARY_UNLOCK = 1
     *    UIM_REMOTE_SIMLOCK_STATE_PERMANENT_UNLOCK = 2
     *
     * @param unlockTime
     *    Temporary unlock time remaining, valid when state is
     *    UIM_REMOTE_SIMLOCK_STATE_TEMPORARY_UNLOCK, response can be
     *    UIM_REMOTE_SIMLOCK_RESP_GET_TIME_FAILED if failed to get the time
     *
     * @return None
     */
    public void uimRemoteSimlockGetSimlockStatusResponse(int token, int responseCode,
         int unlockStatus, long unlockTime) {
        // Dummy function
    }

    /**
     * Generated Simlock Request response.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param requestData
     *    Simlock Request data generated by Simlock engine
     *
     * @return None
     */
    public void uimRemoteSimlockGenerateRequestResponse(int token, int responseCode,
         byte[] requestData) {
        // Dummy function
    }

    /**
     * Unlock timer response.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *    UIM_REMOTE_SIMLOCK_RESP_TIMER_EXPIRED = 3;
     *
     * @param timerValue
     *    Unlock timer value started by simlock engine in seconds
     *
     * responseCode UIM_REMOTE_SIMLOCK_RESP_TIMER_EXPIRED if timer already started
     * once and expired. The request will not work until next UICC power cycle.
     *
     * @return None
     */
    public void uimRemoteSimlockUnlockTimerResponse(int token, int responseCode, int timerValue) {
        // dummy function
    }
}
