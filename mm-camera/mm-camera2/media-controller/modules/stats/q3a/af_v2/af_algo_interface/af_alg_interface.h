/* af_alg_interface.h
*
* Copyright (c) 2016-2017 Qualcomm Technologies, Inc.
* All Rights Reserved.
* Confidential and Proprietary - Qualcomm Technologies, Inc.
*/

#ifndef __AF_ALG_INTF_H__
#define __AF_ALG_INTF_H__
#include "af_data_type.h"
#include "chromatix_common.h"
#include "af_alg_util_interface.h"

extern uint32_t stats_haf_api_debug_mask;
extern uint32_t stats_haf_input_debug_mask;
extern char stats_haf_node_debug_mask[16];

/** af_bemo_ID_enum_type:
 *     Focus converge status for algorithms
 *
 *   @AF_BEMO_ID_PRIMARY : BEMO ID for PRIMARY algo
 *
 *   @AF_BEMO_ID_SECONDARY : BEMO ID for SECONDARY algo.
 **/
typedef enum {
  AF_BEMO_ID_PRIMARY = 0,
  AF_BEMO_ID_SECONDARY,
  AF_BEMO_ID_MAX,
} af_bemo_ID_enum_type;

typedef enum {
  DEBUG_MASK_DEFAULT_MIXER = 0,
  DEBUG_MASK_TOF,
  DEBUG_MASK_PDAF,
  DEBUG_MASK_DCIAF,
  DEBUG_MASK_CAF,
} HAF_debug_input_type;

typedef enum {
  BIT_SHIFT_PROCESS_MONITOR                = 0,
  BIT_SHIFT_PROCESS_SEARCH                 = 1,
  BIT_SHIFT_SET_PARAM                      = 2,
  BIT_SHIFT_SET_INPUTS                     = 3,
  BIT_SHIFT_SET_TUNING                     = 4,
  BIT_SHIFT_SET_MODE                       = 5,
  BIT_SHIFT_SET_CAMERA_MODE                = 6,
  BIT_SHIFT_SET_ROI                        = 7,
  BIT_SHIFT_SET_RANGE                      = 8,
  BIT_SHIFT_GET_DEBUG_DATA                 = 9,
  BIT_SHIFT_REBASE                         = 10,
  BIT_SHIFT_DESTROY                        = 11,
  BIT_SHIFT_SET_SENSITIVITY                = 12,
} HAF_debug_API_type;

/* =======================================================================

DEFINITIONS AND DECLARATIONS

This section contains definitions for constants, macros, types, variables
and other items needed by this interface.

========================================================================== */
/* -----------------------------------------------------------------------
** Constant / Define Declarations
** ----------------------------------------------------------------------- */
/* Macro Definition */

typedef enum {
  AF_STABILITY_NOT_AVAILABLE        = -1,
  AF_STABILITY_LOW                  = 0,
  AF_STABILITY_HIGH                 = 100,
} HAF_AF_stability_type;

typedef enum {
  AF_CONFIDENCE_NOT_AVAILABLE       = -1,
  AF_CONFIDENCE_LOW                 = 0,
  AF_CONFIDENCE_MEDIUM              = 50,
  AF_CONFIDENCE_HIGH                = 100,
} HAF_AF_confidence_type;

typedef enum {
  AF_FOCUS_LEVEL_NOT_AVAILABLE      = -1,
  AF_FOCUS_LEVEL_LOW                = 0,
  AF_FOCUS_LEVEL_HIGH               = 100,
} HAF_AF_focus_level_type;

typedef enum {
  AF_PROGRESS_NOT_AVAILABLE         = -1,
  AF_PROGRESS_0_NONE                = 0,
  AF_PROGRESS_50_RUNNING            = 50,
  AF_PROGRESS_75_RUNNING            = 75,
  AF_PROGRESS_100_DONE              = 100,
} HAF_AF_progress_type;

typedef enum {
  AF_HAF_SENSITIVITY_LOW      = 0,
  AF_HAF_SENSITIVITY_DEFAULT  = 50,
  AF_HAF_SENSITIVITY_HIGH     = 100,
} HAF_set_sensitivity_type;

/* -----------------------------------------------------------------------
** Type Declarations
** ----------------------------------------------------------------------- */


/** _af_haf_monitor_data_t:
*     Output monitor data generated by process_monitor API
*
*    @focus_level : Indication on how focus current scene is
*    @stability   : Indication on how stable current scene is
*    @confidence  : Confidence level on process_monitor API
**/
typedef struct _af_haf_monitor_data_t {
  boolean                            is_trig_refocus;
  int                                target_pos;
  int                                focus_level;
  int                                stability;
  int                                confidence;
  af_mw_selected_roi_t               mw_roi_info;
} af_haf_monitor_data_t;

/** _af_haf_focus_search_data_t:
*     Output search data generated by process_search API
*
*    @progress   : Progression indication on process_search API
*    @next_pos   : Next target lens position to be moved to
*    @range_near : Fine search range near end
*    @range_far  : Fine search range far end
*    @fine_step_size : Fine scan step size
*    @confidence : Confidence level on search result
*    @need_fine_scan_extension : Flag for enabling fine search extension
*    @monitor    : Monitor data during process_search API
*    @search_dir : Search Direction for Optimization
*    @is_opt_valid : flag to indicate validaty of Data
*    @start_pos : Start lens position for Optimization
*    @fine_search   : is Fine Search happening
**/
typedef struct _af_haf_focus_search_data_t {
    int     progress;
    int     next_pos;
    int     target_pos;
    int     range_near;
    int     range_far;
    int     fine_step_size;
    int     confidence;
    af_move_direction_type  search_dir;
    int     fallback_to_fconv_when_scene_change;
    boolean is_frame_skip;
} af_haf_focus_search_data_t;

/** af_haf_set_parameter_type:
 * List of AF parameters that can be used by other componenets to set.
 **/
typedef enum {
  AF_HAF_SET_PARAM_ROI,                    /* ROI information */
                                       /* - in case of Touch/Face */
  AF_HAF_SET_PARAM_UPDATE_AEC_INFO,        /* Update aec info */
  AF_HAF_SET_PARAM_UPDATE_GRAVITY_VECTOR,  /* update gravity vector */
  AF_HAF_SET_PARAM_DEPTH_SERVICE,          /* Depth map input to AF algorithm*/
  AF_HAF_SET_PARAM_STATS_TS_DATA,         /* To send timestamp info to haf algo */
  AF_HAF_SET_PARAM_IS_FIRST_RUN,          /* HAF is first run flag */
  AF_HAF_SET_PARAM_IS_SPOTLIGHT_DETECTED, /* Spotlight is detected flag */
  AF_HAF_SET_PARAM_EXTENDED_TUNING,       /* Tuning params that cannot fit chromatix Hdr*/
  AF_HAF_SET_PARAM_ROLE_SWITCH,           /* Allow HAF to be aware what role algorithm is in*/
  AF_HAF_SET_PARAM_PEER_FOCUS_INFO,       /* Informs about Peer Algorithms Focus Info*/
  AF_HAF_SET_PARAM_LENS_INFO,             /* Informs about Actuator Info*/
  AF_HAF_SET_PARAM_GYRO_INFO,             /* Gyro information update */
  AF_HAF_SET_PARAM_FV_INFO,                /* Update Focus value info */
  AF_HAF_SET_PARAM_UPDATE_SAD_INFO,        /* Update sad info */
  AF_HAF_SET_PARAM_UPDATE_SADR_INFO,       /* Update sadr info */
  AF_HAF_SET_PARAM_UPDATE_GYRO_SQR_INFO,   /* Update Gyro_sqr info */
  AF_HAF_SET_CUSTOM_PARAM,                /* Custom HAF Param*/
  AF_HAF_SET_PARAM_UPDATE_SENSOR_INFO,    /* Update image sensor information */
  AF_HAF_SET_PARAM_LED_RUNNING,           /*Face PDAF for LED case*/
  AF_HAF_SET_PARAM_COMMIT_FRAME_DATA,     /* Inform algorithm to commit frame data */
  AF_HAF_SET_PARAM_LSP_ENABLE,
  AF_HAF_SET_PARAM_MW_ENABLE,             /* Enable disable mw */
  AF_HAF_SET_PARAM_AF_HJ_ENABLE,             /* Enable disable Hand Jitter AF */
  AF_HAF_SET_PARAM_START_SECONDARY_ALGO,  /* Inform secondary algorithm to prepare start */
  AF_HAF_SET_PARAM_UPDATE_FACE_SC_INFO,    /* Update face scene change information */
  AF_HAF_SET_PARAM_IS_PREV_FOCUS_CONV_FAILED, /* Passing is_prev_focus_conv_failed information */
  AF_HAF_SET_PARAM_CAF_SC_INFO,              /* Passing CAF scene change info within CAF algo */
  AF_HAF_SET_PARAM_SKIP_FINE_SCAN,             /* Param to skip fine scan at run time*/
  AF_HAF_SET_PARAM_BG_STATS,              /* Set BG stats */
  AF_HAF_SET_PARAM_MAX = 0xFFFFFFFF,              /* MAX_VALUE */
} af_haf_set_parameter_type;

/** af_haf_get_parameter_type:
* List of AF parameters that can be used by outsider
**/
typedef enum {
  AF_HAF_GET_SPOTLIGHT_DETECT_STATUS = 0,
  AF_HAF_GET_PARAM_MAX = 0xFFFFFFFF,              /* TODO */
} af_haf_get_parameter_type;

/** _af_haf_tune_params_t:
 *    @af_haf_tune_params_t: Tuning parameters for haf
**/
typedef struct _af_haf_tune_params_t {
  af_algo_tune_parms_adapter_t *p_tuning;
  af_haf_enable_type *enable;
  af_fullsweep_srch_mode_type *fullsweep_mode;
} af_haf_tune_params_t;

typedef struct _af_caf_info_t {
  boolean                              is_panning;
  boolean                              is_change;
} af_caf_info_t;

typedef struct _af_caf_metric_param_t {
  af_caf_info_t                        gyro;
  af_caf_info_t                        sad;
  af_caf_info_t                        fv;
  af_caf_info_t                        chroma;
  af_caf_info_t                        face;
} af_caf_metric_param_t;


/** _af_stats_ts_data_t:
 *    @frame_id:  frame id
 *    @time_stamp:  time stamp for the frame id
**/
typedef struct _af_stats_ts_data_t {
  uint32_t          frame_id;
  time_stamp_t      time_stamp;
} af_stats_ts_data_t;

/** af_imglib_output_t
*   @frame_id: Frame ID out the AF output
*   @fV: Focus value
*   @pending: Flag to indicate the fv value has been query but
*           missing.
*
*   Imglib preview assisted AF output
**/
typedef struct {
    int     frame_id;
    uint32  fV;
    uint8 pending;
} af_sw_stats;

typedef struct _af_stats_info {
  uint32              stats_id;
  int                 index;
  float               cur_fv;
  float               fv_hv;
  float               fv_hv_norm;
  float               fv_h1;
  float               fv_h1_norm;
  float               fv_h2;
  float               fv_h2_norm;
  float               fv_v;
  float               fv_v_norm;
  int                 cur_pos;
  af_sw_stats         sw_stats[AF_COLLECTION_POINTS];
  uint32              histogram[AF_COLLECTION_POINTS];
} af_stats_info_t;

/** af_caf_state:
 *     Output CAF data to all the depth based algo whoever
 *     is dependent on CAF output
 *
 *    @sad_focus_level : if scene is changed by SAD or not
 *    @gyro_focus_level   : if scene is changed by gyro or not
 *    @chroma_focus_level  : if scene is changed by chroma or not
 *    @sad_stability   : if scene is stable by SAD or not
 *    @gyro_stability  : if scene is stable by gyro or not
 **/
typedef struct _af_caf_state {
  HAF_AF_focus_level_type sad_focus_level;
  HAF_AF_focus_level_type gyro_focus_level;
  HAF_AF_focus_level_type chroma_focus_level;
  HAF_AF_stability_type sad_stability;
  HAF_AF_stability_type gyro_stability;
} af_caf_state;

/** _af_haf_set_parameter: Used for setting AF parameters
 *    @type:              parameter type as listed by af_set_parameter_type
 *    @current_frame_id:  SOF id wrt to set param
  *    @af_roi_info:       contents hold AF ROI information
 *    @aec_info:          TODO
  *
 * Used for setting AF parameters
 **/
typedef struct _af_haf_set_parameter {
  af_haf_set_parameter_type          type;
  unsigned int                       current_frame_id;

  union {
    af_input_from_aec_t              aec_info;
    af_roi_info_t                    af_roi_info;
    af_input_from_gravity_vector_t   gravity_info;
    af_input_from_img_sensor_t       sensor_info;
    af_depth_service_output_t        depth_service;
    af_stats_ts_data_t               af_stats_ts;
    boolean                          is_haf_first_run;
    boolean                          is_spotlight_detected;
    boolean                          is_prev_focus_conv_failed;
    af_core_tuning_params_t          extended_tuning_info;
    af_core_focus_info               af_peer_focus_info;
    af_lens_params                   af_lens_info;
    af_role_switch_params_t          role_switch;
    boolean                          af_follow_mode;
    boolean                          af_led_assist;
    af_core_input_gyro_type          gyro_input;
    af_stats_info_t                  stats;
    float                            sad;
    float                            sadr;
    float                            gyro_sqr;
    int                              face_sc;
    void                             *customData;
    boolean                          is_LSP_enable;
    boolean                          is_af_hj_enable;
    af_move_direction_type           search_dir;
    boolean                          mw_enable;
    float                            caf_sc_info;
    boolean                          skip_fine_scan;
    q3a_core_bg_stats_type           bg_stats;
  } u;
} af_haf_set_parameter_t;

/**
 * detected_flag: Flag to indicate if spotlight was detected
 */
typedef struct _af_haf_spotlight_status
{
  boolean detected_flag;
} af_haf_spotlight_status;

/** _af_haf_get_parameter: Used for retrieving information from an algo
*    @type:              parameter type as listed by af_get_parameter_type
*    @current_frame_id:  SOF id wrt to get param
*    @af_roi_info:       contents hold AF ROI information
*
* Used for retrieving information which need to be shared with outside
* of an algorithm
**/
typedef struct _af_haf_get_parameter {
  af_haf_get_parameter_type          type;
  unsigned int                       current_frame_id;

  union {
    af_haf_spotlight_status          spotlight_status;
    void                             *customData;
  } u;
} af_haf_get_parameter_t;


/* -----------------------------------------------------------------------
** Forward Declarations
** ----------------------------------------------------------------------- */
typedef struct _af_alg_interface_t af_alg_interface_t;

/* -----------------------------------------------------------------------
** af_alg_interface API
** ----------------------------------------------------------------------- */
/** _af_alg_interface_t:
*     Hybrid AF framework API exposed by underlying AF algorithm
*
*    @*set_parameters  : API method to pass in algorithm configuration params
*    @*get_parameters  : API method to pass information between algorithms or send it out
*    @*set_inputs      : API method to pass in algorithm inputs
*    @*set_tuning      : API method to pass in Chromatix tuning data explicitly
*    @*set_mode        : API method to pass in mode inputs explicitly
*    @*set_camera_mode    : API method to pass in Camera run mode inputs explicitly
*    @*set_roi         : API method to pass in roi inputs explictly
*    @*set_range       : API method to pass in range inputs explictly
*    @*set_sensitivity : API method to pass sensitivity values
*    @*get_debug_data : API method to get the debug data
*    @*process_monitor : API method to invoke algorithm monitor functionality
*    @*process_search  : API method to invoke algorithm search functionality
*    @*clear_data  : API method to clear algorithm data to default state
*    @*destroy         : API method to invoke algorithm self deallocation
**/

struct _af_alg_interface_t {
    boolean     (*set_parameters)(af_alg_interface_t *p_alg, af_haf_set_parameter_t *param);
    boolean     (*get_parameters)(af_alg_interface_t *p_alg, af_haf_get_parameter_t *param);
    boolean     (*set_inputs)(af_alg_interface_t *p_alg, af_haf_set_parameter_t *param);
    boolean     (*set_tuning)(af_alg_interface_t *p_alg, af_haf_tune_params_t  *haf_tuning);
    void        (*set_mode)(af_alg_interface_t *p_alg, af_mode_type mode);
    void        (*set_camera_mode)(af_alg_interface_t *p_alg, af_run_mode_type run_mode);
    void        (*set_roi)(af_alg_interface_t *p_alg, af_roi_info_t *roi);
    void        (*set_range)(af_alg_interface_t *p_alg, int near, int far);
    boolean     (*set_sensitivity)(af_alg_interface_t *p_alg, HAF_set_sensitivity_type sensitivity);
    void        (*get_debug_data)(af_alg_interface_t *p_alg, void* debug_data, int haf_index);
    boolean     (*process_monitor)(af_alg_interface_t *p_alg, af_haf_monitor_data_t *output, int cur_pos);
    boolean     (*process_search)(af_alg_interface_t *p_alg, af_haf_focus_search_data_t *output, int cur_pos);
    boolean     (*clear_data)(af_alg_interface_t *p_alg);
    boolean     (*rebase_monitor)(af_alg_interface_t *p_alg);
    boolean     (*reset_search)(af_alg_interface_t *p_alg);
    void(*destroy)(af_alg_interface_t *p_alg);
    boolean(*rebase_reference)(af_alg_interface_t *p_alg);
};

/* Algorithm external util functions */
unsigned int pos_2_dist(const af_alg_util_interface_t *p_alg_util,
  unsigned int lp);
unsigned int dac_2_pos(const af_alg_util_interface_t *p_alg_util, int dac);
int pos_2_dac(const af_alg_util_interface_t *p_alg_util, unsigned int lp);
int dist_2_pos(const af_alg_util_interface_t *p_alg_util, int distmm);
/* -----------------------------------------------------------------------
** Forward Declarations
** ----------------------------------------------------------------------- */
///**************************************************************
void af_alg_init_interface(af_alg_interface_t *p_alg);

#endif
