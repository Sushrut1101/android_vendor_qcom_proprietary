/* af_alg_interface.h
*
* Copyright (c) 2015-2016 Qualcomm Technologies, Inc.
* All Rights Reserved.
* Confidential and Proprietary - Qualcomm Technologies, Inc.
*/

#ifndef __AF_ALG_INTF_H__
#define __AF_ALG_INTF_H__
#include "af_data_type.h"
#include "chromatix_common.h"
#include "af_alg_util_interface.h"

/* =======================================================================

DEFINITIONS AND DECLARATIONS

This section contains definitions for constants, macros, types, variables
and other items needed by this interface.

========================================================================== */
/* -----------------------------------------------------------------------
** Constant / Define Declarations
** ----------------------------------------------------------------------- */
/* Macro Definition */
#define   AF_STABILITY_HIGH                (100)
#define   AF_STABILITY_LOW                  (0)
#define   AF_STABILITY_NOT_AVAILABLE        (-1)

#define   AF_CONFIDENCE_HIGH               (100)
#define   AF_CONFIDENCE_MEDIUM             (50)
#define   AF_CONFIDENCE_LOW                 (0)
#define   AF_CONFIDENCE_NOT_AVAILABLE      (-1)

#define   AF_FOCUS_LEVEL_HIGH              (100)
#define   AF_FOCUS_LEVEL_LOW                (0)
#define   AF_FOCUS_LEVEL_NOT_AVAILABLE     (-1)

#define   AF_PROGRESS_100_DONE             (100)
#define   AF_PROGRESS_50_RUNNING           (50)
#define   AF_PROGRESS_0_NONE                (0)
#define   AF_PROGRESS_NOT_AVAILABLE        (-1)

/* -----------------------------------------------------------------------
** Type Declarations
** ----------------------------------------------------------------------- */
/** _af_haf_monitor_data_t:
*     Output monitor data generated by process_monitor API
*
*    @focus_level : Indication on how focus current scene is
*    @stability   : Indication on how stable current scene is
*    @confidence  : Confidence level on process_monitor API
*    @target_pos  : estimated target position
**/
typedef struct _af_haf_monitor_data_t {
    int focus_level;
    int stability;
    boolean is_trig_refocus;
    int confidence;
    int target_pos;
} af_haf_monitor_data_t;

/** _af_haf_focus_search_data_t:
*     Output search data generated by process_search API
*
*    @progress   : Progression indication on process_search API
*    @next_pos   : Next target lens position to be moved to
*    @target_pos  : estimated target position
*    @range_near : Fine search range near end
*    @range_far  : Fine search range far end
*    @fine_step_size : Fine scan step size
*    @confidence : Confidence level on search result
*    @need_fine_scan_extension : Flag for enabling fine search extension
**/
typedef struct _af_haf_focus_search_data_t {
    int     progress;
    int     next_pos;
    int     target_pos;
    int     range_near;
    int     range_far;
    int     fine_step_size;
    int     confidence;
    int     need_fine_scan_extension;
    int     fallback_to_fconv_when_scene_change;
} af_haf_focus_search_data_t;

/** _af_haf_fallback_opt_t:
 *    Fallback optimization Configuration/Data
 *
 *    NOTE:Please Keep in mind that putting negative valid
 *    indicates non valid parameter
 *
 *    @is_opt_valid : flag to indicate validaty of Data
 *    @search_dir : Search Direction for Optimization
 *    @start_pos : Start lens position for Optimization
 *    @search_range_near_pos : Near end position in search range
 *    @search_range_far_pos : Far end position in search range
 **/
typedef struct _af_haf_fallback_opt_t {
  boolean                              is_opt_valid;
  int                                  search_dir;
  int                                  start_pos;
  int                                  search_range_near_pos;
  int                                  search_range_far_pos;
  int                                  focus_converge_status;
} af_haf_fallback_opt_t;

/** af_haf_set_parameter_type:
 * List of AF parameters that can be used by other componenets to set.
 **/
typedef enum {
  AF_HAF_SET_PARAM_ROI,                    /* ROI information */
                                       /* - in case of Touch/Face */
  AF_HAF_SET_PARAM_UPDATE_AEC_INFO,        /* Update aec info */
  AF_HAF_SET_PARAM_UPDATE_GRAVITY_VECTOR,  /* update gravity vector */
  AF_HAF_SET_PARAM_DEPTH_SERVICE,          /* Depth map input to AF algorithm*/
  AF_HAF_SET_PARAM_STATS_TS_DATA,         /* To send timestamp info to haf algo */
  AF_HAF_SET_PARAM_CAF_INPUT,             /* CAF Input from traditional CAF */
  AF_HAF_SET_PARAM_IS_FIRST_RUN,          /* HAF is first run flag */
  AF_HAF_SET_PARAM_IS_SPOTLIGHT_DETECTED, /* Spotlight is detected flag */
  AF_HAF_SET_PARAM_EXTENDED_TUNING,       /* Tuning params that cannot fit chromatix Hdr*/
  AF_HAF_SET_PARAM_ROLE_SWITCH,           /* Allow HAF to be aware what role algorithm is in*/
  AF_HAF_SET_PARAM_PEER_FOCUS_INFO,       /* Informs about Peer Algorithms Focus Info*/
  AF_HAF_SET_PARAM_LENS_INFO,          /* Informs about Actuator Info*/
  AF_HAF_SET_CUSTOM_PARAM,                /* Custom HAF Param*/
  AF_HAF_SET_PARAM_UPDATE_SENSOR_INFO,    /* Update image sensor information */
  AF_HAF_SET_PARAM_LED_RUNNING,           /*Face PDAF for LED case*/
  AF_HAF_SET_PARAM_MAX = 0xFF,              /* TODO */
} af_haf_set_parameter_type;

/** _af_haf_tune_params_t:
 *    @af_haf_tune_params_t: Tuning parameters for haf
**/
typedef struct _af_haf_tune_params_t {
  af_algo_tune_parms_adapter_t *p_tuning;
  af_haf_enable_type *enable;
} af_haf_tune_params_t;


/** _af_stats_ts_data_t:
 *    @frame_id:  frame id
 *    @time_stamp:  time stamp for the frame id
**/
typedef struct _af_stats_ts_data_t {
  uint32_t          frame_id;
  time_stamp_t      time_stamp;
} af_stats_ts_data_t;

typedef struct _af_stats_caf_input_t {
  boolean             is_caf_changed_sad;
  boolean             is_caf_changed_gyro;
  boolean             scene_chg_during_srch;
  boolean             is_caf_changed;
  boolean             is_caf_stable;
} af_stats_caf_input_t;

/** _af_haf_set_parameter: Used for setting AF parameters
 *    @type:              parameter type as listed by af_set_parameter_type
 *    @current_frame_id:  SOF id wrt to set param
  *    @af_roi_info:       contents hold AF ROI information
 *    @aec_info:          TODO
  *
 * Used for setting AF parameters
 **/
typedef struct _af_haf_set_parameter {
  af_haf_set_parameter_type type;
  unsigned int          current_frame_id;

  union {
    af_input_from_aec_t       aec_info;
    af_roi_info_t             af_roi_info;
    af_input_from_gravity_vector_t gravity_info;
    af_input_from_img_sensor_t sensor_info;
    af_depth_service_output_t    depth_service;
    af_stats_ts_data_t        af_stats_ts;
    af_stats_caf_input_t      caf_input;
    boolean                   is_haf_first_run;
    boolean                   is_spotlight_detected;
    af_core_tuning_params_t   extended_tuning_info;
    af_core_focus_info        af_peer_focus_info;
    af_lens_actuator_info_t   af_lens_info;
    af_role_switch_params_t          role_switch;
    boolean                   af_follow_mode;
    boolean                   af_led_assist;
    void                      *customData;
  } u;
} af_haf_set_parameter_t;

/* -----------------------------------------------------------------------
** Forward Declarations
** ----------------------------------------------------------------------- */
typedef struct _af_alg_interface_t af_alg_interface_t;

/* -----------------------------------------------------------------------
** af_alg_interface API
** ----------------------------------------------------------------------- */
/** _af_alg_interface_t:
*     Hybrid AF framework API exposed by underlying AF algorithm
*
*    @*set_parameters  : API method to pass in algorithm configuration params
*    @*set_inputs      : API method to pass in algorithm inputs
*    @*set_tuning      : API method to pass in Chromatix tuning data explicitly
*    @*set_mode        : API method to pass in mode inputs explicitly
*    @*set_camera_mode    : API method to pass in Camera run mode inputs explicitly
*    @*set_roi         : API method to pass in roi inputs explictly
*    @*set_range       : API method to pass in range inputs explictly
*    @*set_sensitivity : API method to pass sensitivity values
*    @*get_debug_data : API method to get the debug data
*    @*process_monitor : API method to invoke algorithm monitor functionality
*    @*process_search  : API method to invoke algorithm search functionality
*    @*get_fallback_optimization  : API method to retrieve fallback optimization values
*    @*destroy         : API method to invoke algorithm self deallocation
**/

struct _af_alg_interface_t {
    boolean     (*set_parameters)(af_alg_interface_t *p_alg, af_haf_set_parameter_t *param);
    boolean     (*set_inputs)(af_alg_interface_t *p_alg, af_haf_set_parameter_t *param);
    boolean     (*set_tuning)(af_alg_interface_t *p_alg, af_haf_tune_params_t  *haf_tuning);
    boolean     (*set_sensitivity)(af_alg_interface_t *p_alg, int sensitivity);
    void        (*set_mode)(af_alg_interface_t *p_alg, af_mode_type mode);
    void        (*set_camera_mode)(af_alg_interface_t *p_alg, af_run_mode_type run_mode);
    void        (*set_roi)(af_alg_interface_t *p_alg, af_roi_info_t *roi);
    void        (*set_range)(af_alg_interface_t *p_alg, int near, int far);
    void        (*get_debug_data)(af_alg_interface_t *p_alg, void* debug_data, int haf_index);
    boolean (*get_fallback_optimization)(af_alg_interface_t *p_alg, af_haf_fallback_opt_t *p_fallback_opt);
    boolean     (*process_monitor)(af_alg_interface_t *p_alg, af_haf_monitor_data_t *output, int cur_pos);
    boolean     (*process_search)(af_alg_interface_t *p_alg, af_haf_focus_search_data_t *output, int cur_pos);
    void        (*destroy)(af_alg_interface_t *p_alg);
    boolean     (*rebase_reference)(af_alg_interface_t *p_alg);
};
#endif
