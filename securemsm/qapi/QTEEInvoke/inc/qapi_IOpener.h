// ============================================================================
// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// ============================================================================
#ifndef __IOPENER_H
#define __IOPENER_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

/** @file qapi_IOpener.h
*/

/** @addtogroup qapi_iopener
@{ */

#define IOpener_INVALID_ID UINT32_C(0)

/** Error code returned by qapi_IOpener_open() if a TA service with a UID specified
 * by the id_val parameter is not found.
 */
#define qapi_IOpener_ERROR_NOT_FOUND INT32_C(10)

/** Error code returned by qapi_IOpener_open() if the TA service's UID specified
 * by the id_val parameter is other than one of the reserved IDs.
 */
#define qapi_IOpener_ERROR_PRIVILEGE INT32_C(11)

#define IOpener_OP_open 0

/**@brief Releases an object in the ARM@reg TrustZone@reg (TZ) that was opened via qapi_IOpener_open().
*
* @param[in] self  Object to be released.
*
* @return 0: success, -1: failure.
*
* @sa
* IOpener_open()
*/
static inline int32_t
qapi_IOpener_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

/**@brief Retains and increments the references on an object.
* 
* This is useful if the object is sent to a different thread or
* process. In that case, the sender can call retain before sending the object.
*
* @param[in] self  Object to be retained or reference to be incremented.
*
* @return 0: success, -1: failure.
*/
static inline int32_t
qapi_IOpener_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

/**@brief Opens a TZ object to be used for execution.
* 
* Allows the user to open a specific class ID or a TA service ID
* to then be used as desired in asking the TZ to execute on the user's behalf.
*
* @param[in] self  Object to use for opening. This should be retrieved via
*                  qapi_QTEEInvoke_GetOpener().
* @param[in] id_val  ID of the TA service that is to be opened.
* @param[out] obj_ptr  Return object representing the requested TA service.
*
* @return 0: success, -1: failure.
*/
static inline int32_t
qapi_IOpener_open(Object self, uint32_t id_val, Object *obj_ptr)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &id_val, sizeof(uint32_t) };

  int32_t result = Object_invoke(self, IOpener_OP_open, a, ObjectCounts_pack(1, 0, 0, 1));

  *obj_ptr = a[1].o;

  return result;
}

/** @} */ /* end_addtogroup qapi_iopener */

#endif // __IOPENER_H
