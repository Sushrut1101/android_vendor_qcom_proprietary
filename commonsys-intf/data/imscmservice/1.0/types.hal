/*
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 */

package com.qualcomm.qti.imscmservice@1.0;

/*
 * Service Handle Definition
 * mapped as a void pointer
 */
typedef uint64_t IMSCM_SERVICE_HANDLE;

/*
 * Connection Handle definition
 * mapped to a void pointer
 */
typedef uint64_t IMSCM_CONNECTION_HANDLE;


/*
 * IMS CM Status codes
 */
enum IMSCM_STATUSCODE : uint32_t {

  IMSCM_SUCCESS,
  /**< Request was processed successfully. */
  IMSCM_FAILURE,
  /**< Request was processed unsuccessfully. */
  IMSCM_MEMORY_ERROR,
  /**< Error in memory allocation. */
  IMSCM_INVALID_LISTENER,
  /**< Provided listener is not valid. */
  IMSCM_INVALID_PARAM,
  /**< Invalid parameter(s). */
  IMSCM_SERVICE_NOTALLOWED,
  /**< Service is not allowed. */
  IMSCM_SERVICE_UNAVAILABLE,
  /**< Service is not available. */
  IMSCM_INVALID_FEATURE_TAG,
  /**< Invalid feature tag. */
  IMSCM_DNSQUERY_PENDING,
  /**< DNS query pending. */
  IMSCM_DNSQUERY_FAILURE,
  /**< DNS query failed. */
  IMSCM_SERVICE_DIED,
  /**< Android native service stopped working. */
  IMSCM_MESSAGE_NOTALLOWED,
  /**< SIP Message not allowed. */
  IMSCM_DISPATCHER_SEND_SUCCESS,
  /**< This value is for internal use only. Should not be part of the document */
  IMSCM_INVALID_MAX,
  /* Max */
};


/*
 * Service Status enums
 */
enum IMSCM_STATUS : uint32_t {
  IMSCM_STATUS_DEINIT,
  /**< Status is NULL. */
  IMSCM_STATUS_INIT_IN_PROGRESS,
  /**< Service is being brought up.*/
  IMSCM_STATUS_SUCCESS,
  /**< Service initialization was successful.*/
  IMSCM_STATUS_FAILURE,
  /**< Service initialization failed.*/
  IMSCM_STATUS_SERVICE_DIED,
  /**< Android native service stopped working. */
  IMSCM_STATUS_SERVICE_CLOSING,
  IMSCM_STATUS_SERVICE_CLOSED,
  /**< Android native service is closing state */
  IMSCM_STATUS_SERVICE_RESTARTED,
  /**< Android native service is restarted */
  IMSCM_STATUS_SERVICE_NOT_SUPPORTED,
  QIMSCM_STATUS_SERVICE_UNKNOWN,
};


/*
 * Configuration Data Type
 */
enum IMSCM_ConfigType : uint32_t {
  IMSCM_USER_CONFIG,
  IMSCM_DEVICE_CONFIG,
  IMSCM_AUTO_CONFIG,
};

/*
 * Supported IP type Enums
 */
enum QIMSCM_IPTYPE_ENUM : uint32_t {
  /** Unknown IP type. */
  QIMSCM_IPTYPE_UNKNOWN,
  /** IPv4. */
  QIMSCM_IPTYPE_V4,
  /** IPv6. */
  QIMSCM_IPTYPE_V6,
};


/*
 * User Config Data type
 */
struct QIMSCM_USER_CONFIG {

  uint32_t  iUEClientPort;
  /* UE client port. */
  uint32_t  iUEServerPort;
  /* UE server port. */
  string    pAssociatedURI;
  /* Associated URI value. */
  string    pUEPublicIPAddress;
  /* Recieved UE public IP address. */
  uint32_t   iUEPublicPort;
  /* UE public IP port. */
  string    pSipPublicUserId;
  /* User public ID. */
  string    pSipPrivateUserId;
  /* Private user ID. */
  string    pSipHomeDomain;
  /* Home domain address. */
  string    pUEPubGruu;
  /* UE public GRUU. */
  string    pLocalHostIPAddress;
  /* UE public IP address. */
  QIMSCM_IPTYPE_ENUM  eIpType;
  /* UE IP type. */
  string    pIMEIStr;
  /* UE IMEI value. */
  uint32_t  iUEOldSAClientPort;
  /* IPSec old SA UE client port. */
};


/*
 * Device Config Data Type
 */
struct QIMS_CM_DEVICE_CONFIG {

  bool    bUEBehindNAT;
  /* Indicates whether the UE is behind NAT. */
  bool    bIpSecEnabled;
  /* Indicates whether IPSec is enabled. */
  bool    bCompactFormEnabled;
  /* Indicates whether compact form is enabled. */
  bool    bKeepAliveEnableStatus;
  /* Indicates whether keep alive is enabled. */
  bool      bGruuEnabled;
  /* Indicates whether GRUU is enabled. */
  string    pStrSipOutBoundProxyName;
  /* Outbound SIP proxy name/IP. */
  uint32_t  iSipOutBoundProxyPort;
  /* Outbound SIP proxy port. */
  uint32_t  iPCSCFClientPort;
  /* P-CSCF client port. */
  uint32_t  iPCSCFServerPort;
  /* P-CSCF server port. */
  string    pArrAuthChallenge;
  /* Authentication header. */
  string    pArrNC;
  /* Nonce count. */
  string    pServiceRoute;
  /* Service route value. */
  string    pSecurityVerify;
  /* Security verify value. */
  uint32_t iPCSCFOldSAClientPort;
  /* IPSec old SA PCSCF client port. */
  uint32_t iTCPThresholdValue;
  /** Configured TCP Threshold Value for SIP */
  string    sPANI;
  /* PANI header value. */
  string    sPATH;
  /* Path header value from IMS registration. */
};

/*
 * AutoConfig Definition Type
 */
enum IMSCM_AUTOCONFIG_RECEIVE_TYPE : uint32_t {
  IMSCM_AUTOCONFIG_SERVER_UPDATE,
  IMSCM_AUTOCONFIG_CLIENT_REQUEST
};

/*
 * AutoConfig Data Type
 */
struct IMSCM_AUTOCONFIG_DATA {
  IMSCM_AUTOCONFIG_RECEIVE_TYPE configType;
  string autoConfigXml;
};


/*
 * Configuration Data Type
 * object used in onConfigurationChange()
 * callback
 */
struct IMSCM_CONFIG_DATA {
  QIMSCM_USER_CONFIG userConfig;
  QIMS_CM_DEVICE_CONFIG deviceConfig;
  IMSCM_AUTOCONFIG_DATA autoConfig;
};


/****************************************************************/
/*    Connection Data Types                                     */
/****************************************************************/


/*
 * Connection Event definitions
 */
enum IMSCM_CONNECTION_EVENT : uint32_t {

  /** Service is not registered. */
  IMSCONNECTION_EVENT_SERVICE_NOTREGISTERED,
  /** Service was registered successfully. */
  IMSCONNECTION_EVENT_SERVICE_REGISTERED,
  /** Service is allowed. */
  IMSCONNECTION_EVENT_SERVICE_ALLOWED,
  /** Service is not allowed. */
  IMSCONNECTION_EVENT_SERVICE_NOTALLOWED,
  /** Service is forcefully closed. */
  IMSCONNECTION_EVENT_SERVICE_FORCEFUL_CLOSE,
  /** Service has received HO Terminate event from HO Manager. */
  IMSCONNECTION_EVENT_SERVICE_TERMINATE_CONNECTION,
  /** Service is created successfully. */
  IMSCONNECTION_EVENT_SERVICE_CREATED,
};

struct IMSCM_CONNECTION_EVENT_DATA {
  IMSCM_CONNECTION_EVENT eEvent;
  string featureTag;
};
/*
 * Incoming Message Data Type
 */
struct IMSCM_CONN_INCOMING_MESSAGE {

  /** Message contents ( complete received SIP message). */
  vec<uint8_t>   pMessage;
  /** Address from where the SIP message is received. */
  string           recdAddr;
};

/*
 * Supported Protocol Type
 */
enum IMSCM_SIP_PROTOCOL : uint32_t {

  IMSCM_SIP_PROTOCOL_UDP,
  /* SIP message sent over UDP/via header has UDP. */
  IMSCM_SIP_PROTOCOL_TCP,
  /* SIP message sent over UDP/via header has UDP. */
  IMSCM_SIP_PROTOCOL_INVALID_MAX
};

/*
 * Message Type
 */
enum IMSCM_MESSAGE_TYPE : uint32_t {

  IMSCM_MESSAGE_TYPE_REQUEST,
  /* SIP REQUEST MESSAGE IDENTIFIER */
  IMSCM_MESSAGE_TYPE_RESPONSE,
  /* SIP RESPONSE MESSAGE IDENTIFIER */
  IMSCM_MESSAGE_TYPE_INVALID_MAX
  /* MAX INVALID VALUE */
};

/*
 * Message (SIP signal Data) Data Type
 */
struct IMSCM_CONN_MESSAGE {

  /** Outbound proxy name. */
  string         pOutboundProxy;
  /** Remote port where the message has to be sent */
  uint16_t        iRemotePort ;
  /** Protocol used in the SIP message. */
  IMSCM_SIP_PROTOCOL eProtocol ;
  /** Message type*/
  IMSCM_MESSAGE_TYPE eMessageType ;
  /** Call ID. */
  string         pCallId;
  /** Message content. */
  vec<uint8_t>    pMessage;
};
