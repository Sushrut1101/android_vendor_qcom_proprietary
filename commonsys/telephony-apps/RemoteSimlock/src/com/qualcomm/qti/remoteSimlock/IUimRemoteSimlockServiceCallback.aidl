/******************************************************************************
 * @file    IUimRemoteSimlockServiceCallback.aidl
 * @brief   This interface describes the APIs for the callback that a client
 *          which uses IUimRemoteSimlockService should implement in order to
 *          be notified of asynchronous indications.
 *
 * @version 00.00.03
 *
 * Copyright (c) 2017 - 2018 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 * ---------------------------------------------------------------------------
 *
 ******************************************************************************/

package com.qualcomm.qti.remoteSimlock;

interface IUimRemoteSimlockServiceCallback {
    /**
     * Simlock remote lock/unlock response.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param simlockResponse
     *    Integrity protected response of the remote lock/unlock operation
     *
     * @return None
     */
    void uimRemoteSimlockProcessSimlockDataResponse(in int token, in int responseCode,
         in byte[] simlockResponse);

    /**
     * Encrypted Key.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param encryptedKey
     *    Encrypted value of the key
     *
     * @return None
     */
    void uimRemoteSimlockGetSharedKeyResponse(in int token, in int responseCode,
         in byte[] encryptedKey);

    /**
     * Generated HMAC.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param hmacData
     *    HMAC generated on the input data
     *
     * @return None
     */
    void uimRemoteSimlockGenerateHMACResponse(in int token, in int responseCode,
         in byte[] hmacData);

    /**
     * Highest major and minor version of incoming blob
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param majorVersion
     *    Highest major version of the incoming blob
     *
     * @param minorVersion
     *    Highest minor version of the incoming blob
     *
     * @return None
     */
    void uimRemoteSimlockGetVersionResponse(in int token, in int responseCode,
         in int majorVersion, in int minorVersion);

    /**
     * SIMLOCK status response
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *    UIM_REMOTE_SIMLOCK_RESP_GET_TIME_FAILED = 2;
     *
     * @param unlockStatus
     *    UIM_REMOTE_SIMLOCK_STATE_LOCKED = 0
     *    UIM_REMOTE_SIMLOCK_STATE_TEMPORARY_UNLOCK = 1
     *    UIM_REMOTE_SIMLOCK_STATE_PERMANENT_UNLOCK = 2
     *
     * @param unlockTime
     *    Temporary unlock time remaining, valid when state is
     *    UIM_REMOTE_SIMLOCK_STATE_TEMPORARY_UNLOCK, response can be
     *    UIM_REMOTE_SIMLOCK_RESP_GET_TIME_FAILED if failed to get the time
     *
     * @return None
     */
    void uimRemoteSimlockGetSimlockStatusResponse(in int token, in int responseCode,
         in int unlockStatus, in long unlockTime);

    /**
     * Generated Simlock Request response.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *
     * @param requestData
     *    Simlock Request data generated by Simlock engine
     *
     * @return None
     */
    void uimRemoteSimlockGenerateRequestResponse(in int token, in int responseCode,
         in byte[] requestData);

    /**
     * Unlock timer response.
     *
     * @param token
     *
     * @param responseCode
     *    UIM_REMOTE_SIMLOCK_RESP_SUCCESS = 0;
     *    UIM_REMOTE_SIMLOCK_RESP_FAILURE = 1;
     *    UIM_REMOTE_SIMLOCK_RESP_TIMER_EXPIRED = 3;
     *
     * @param timerValue
     *    Unlock timer value started by simlock engine in seconds
     *
     * responseCode UIM_REMOTE_SIMLOCK_RESP_TIMER_EXPIRED if timer already started
     * once and expired. The request will not work until next UICC power cycle.
     *
     * @return None
     */
    void uimRemoteSimlockUnlockTimerResponse(in int token, in int responseCode,
         in int timerValue);
}

