// ============================================================================
// Copyright (c) 2018-2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// ============================================================================
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define ICert_PEM_FORMAT UINT8_C(0)
#define ICert_DER_FORMAT UINT8_C(1)

#define ICert_ERROR_BAD_KEY_ALG_COMBINATION INT32_C(10)
#define ICert_ERROR_VERIFY_FAIL INT32_C(11)
#define ICert_ERROR_ENCRYPT_FAIL INT32_C(12)
#define ICert_ERROR_FUNCTION_NOT_IMPLEMENTED INT32_C(13)

#define ICert_OP_sign 0
#define ICert_OP_verify 1
#define ICert_OP_encrypt 2
#define ICert_OP_getCert 3
#define ICert_OP_getCertId 4
#define ICert_OP_getServiceId 5
#define ICert_OP_getKeyParamsCBOR 6
#define ICert_OP_getCSRParamsCBOR 7
#define ICert_OP_getCertValidityRange 8

static inline int32_t
ICert_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ICert_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ICert_sign(Object self, const void *Bytes_ptr, size_t Bytes_len, uint32_t AlgId_val, void *SignedBytes_ptr, size_t SignedBytes_len, size_t *SignedBytes_lenout)
{
  ObjectArg a[3];
  a[0].bi = (ObjectBufIn) { Bytes_ptr, Bytes_len * 1 };
  a[1].b = (ObjectBuf) { &AlgId_val, sizeof(uint32_t) };
  a[2].b = (ObjectBuf) { SignedBytes_ptr, SignedBytes_len * 1 };

  int32_t result = Object_invoke(self, ICert_OP_sign, a, ObjectCounts_pack(2, 1, 0, 0));

  *SignedBytes_lenout = a[2].b.size / 1;

  return result;
}

static inline int32_t
ICert_verify(Object self, const void *Data_ptr, size_t Data_len, uint32_t AlgId_val, const void *Signature_ptr, size_t Signature_len, int32_t *Valid_ptr)
{
  ObjectArg a[4];
  a[0].bi = (ObjectBufIn) { Data_ptr, Data_len * 1 };
  a[1].b = (ObjectBuf) { &AlgId_val, sizeof(uint32_t) };
  a[2].bi = (ObjectBufIn) { Signature_ptr, Signature_len * 1 };
  a[3].b = (ObjectBuf) { Valid_ptr, sizeof(int32_t) };

  return Object_invoke(self, ICert_OP_verify, a, ObjectCounts_pack(3, 1, 0, 0));
}

static inline int32_t
ICert_encrypt(Object self, const void *Bytes_ptr, size_t Bytes_len, uint32_t EncryptAlgId_val, void *EncryptedBytes_ptr, size_t EncryptedBytes_len, size_t *EncryptedBytes_lenout)
{
  ObjectArg a[3];
  a[0].bi = (ObjectBufIn) { Bytes_ptr, Bytes_len * 1 };
  a[1].b = (ObjectBuf) { &EncryptAlgId_val, sizeof(uint32_t) };
  a[2].b = (ObjectBuf) { EncryptedBytes_ptr, EncryptedBytes_len * 1 };

  int32_t result = Object_invoke(self, ICert_OP_encrypt, a, ObjectCounts_pack(2, 1, 0, 0));

  *EncryptedBytes_lenout = a[2].b.size / 1;

  return result;
}

static inline int32_t
ICert_getCert(Object self, uint8_t Format_val, void *Cert_ptr, size_t Cert_len, size_t *Cert_lenout)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &Format_val, sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { Cert_ptr, Cert_len * 1 };

  int32_t result = Object_invoke(self, ICert_OP_getCert, a, ObjectCounts_pack(1, 1, 0, 0));

  *Cert_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
ICert_getCertId(Object self, uint8_t *CertId_ptr, size_t CertId_len, size_t *CertId_lenout)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { CertId_ptr, CertId_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, ICert_OP_getCertId, a, ObjectCounts_pack(0, 1, 0, 0));

  *CertId_lenout = a[0].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
ICert_getServiceId(Object self, uint8_t *ServiceId_ptr, size_t ServiceId_len, size_t *ServiceId_lenout)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { ServiceId_ptr, ServiceId_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, ICert_OP_getServiceId, a, ObjectCounts_pack(0, 1, 0, 0));

  *ServiceId_lenout = a[0].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
ICert_getKeyParamsCBOR(Object self, uint8_t *KeyParamsCBOR_ptr, size_t KeyParamsCBOR_len, size_t *KeyParamsCBOR_lenout)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { KeyParamsCBOR_ptr, KeyParamsCBOR_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, ICert_OP_getKeyParamsCBOR, a, ObjectCounts_pack(0, 1, 0, 0));

  *KeyParamsCBOR_lenout = a[0].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
ICert_getCSRParamsCBOR(Object self, uint8_t *CSRParamsCBOR_ptr, size_t CSRParamsCBOR_len, size_t *CSRParamsCBOR_lenout)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { CSRParamsCBOR_ptr, CSRParamsCBOR_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, ICert_OP_getCSRParamsCBOR, a, ObjectCounts_pack(0, 1, 0, 0));

  *CSRParamsCBOR_lenout = a[0].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
ICert_getCertValidityRange(Object self, int64_t *ValidFrom_ptr, uint32_t *ValidTo_ptr)
{
  ObjectArg a[1];
  struct {
    int64_t m_ValidFrom;
    uint32_t m_ValidTo;
  } o;
  a[0].b = (ObjectBuf) { &o, 12 };

  int32_t result = Object_invoke(self, ICert_OP_getCertValidityRange, a, ObjectCounts_pack(0, 1, 0, 0));

  *ValidFrom_ptr = o.m_ValidFrom;
  *ValidTo_ptr = o.m_ValidTo;

  return result;
}



