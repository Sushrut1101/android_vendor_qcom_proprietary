/*!
 * @file types.hal
 *
 * @cr
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 * @services Defines the external interface for VPP library.
 */

package vendor.qti.hardware.vpp@1.1;

enum ConstS32 : int32_t {
    VPP_HQV_CUSTOM_PAYLOAD_SZ = 256,

    VPP_CADE_LEVEL_MIN = 0,

    VPP_CADE_LEVEL_MAX = 100,

    VPP_CADE_CONTRAST_MIN = -50,

    VPP_CADE_CONTRAST_MAX = 50,

    VPP_CADE_SATURATION_MIN = -50,

    VPP_CADE_SATURATION_MAX = 50,

    VPP_TNR_LEVEL_MIN = 0,

    VPP_TNR_LEVEL_MAX = 100,

    VPP_CNR_LEVEL_MIN = 0,

    VPP_CNR_LEVEL_MAX = 100,

    VPP_AIE_CADE_LEVEL_MIN = 0,

    VPP_AIE_CADE_LEVEL_MAX = 100,

    VPP_AIE_LTM_LEVEL_MIN = 0,

    VPP_AIE_LTM_LEVEL_MAX = 100,

    VPP_AIE_LTM_SAT_GAIN_MIN = 0,

    VPP_AIE_LTM_SAT_GAIN_MAX = 100,

    VPP_AIE_LTM_SAT_OFFSET_MIN = 0,

    VPP_AIE_LTM_SAT_OFFSET_MAX = 100,

    VPP_AIE_LTM_ACE_STR_MIN = 0,

    VPP_AIE_LTM_ACE_STR_MAX = 100,

    VPP_AIE_LTM_ACE_BRI_L_MIN = 0,

    VPP_AIE_LTM_ACE_BRI_L_MAX = 100,

    VPP_AIE_LTM_ACE_BRI_H_MIN = 0,

    VPP_AIE_LTM_ACE_BRI_H_MAX = 100,

    VPP_SPLIT_PERCENT_MIN = 0,

    VPP_SPLIT_PERCENT_MAX = 100,

    VPP_SPLIT_PERCENT_DEFAULT = 100,

    VPP_RES_SD_MAX_W = 800,

    VPP_RES_SD_MAX_H = 600,

    VPP_RES_HD_MAX_W = 1366,

    VPP_RES_HD_MAX_H = 768,

    VPP_RES_FHD_MAX_W = 1920,

    VPP_RES_FHD_MAX_H = 1088,

    VPP_RES_UHD_MAX_W = 4096,

    VPP_RES_UHD_MAX_H = 2176,

    VPP_META_MAX_CNT = 64,

};

enum VppError : int32_t /* NOTE: type is guessed */ {
    VPP_OK = 0,

    VPP_ERR,

    VPP_PENDING,

    VPP_ERR_STATE,

    VPP_ERR_INVALID_CFG,

    VPP_ERR_PARAM,

    VPP_ERR_NO_MEM,

    VPP_ERR_RESOURCES,

    VPP_ERR_HW,

};

enum VppResolution : int32_t /* NOTE: type is guessed */ {
    VPP_RESOLUTION_SD,

    VPP_RESOLUTION_HD,

    VPP_RESOLUTION_FHD,

    VPP_RESOLUTION_UHD,

    VPP_RESOLUTION_MAX,

};

enum HqvMode : int32_t /* NOTE: type is guessed */ {
    HQV_MODE_OFF,

    HQV_MODE_AUTO,

    HQV_MODE_MANUAL,

    HQV_MODE_MAX,

};

/* #define HQV_CONTROL_GLOBAL_START  (HQV_CONTROL_CUST + 1) */

enum HqvControlType : int32_t /* NOTE: type is guessed */ {
    HQV_CONTROL_NONE,

    HQV_CONTROL_CADE,

    HQV_CONTROL_DI,

    HQV_CONTROL_TNR,

    HQV_CONTROL_CNR,

    HQV_CONTROL_AIE,

    HQV_CONTROL_FRC,

    HQV_CONTROL_EAR,

    HQV_CONTROL_QBR,

    HQV_CONTROL_MEAS,

    HQV_CONTROL_CUST,

    HQV_CONTROL_GLOBAL_DEMO,

    HQV_CONTROL_MAX,

};

enum HqvDiMode : int32_t /* NOTE: type is guessed */ {
    HQV_DI_MODE_OFF,

    HQV_DI_MODE_VIDEO_1F,

    HQV_DI_MODE_VIDEO_3F,

    HQV_DI_MODE_AUTO,

    HQV_DI_MODE_MAX,

};

enum HqvHueMode : int32_t /* NOTE: type is guessed */ {
    HQV_HUE_MODE_OFF,

    HQV_HUE_MODE_ON,

    HQV_HUE_MODE_MAX,

};

enum HqvSplitDirection : int32_t /* NOTE: type is guessed */ {
    HQV_SPLIT_LEFT_TO_RIGHT,

    HQV_SPLIT_RIGHT_TO_LEFT,

    HQV_SPLIT_TOP_TO_BOTTOM,

    HQV_SPLIT_BOTTOM_TO_TOP,

    HQV_SPLIT_MAX,

};

enum HqvFrcMode : int32_t /* NOTE: type is guessed */ {
    HQV_FRC_MODE_OFF,

    HQV_FRC_MODE_SMOOTH_MOTION,

    HQV_FRC_MODE_SLOMO,

    HQV_FRC_MODE_MAX,

};

enum HqvFrcLevel : int32_t /* NOTE: type is guessed */ {
    HQV_FRC_LEVEL_OFF,

    HQV_FRC_LEVEL_LOW,

    HQV_FRC_LEVEL_MED,

    HQV_FRC_LEVEL_HIGH,

    HQV_FRC_LEVEL_MAX,

};

enum HqvFrcInterp : int32_t /* NOTE: type is guessed */ {
    HQV_FRC_INTERP_1X,

    HQV_FRC_INTERP_2X,

    HQV_FRC_INTERP_3X,

    HQV_FRC_INTERP_4X,

    HQV_FRC_INTERP_MAX,

};

enum HqvQbrMode : int32_t /* NOTE: type is guessed */ {
    HQV_QBR_MODE_OFF,

    HQV_QBR_MODE_ON,

    HQV_QBR_MODE_MAX,

};

enum HqvEarMode : int32_t /* NOTE: type is guessed */ {
    HQV_EAR_MODE_OFF,

    HQV_EAR_MODE_BYPASS,

    HQV_EAR_MODE_LOW,

    HQV_EAR_MODE_MEDIUM,

    HQV_EAR_MODE_HIGH,

    HQV_EAR_MODE_STREAM_ADAPTIVE,

    HQV_EAR_MODE_FRAME_ADAPTIVE,

    HQV_EAR_MODE_MAX,

};

struct HqvCtrlCade {
    /*! Valid values: HQV_MODE_OFF, HQV_MODE_AUTO, HQV_MODE_MANUAL */
    /* enum */ HqvMode mode;

    /*! Range: 0 - 100 */
    uint32_t cadeLevel;

    /*! Range: (-50) - 50 */
    int32_t contrast;

    /*! Range: (-50) - 50 */
    int32_t saturation;

};

struct HqvCtrlTnr {
    /*! Valid values: HQV_MODE_OFF, HQV_MODE_AUTO, HQV_MODE_MANUAL */
    /* enum */ HqvMode mode;

    /*! Range: 0 - 100 */
    uint32_t level;

};

struct HqvCtrlCnr {
    /*! Valid values: HQV_MODE_OFF, HQV_MODE_AUTO, HQV_MODE_MANUAL */
    /* enum */ HqvMode mode;

    /*! Range: 0 - 100 */
    uint32_t level;

};

struct HqvCtrlAie {
    /*! Valid values: HQV_MODE_OFF, HQV_MODE_AUTO, HQV_MODE_MANUAL */
    /* enum */ HqvMode mode;

    /*! Valid values: HQV_HUE_MODE_ON, HQV_HUE_MODE_OFF */
    /* enum */ HqvHueMode hueMode;

    /*! Range: 0 - 100 */
    uint32_t cadeLevel;

    /*! Range: 0 - 100 */
    uint32_t ltmLevel;

    /*! Range: 0 - 100 */
    uint32_t ltmSatGain;

    /*! Range: 0 - 100 */
    uint32_t ltmSatOffset;

    /*! Range: 0 - 100 */
    uint32_t ltmAceStr;

    /*! Range: 0 - 100 */
    uint32_t ltmAceBriL;

    /*! Range: 0 - 100 */
    uint32_t ltmAceBriH;
};

struct HqvCtrlDi {
    /*! Valid values: HQV_DI_MODE_OFF, HQV_DI_MODE_1F, HQV_DI_MODE_3F */
    /* enum */ HqvDiMode mode;

};

struct HqvCtrlFrc {
    /*! Valid values: HQV_FRC_MODE_OFF, HQV_FRC_MODE_SMOOTH_MOTION, HQV_FRC_MODE_SLOMO */
    /* enum */ HqvFrcMode mode;

    /*! Valid values: HQV_FRC_LEVEL_OFF, HQV_FRC_LEVEL_LOW, HQV_FRC_LEVEL_MED, HQV_FRC_LEVEL_HIGH */
    /* enum */ HqvFrcLevel level;

    /*! Valid values: HQV_FRC_INTERP_1X, HQV_FRC_INTERP_2X, HQV_FRC_SLOMO_3X, HQV_FRC_INTERP_4X */
    /* enum */ HqvFrcInterp interp;

};

struct HqvCtrlQbr {
    /* enum */ HqvQbrMode mode;

};

struct HqvCtrlEar {
    /* enum */ HqvEarMode mode;

};

struct HqvCtrlMeas {
    uint32_t enable;

};

struct HqvCtrlGlobalDemo {
    /*! Range: 0 - 100 */
    uint32_t processPercent;

    /* enum */ HqvSplitDirection processDirection;

};

struct HqvCtrlCustom {
    uint32_t id;

    uint32_t len;

    int8_t /* NOTE: char */[ConstS32:VPP_HQV_CUSTOM_PAYLOAD_SZ] data;

};

struct HqvControl {
    /*!
     * HQV_MODE_OFF: HQV is turned off and hardware will transfer buffers from
     * input to output.
     *
     * HQV_MODE_AUTO: HQV will automatically determine the best settings for
     * the applicable parameters. HQV controls will be ignored, with the
     * exception of the custom control.
     *
     * HQV_MODE_MANUAL: HQV will apply the settings in the corresponding HQV
     * controls.
     */
    /* enum */ HqvMode mode;

    /*!
     * This field is only valid if mode is set to HQV_MODE_MANUAL or
     * HQV_MODE_AUTO (custom and global controls are allowed in AUTO). Specifies the
     * HQV control that is being set. Corresponds to one of the fields in the union.
     */
    /* enum */ HqvControlType ctrlType;

    union  Control{
        /* struct */ HqvCtrlCade cade;

        /* struct */ HqvCtrlTnr tnr;

        /* struct */ HqvCtrlCnr cnr;

        /* struct */ HqvCtrlAie aie;

        /* struct */ HqvCtrlDi di;

        /* struct */ HqvCtrlFrc frc;

        /* struct */ HqvCtrlEar ear;

        /* struct */ HqvCtrlQbr qbr;

        /* struct */ HqvCtrlMeas meas;

        /* struct */ HqvCtrlCustom custom;

        /* struct */ HqvCtrlGlobalDemo demo;

    }u;

};

enum VppCodecType : int32_t /* NOTE: type is guessed */ {
    VPP_CODEC_TYPE_UNKNOWN,

    VPP_CODEC_TYPE_AVC,

    VPP_CODEC_TYPE_DIVX4,

    VPP_CODEC_TYPE_DIVX,

    VPP_CODEC_TYPE_DIVX311,

    VPP_CODEC_TYPE_MPEG4,

    VPP_CODEC_TYPE_MPEG2,

    VPP_CODEC_TYPE_VC1,

    VPP_CODEC_TYPE_WMV,

    VPP_CODEC_TYPE_H263,

    VPP_CODEC_TYPE_HEVC,

    VPP_CODEC_TYPE_VP8,

    VPP_CODEC_TYPE_VP9,

    VPP_CODEC_TYPE_MAX,

};

enum VidPropType : int32_t /* NOTE: type is guessed */ {
    VID_PROP_CODEC,

    VID_PROP_NON_REALTIME,

    VID_PROP_OPERATING_RATE,

    VID_PROP_MAX,

};

struct VidPropCodec {
    /*! Codec type.  Can be used by an IP block that needs this info */
    /* enum */ VppCodecType eCodec;

};

struct VidPropNonRealtime {
    /*! Setting to 1 will indicate this session has non-realtime processing requirements */
    uint32_t bNonRealtime;

};

struct VidPropOperatingRate {
    /*!
     * If zero (default), use timestamp calculated framerate;
     * Otherwise use this value. The rate should be an integer representing frames per second
     */
    uint32_t u32OperatingRate;

};

struct VideoProperty {
    /*!
     * Specifies the HQV property that is being set. Corresponds to one of the fields
     * in the union.
     */
    /* enum */ VidPropType propertyType;

    union  property{
        /* struct */ VidPropCodec codec;

        /* struct */ VidPropNonRealtime nonRealtime;

        /* struct */ VidPropOperatingRate operatingRate;

    }u;

};

enum VppSessionFlags : int32_t /* NOTE: type is guessed */ {
    VPP_SESSION_SECURE = (1 << 0),

    VPP_SESSION_NON_REALTIME = (1 << 1),

};

enum VppColorFormat : int32_t /* NOTE: type is guessed */ {
    VPP_COLOR_FORMAT_NV12_VENUS,

    VPP_COLOR_FORMAT_NV21_VENUS,

    VPP_COLOR_FORMAT_P010,

    VPP_COLOR_FORMAT_UBWC_NV12,

    VPP_COLOR_FORMAT_UBWC_NV21,

    VPP_COLOR_FORMAT_UBWC_TP10,

    VPP_COLOR_FORMAT_MAX,

};

enum VppPort : int32_t /* NOTE: type is guessed */ {
    VPP_PORT_INPUT,

    VPP_PORT_OUTPUT,

    VPP_PORT_MAX,

};

struct VppPortFactor {
    uint32_t add;

    uint32_t mul;

};

struct VppPortParam {
    uint32_t height;

    uint32_t width;

    uint32_t stride;

    uint32_t scanlines;

    /* enum */ VppColorFormat fmt;

};

struct VppRequirements {
    uint32_t retStatus;

    uint64_t cookie;

    /* struct */ VppPortFactor[VppResolution:VPP_RESOLUTION_MAX] inFactor;

    /* struct */ VppPortFactor[VppResolution:VPP_RESOLUTION_MAX] outFactor;

    uint64_t inColorFmtMask;

    struct Metadata {
        /*!
         * Number of metadata required by VPP. Denotes the size of meta.
         */
        uint32_t cnt;

        /*!
         * Array of size cnt, each entry containing a metadata required by
         * the VPP.
         */
        uint32_t[ConstS32:VPP_META_MAX_CNT] meta;

    }metadata;

};

enum VppEventType : int32_t /* NOTE: type is guessed */ {
    VPP_EVENT_FLUSH_DONE = (1 << 0),

    VPP_EVENT_RECONFIG_DONE = (1 << 1),

    VPP_EVENT_ERROR = (1 << 2),

};

struct VppEvent {
    /*! Specifies the event. */
    /* enum */ VppEventType type;

    union  event{
        /*! Valid when the event type is VPP_EVENT_FLUSH_DONE. */
        struct FlushDone {
            /*! The port that completed flushing */
            /* enum */ VppPort port;

        }flushDone;

        /*! Valid when the event type is VPP_EVENT_RECONFIG_DONE. */
        struct PortReconfigDone {
            /*!
             * Status of the reconfigure. If this is set to error, then the
             * client should bypass the VPP.
             */
            uint32_t reconfigStatus;

            /*! The new requirements of VPP. */
            /* struct */ VppRequirements req;

        }reconfigDone;

    }u;

};

enum VppBufferFlag : int32_t /* NOTE: type is guessed */ {
    VPP_BUFFER_FLAG_EOS = (1 << 0),

    VPP_BUFFER_FLAG_DATACORRUPT = (1 << 1),

    VPP_BUFFER_FLAG_SYNCFRAME = (1 << 2),

    VPP_BUFFER_FLAG_READONLY = (1 << 3),

};

struct VppMemBuffer {
    /*! File descriptor of the ion buffer. */
    handle handleFd;

    /*! Offset of the buffer from the base address, in bytes */
    int32_t offset;

    /*! Physically allocated buffer length, in bytes */
    uint32_t allocLen;

    /*! Filled buffer length, in bytes */
    uint32_t filledLen;

    /*!
     * The number of bytes that *may* contain data.
     *
     * In the typical scenario where there is both pixel data and extra data in
     * a the buffer, this field shall describe the valid data length of each
     * section.  That is, for the pixel region, valid_data_len will describe
     * the maximum number of bytes that can be occupied by pixel data, and for
     * the extra data region, valid_data_len will describe the maximum number
     * of bytes that can be occupied by the extra data. In such a case,
     * alloc_len shall be equal for both the pixel data and the extra data
     * regions.
     *
     * In the case where a single physical buffer contains multiple buffers,
     * this field is used to describe just the memory region that is being
     * described by this structure. As an example, if there are multiple extra
     * data buffers in one physical buffer, the valid_data_len for each extra
     * data buffer shall equal the maximum number of bytes that a specific
     * extra data region data may occupy in that buffer.  In this case, the
     * alloc_len for each buffer segment in the extradata buffer will be equal.
     */
    uint32_t validDataLen;
};

struct VppBuffer {
    /* struct */ VppMemBuffer pixel;

    /* struct */ VppMemBuffer extradata;

    /*! Buffer flags, as defined by enum vpp_buffer_flag */
    uint32_t flags;

    /*! Timestamp in microseconds */
    uint64_t timestamp;

    /*! Cookie to be copied from the input buffer to the output buffer. */
    uint64_t /* * */ cookieInToOut;

    /*! Pointer to a gralloc handle */
    handle pvGralloc;

    uint32_t bufferId;
};
