/*!
 * @file IVppService.hal
 *
 * @cr
 * Copyright (c) 2020 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 *
 * @services Defines the external interface for VPP Service.
 */

package vendor.qti.hardware.vpp@2.0;

import vendor.qti.hardware.vpp@2.0::types;
import vendor.qti.hardware.vpp@2.0::IVppServiceCb;

interface IVppService {
    /*!
     * @brief       Synchronous. Initialize the VPP session.
     *
     * @description Initializes the VPP session. Session level parameters shall
     *              be passed during this time. Such information can refer to
     *              content protection state of the session.
     *
     * @input       u32Flags    Indicates session level parameters
     * @input       cb          The set of callbacks for events of interest.
     *
     * @return      VPP_OK      if there is no error
     *              VPP_ERR     if failure
     */
    initSession(uint32_t u32Flags, IVppServiceCb cb) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Terminates the VPP session.
     *
     * @description Indicate to the VPP Service that this session is no longer
     *              needed. As a result, this will invalidate the context and no
     *              subsequent calls may be made to the VPP Service without first
     *              calling vppInit.
     *
     *              It is strongly suggested that vppFlush is called first, and
     *              all buffers are returned to the client, prior to calling this
     *              function.
     *
     * @input       void
     *
     * @return      void
     */
    termSession();

    /*!
     * @brief       Synchronous. Set the parameters for a given port.
     *
     * @description This function should be called at least once for each port.
     *              When the VPP Service has received a call for both ports, it
     *              shall validate the port params received.
     *
     * @input       ePort       The port to set the parameters on
     * @input       stParam     The parameters to set on the port
     *
     * @return      VPP_OK          if no error
     *              VPP_PENDING     if waiting for parameter on another port
     *              VPP_ERR         if there was an error
     */
    setParameter(VppPort ePort, VppPortParam stParam)
        generates (VppError eResult);

    /*!
     * @brief       Synchronous. Populates the vpp requirements for the
     *              configured session.
     *
     * @description The return parameters from this function will indicate all
     *              the requirements for the session (based on the controls
     *              and port parameters).
     *
     * @input       stInputParam  Input port parameters
     * @input       stOutputParam Output port parameters
     *
     * @output      reqRet   Requirements from VPP for this session
     *
     * @return      void
     */
    getRequirements(VppPortParam stInputParam, VppPortParam stOutputParam)
        generates (VppRequirements reqRet);

    /*!
     * @brief       Synchronous. Open the vpp session.
     *
     * @description Upon returning from this function, vpp shall transition
     *              into active video state, where buffers can then be exchanged.
     *
     * @input       void
     *
     * @return      VPP_OK          if vpp transitions to active state.
     *              VPP_ERR         if there is an error
     */
    openSession() generates (VppError eResult);

    /*!
     * @brief       Synchronous. Close the vpp session.
     *
     * @description Upon returning from this function, vpp shall transition
     *              into inited video state.
     *
     * @input       void
     *
     * @return      VPP_OK          if vpp transitions to inited state.
     *              VPP_ERR         if there is an error
     */
    closeSession() generates (VppError eResult);

    /*!
     * @brief       Asynchronous. Enqueue a buffer to the specified port.
     *
     * @description Gives a buffer to the VPP Service. If the port is on the input
     *              port, this will indicate that this buffer should be processed
     *              by the VPP Service. If the port is on the output port, this
     *              will indicate that this buffer should be written into.
     *
     *              It is possible that a buffer that is queued on the input port
     *              is returned on the output port.
     *
     * @input       ePort        The port on which the buffer is queued
     * @input       stBuf        The buffer descriptor
     *
     * @return      VPP_OK          if there is no error with accepting the buffer
     *              VPP_ERR         if there is an error
     */
    queueBuf(VppPort ePort, VppBuffer stBuf) generates (VppError eResult);

    /*!
     * @brief       Asynchronous. Request for a port reconfiguration.
     *
     * @description Requests for a port reconfiguration. The new input and output
     *              port sizes shall be given to the VPP Service with this request.
     *
     *              Upon receiving a reconfigure request, it is expected that no
     *              more input buffers shall be queued on the input port. Output
     *              buffers are expected to continue to be queued, so that there
     *              are enough output buffers for the VPP to process all of the
     *              pending input buffers.
     *
     *              When all of the input buffers have been processed, VPP Service
     *              shall send an event indicating that the reconfigure has been
     *              completed. With this event, VPP will convey a new set of
     *              requirements.
     *
     *              It is recommended that after the PORT_RECONFIGURE_EVENT has
     *              been received, the client flushes both the input and output
     *              ports of the VPP, prior to queuing any new buffers.
     *
     * @input       stInputParam   The new input port parameters
     * @input       stOutputParam  The new output port parameters
     *
     * @return      VPP_OK          if the request was accepted
     *              VPP_ERR         if the request can not be accepted
     */
    reconfigure(VppPortParam stInputParam, VppPortParam stOutputParam)
        generates (VppError eResult);

    /*!
     * @brief       Asynchronous. Request that a port is flushed.
     *
     * @description Requests that a given port is flushed. This call is
     *              asynchronous. Upon receiving this call, VPP will queue the
     *              request. All of the buffers that are on the specified port
     *              shall be returned. If there are any in flight buffers, those
     *              buffers will finish processing first and be returned via
     *              input_buffer_done or output_buffer done callbacks. Once all in
     *              flight buffers have been processed, then any buffers that are
     *              in the queues on the specified port shall be returned, with
     *              their filled_len set to 0.
     *
     *              Once the flush for the specified port has been returned,
     *              VPP will raise the VPP_EVENT_FLUSH_DONE event, indicating the
     *              port that has been flushed.
     *
     * @input       ePort        The port to flush
     *
     * @return      VPP_OK          if the request was accepted
     *              VPP_ERR         if the request can not be accepted
     */
    flush(VppPort ePort) generates (VppError eResult);

    /*!
     * @brief       Asynchronous. Request all the input buffers to be drained.
     *
     * @description Requests that all the input buffers to be drained. This call
     *              is asynchronous. Upon receiving this call, VPP will queue the
     *              request. All of the input buffers that are queued shall be
     *              processed and returned.
     *
     *              Once the drain has been completed, VPP will raise the
     *              VPP_EVENT_DRAIN_DONE event, indicating the drain has
     *              been completed.
     *
     * @input       void
     *
     * @return      VPP_OK          if the request was accepted
     *              VPP_ERR         if the request can not be accepted
     */
    drain() generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP mode.
     *
     * @description Indicate to the VPP Service that the mode, specified
     *              in eMode should be set.
     *
     * @input       eMode       Top level mode setting
     *
     * @return      VPP_OK      if no error with accepting the mode
     *              VPP_ERR     if there is an error
     */
    setCtrlVppMode(VppMode eMode) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP CADE parameters.
     *
     * @description Indicate to the VPP Service that the CADE controls, specified
     *              in stCtrlCade should be set.
     *
     * @input       stCtrlCade  CADE control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlCade(VppCtrlCade stCtrlCade) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP TNR parameters.
     *
     * @description Indicate to the VPP Service that the TNR controls, specified
     *              in stCtrlTnr should be set.
     *
     * @input       stCtrlTnr   TNR control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlTnr(VppCtrlTnr stCtrlTnr) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP AIE parameters.
     *
     * @description Indicate to the VPP Service that the AIE controls, specified
     *              in stCtrlAie should be set.
     *
     * @input       stCtrlAie   AIE control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlAie(VppCtrlAie stCtrlAie) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP MCNR parameters.
     *
     * @description Indicate to the VPP Service that the MCNR controls, specified
     *              in stCtrlMcnr should be set.
     *
     * @input       stCtrlMcnr  MCNR control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlMcnr(VppCtrlMcnr stCtrlMcnr) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP DI parameters.
     *
     * @description Indicate to the VPP Service that the DI controls, specified
     *              in stCtrlDi should be set.
     *
     * @input       stCtrlDi    DI control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlDi(VppCtrlDi stCtrlDi) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP FRC parameters.
     *
     * @description Indicate to the VPP Service that the FRC controls, specified
     *              in stCtrlFrc should be set.
     *
     * @input       stCtrlFrc   FRC control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlFrc(VppCtrlFrc stCtrlFrc) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP QBR parameters.
     *
     * @description Indicate to the VPP Service that the QBR controls, specified
     *              in stCtrlQbr should be set.
     *
     * @input       stCtrlQbr   QBR control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlQbr(VppCtrlQbr stCtrlQbr) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP EAR parameters.
     *
     * @description Indicate to the VPP Service that the EAR controls, specified
     *              in stCtrlEar should be set.
     *
     * @input       stCtrlEar   EAR control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlEar(VppCtrlEar stCtrlEar) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP MEAS parameters.
     *
     * @description Indicate to the VPP Service that the MEAS controls, specified
     *              in stCtrlMeas should be set.
     *
     * @input       stCtrlMeas  MEAS control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlMeas(VppCtrlMeas stCtrlMeas) generates (VppError eResult);

    /*!
     * @brief       Synchronous. Configures VPP SplitScreen parameters.
     *
     * @description Indicate to the VPP Service that the SplitScreen controls,
     *              specified in stCtrlSplitScreen should be set.
     *
     * @input       stCtrlSplitScreen  SplitScreen control parameters
     *
     * @return      VPP_OK      if no error with accepting the control parameters
     *              VPP_ERR     if there is an error
     */
    setCtrlSplitScreen(VppCtrlSplitScreen stCtrlSplitScreen)
        generates (VppError eResult);

    /*!
     * @brief       Synchronous. Sets VPP video codec property.
     *
     * @description Indicate to the VPP Service that a video codec property,
     *              specified by eCodec, should be set. The property will
     *              be stored in the context, available for any blocks that may
     *              need it.
     *
     * @input       eCodec          Codec type
     *
     * @return      VPP_OK          if the property was accepted and stored
     *              VPP_ERR         if the property was not accepted
     */
    setVidPropCodec(VppCodecType eCodec)
        generates (VppError eResult);

    /*!
     * @brief       Synchronous. Sets VPP video codec property.
     *
     * @description Indicate to the VPP Service that a video non-real-time
     *              property, specified by bNonRealtime, should be set. The
     *              property will be stored in the context, available for any
     *              blocks that may need it.
     *
     * @input       bNonRealtime    Setting to 1 will indicate this session has
     *                              non-real-time processing requirements.
     *
     * @return      VPP_OK          if the property was accepted and stored
     *              VPP_ERR         if the property was not accepted
     */
    setVidPropNonRealTime(uint32_t bNonRealtime)
        generates (VppError eResult);

    /*!
     * @brief       Synchronous. Sets VPP video operating rate property.
     *
     * @description Indicate to the VPP Service that a video operating-rate,
     *              specified by u32OperatingRate, should be set. The property will
     *              be stored in the context, available for any blocks that may
     *              need it.
     *
     * @input       u32OperatingRate If zero (default), use timestamp calculated
     *                               framerate, otherwise use this value. The
     *                               rate should be an integer representing
     *                               frames per second.
     *
     * @return      VPP_OK          if the property was accepted and stored
     *              VPP_ERR         if the property was not accepted
     */
    setVidPropOperatingRate(uint32_t u32OperatingRate)
        generates (VppError eResult);
};