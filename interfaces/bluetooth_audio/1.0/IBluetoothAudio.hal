/***************************************************************************
* Copyright (c) 2017 Qualcomm Technologies, Inc.
* All Rights Reserved.
* Confidential and Proprietary - Qualcomm Technologies, Inc.
***************************************************************************/

package com.qualcomm.qti.bluetooth_audio@1.0;

import IBluetoothAudioCallbacks;

/*
 * Bluetooth audio interface for split a2dp feature. This interface is defined
 * to communicate between audio primary hal and BT host stack to send stream
 * start, stop, suspend request and fetch codec configuration.
 */

interface IBluetoothAudio {
    /**
     * Register callbacks
     *
     * This method should be used by BT stack to register callbacks.
     * Callbacks are invoked when the stream control commands are called
     * from the audio primary hal.
     *
     * @param callback implements IBluetoothAudioCallbacks which will
     *    receive callbacks when audio primary hal calls stream control
     *    commands.
     */
    initialize_callbacks(IBluetoothAudioCallbacks callback);

    /**
     * Update Stream start status for stream start request
     *
     * @param Status
     */
    oneway a2dp_on_started(Status status);

    /**
     * Update Stream suspend status for suspend start request
     *
     * @param Status
     */
    oneway a2dp_on_suspended(Status status);

    /**
     * Update Stream stop status for stream stop request
     *
     * @param Status
     */
    oneway a2dp_on_stopped(Status status);

    /**
     * Update codec config for get codec config request
     *
     * @param Status, vec<uint8_t>
     */
    oneway a2dp_on_get_codec_config(Status status, vec<uint8_t> codec_cfg);

    /**
     * Update check a2dp status for check a2dp ready request
     *
     * @param Status
     */
    oneway a2dp_on_check_ready(Status status);

    /**
     * Update multicast status
     *
     * @param uint8_t
     */
    oneway a2dp_on_get_multicast_status(uint8_t state);

    /**
     * Update number of connected devices
     *
     * @param uint8_t
     */
    oneway a2dp_on_get_num_connected_devices(uint8_t num_dev);

    /**
     * Update connection status for get connection status request
     *
     * @param Status
     */
    oneway a2dp_on_get_connection_status(Status status);

    /**
     * Update sink latency value for get sink latency request
     *
     * @param uint16_t
     */
    oneway a2dp_on_get_sink_latency(uint16_t sink_latency);

    /**
     * Deregister callbacks
     */
    oneway deinitialize_callbacks();

};
