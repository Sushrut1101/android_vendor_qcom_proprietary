// =======================================================================
// Copyright (c) 2015-2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// =======================================================================

/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "IIO.h"

#define IIO_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        return prefix##retain(me); \
      } \
      case IIO_OP_getLength: { \
        if (k != ObjectCounts_pack(0, 1, 0, 0) || \
          a[0].b.size != 8) { \
          break; \
        } \
        uint64_t *len_ptr = (uint64_t*) a[0].b.ptr; \
        return prefix##getLength(me, len_ptr); \
      } \
      case IIO_OP_readAtOffset: { \
        if (k != ObjectCounts_pack(1, 1, 0, 0) || \
          a[0].b.size != 8) { \
          break; \
        } \
        const uint64_t *offset_ptr = (const uint64_t*) a[0].b.ptr; \
        void *data_ptr = (void*) a[1].b.ptr; \
        size_t data_len = a[1].b.size / 1; \
        int32_t r = prefix##readAtOffset(me, *offset_ptr, data_ptr, data_len, &data_len); \
        a[1].b.size = data_len * 1; \
        return r; \
      } \
      case IIO_OP_writeAtOffset: { \
        if (k != ObjectCounts_pack(2, 0, 0, 0) || \
          a[0].b.size != 8) { \
          break; \
        } \
        const uint64_t *offset_ptr = (const uint64_t*) a[0].b.ptr; \
        const void *data_ptr = (const void*) a[1].b.ptr; \
        size_t data_len = a[1].b.size / 1; \
        return prefix##writeAtOffset(me, *offset_ptr, data_ptr, data_len); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }


