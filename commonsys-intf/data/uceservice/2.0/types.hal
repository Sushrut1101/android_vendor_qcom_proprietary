/*********************************************************************
 Copyright (c) 2017-2018 Qualcomm Technologies, Inc.
 All Rights Reserved.
 Confidential and Proprietary - Qualcomm Technologies, Inc.
**********************************************************************/

package com.qualcomm.qti.uceservice@2.0;


enum UceStatusCode : uint32_t {
  SUCCESS,
  FAILURE,
  SUCCESS_ASYNC_UPDATE,
  INVALID_SERVICE_HANDLE,
  INVALID_LISTENER_HANDLE,
  INVALID_PARAM,
  FETCH_ERROR,
  REQUEST_TIMEOUT,
  INSUFFICIENT_MEMORY,
  LOST_NET,
  NOT_SUPPORTED,
  NOT_FOUND,
  SERVICE_UNAVAILABLE,
  NO_CHANGE_IN_CAP,
  INVALID_FEATURE_TAG,
  SERVICE_UP,
  SERVICE_DOWN,
  SERVICE_UNKNOWN
};


struct UceStatus {
  UceStatusCode status;
  string description;
};

struct RcsFeatureTag {
  /** RCS feature tag.
      Format of featureTag described in
      GSMA RCS 5.3 documentation */
  string featureTag;
};

/* RCS (Rich Client Suite) Features supported on device */
struct CapabilityInfo {
  /** Instant Message session feature support. */
  bool imSupported;

  /** File transfer feature support. */
  bool ftSupported;

  /** File transfer Thumbnail feature support. */
  bool ftThumbSupported;

  /** File transfer Store and forward feature support. */
  bool ftSnFSupported;

  /** File transfer over HTTP feature support. */
  bool ftHttpSupported;

  /** Image sharing feature support. */
  bool imageShareSupported;

  /** Video sharing during a CS call support -- IR-74. */
  bool videoShareDuringCSSupported;

  /** Video sharing outside of voice call support -- IR-84. */
  bool videoShareSupported;

  /** Social presence feature support. */
  bool socialPresenceSupported;

  /** Presence discovery feature support. */
  bool capDiscViaPresenceSupported;

  /** IP voice call feature support (IR-92/IR-58). */
  bool ipVoiceSupported;

  /** IP video call feature support (IR-92/IR-58). */
  bool ipVideoSupported;

  /** IP Geo location Pull using File Transfer feature support. */
  bool geoPullFtSupported;

  /** IP Geo location Pull feature support. */
  bool geoPullSupported;

  /** IP Geo location Push feature support. */
  bool geoPushSupported;

  /** Standalone messaging feature support. */
  bool smSupported;

  /** Full Store and Forward Group Chat information feature. */
  bool fullSnFGroupChatSupported;

  /** RCS IP Voice call feature support.  */
  bool rcsIpVoiceCallSupported;

  /** RCS IP Video call feature support.  */
  bool rcsIpVideoCallSupported;

  /** RCS IP Video call feature support.  */
  bool rcsIpVideoOnlyCallSupported;

  /** List of supported extensions.
      used for custom Feature Tags
      Please refer to GSMA RCS 5.3 documentation
      for the format of feature Tags */
  vec<string> mExts;

  /** Time used to compute when to query again.
   *  Wallclock time of format type NTP (Network Time Protocol)
   */
  int64_t capTimestamp;
};




/** *************************************
 * Start of Presence Service Data Types *
 ****************************************/

struct PresenceCapabilityInfo {
  /** SIP or TEL URI of the contact
   * the type of URI is dependent on the network.
   */
  string contactUri;
  /* RCS capabilites of the contact */
  CapabilityInfo capInfo;
};

enum PresenceCmdId : int32_t {
  /** Command ID corresponding to function Publish(). */
  PUBLISHMYCAP,

  /** Command ID corresponding to function GetContactCap(). */
  GETCONTACTCAP,

  /** Command ID corresponding to function GetContactListCap(). */
  GETCONTACTLISTCAP,

  /** Command ID corresponding to function SetNewFeatureTag(). */
  SETNEWFEATURETAG,

  /** Command ID corresponding to API ReenableService(). */
  REENABLE_SERVICE,

  /** Command ID is unknown. */
  UNKNOWN,
};

struct PresCmdStatus {
  /** Command ID to identify the API request */
  PresenceCmdId cmdId;
  /** final status of the request placed */
  UceStatusCode status;
  /** client token provided by the client
   * for any API request made over IPresenceSerivce
   */
  int64_t userData;
  /** request ID generated by presence service */
  int32_t requestId;
};

enum PresPublishTriggerType : int32_t {
  /** ETag expired. */
  ETAG_EXPIRED,
  /** Move to LTE with VoPS disabled. */
  MOVE_TO_LTE_VOPS_DISABLED,
  /** Move to LTE with VoPS enabled. */
  MOVE_TO_LTE_VOPS_ENABLED,
  /** Move to eHRPD. */
  MOVE_TO_EHRPD,
  /** Move to HSPA+. */
  MOVE_TO_HSPAPLUS,
  /** Move to 3G. */
  MOVE_TO_3G,
  /** Move to 2G. */
  MOVE_TO_2G,
  /** Move to WLAN */
  MOVE_TO_WLAN,
  /** Move to IWLAN */
  MOVE_TO_IWLAN,
  /** Trigger is unknown. */
  UNKNOWN,
};

enum ResInstantceState : int32_t {
  /** capability polling state on network active */
  ACTIVE,
  /** capability polling state on network pending */
  PENDING,
  /** capability polling state on network terminated */
  TERMINATED,
  /** capability polling state on network unknown */
  UNKNOWN,
};

struct PresTupleInfo {
  /** RCS feature tag provided by network.
      Format of featureTag described in
      GSMA RCS 5.3 documentation */
  string featureTag;
  /** SIP or TEL URI of the contact
   * the type of URI is dependent on the network.
   */
  string contactUri;
  /** Wallclock time of format type NTP (Network Time Protocol) */
  string timestamp;
};

struct PresResInstanceInfo {
  /** capability polling state on network */
  ResInstantceState resInstanceState;
  /** network generated ID alpha numeric string */
  string id;
  /** network generated reason */
  string reason;
  /** SIP or TEL URI of the contact
   * the type of URI is dependent on the network.
   * this is generated by network
   */
  string presentityUri;
  /** array of RCS features supported */
  vec<PresTupleInfo> mTupleInfoArray;
};

struct PresResInfo {
  /** SIP or TEL URI of the contact
   * the type of URI is dependent on the network.
   */
  string resUri;
  /** network preferred contact name
   *  this is usually the phone number
   */
  string displayName;
  PresResInstanceInfo instanceInfo;
};

enum PresSubscriptionState : int32_t {
  /** subscription state on network active */
  ACTIVE,
  /** subscription state on network pending */
  PENDING,
  /** subscription state on network terminated */
  TERMINATED,
  /** subscription state on network unknown */
  UNKNOWN,
};

struct PresRlmiInfo {
  /** SIP or TEL URI of the contact
   * the type of URI is dependent on the network.
   */
  string uri;
  int32_t version;
  bool fullState;
  string listname;
  /** Request ID provided in IPresenceListener.cmdStatus() callback */
  int32_t requestId;
  /** subscription state on network */
  PresSubscriptionState presSubscriptionState;
  /** Wallclock time of format type NTP (Network Time Protocol) */
  int32_t subscriptionExpireTime;
  /** reason generated by network for subscription termination */
  string subscriptionTerminatedReason;
};

enum MediaInfoType : int32_t {
  CAP_NONE,
  /** voice capability */
  CAP_FULL_AUDIO_ONLY,
  /** voice and video capability */
  CAP_FULL_AUDIO_AND_VIDEO,
  CAP_UNKNOWN,
};

struct PresServiceInfo {
  /** media capability for a RCS feature */
  MediaInfoType mediaCap;
  /** Service ID for Rcs Feature.
      Format as per GSMA RCS 5.3 documentation */
  string serviceId;
  /** Service description for Rcs Feature.
      Format as per GSMA RCS 5.3 documentation */
  string serviceDesc;
  /** Service version for Rcs Feature.
      Format as per GSMA RCS 5.3 documentation */
  string serviceVer;
};

struct PresSipResponse {
  /** command ID to map to the request API in IPresenceService */
  PresenceCmdId cmdId;
  /** request ID generated by presence service
   *  this is notified in IPresenceListener.cmdStatus() API
   */
  int32_t requestId;
  /** network generated error code
   *  this is compliant to  RFC 3261
   */
  uint16_t sipResponseCode;
  /** time to retry in secs
   *  this is also network generated
   */
  uint16_t retryAfter;
  /** network generated phrase in combination to error code
   *  this is compliant to  RFC 3261
   */
  string reasonPhrase;
};

/** *************************************
 * End of Presence Service Data Types   *
 ****************************************/





/** ************************************
 * Start of Options Service Data Types *
 ***************************************/


enum OptionsCmdId : int32_t {
  /** Command ID corresponding to API GetMyInfo(). */
  GETMYCDINFO,

  /** Command ID corresponding to API SetMyInfo(). */
  SETMYCDINFO,

  /** Command ID corresponding to API GetContactCap(). */
  GETCONTACTCAP,

  /** Command ID corresponding to API GetContactListCap(). */
  GETCONTACTLISTCAP,

  /** Command ID corresponding to API ResponseIncomingOptions(). */
  RESPONSEINCOMINGOPTIONS,

  /** Default Command ID as Unknown. */
  UNKNOWN,
};

struct OptionsCapabilityInfo {
  /** the SDP(Session Description Protocol) packet.
   */
  string          sdp;
  /** RCS features supported by remote party
   */
  CapabilityInfo  capInfo;
};

struct OptionsCmdStatus {
  /* Command ID */
  OptionsCmdId cmdId;
  /* status code */
  UceStatusCode status;
  /* token generated by the client */
  int64_t userData;
  /* RCS capabilities */
  OptionsCapabilityInfo capInfo;
};

struct OptionsSipResponse {
  /* Command ID */
  OptionsCmdId cmdId;
  /* request ID to identify API Request */
  int32_t requestId;
  /** network generated error code
   *  this is compliant to  RFC 3261
   */
  uint16_t sipResponseCode;
  /** time to retry in secs
   *  this is also network generated
   */
  uint16_t retryAfter;
  /** network generated phrase in combination to error code
   *  this is compliant to  RFC 3261
   */
  string reasonPhrase;
};

/* *************************************
 * End of Options Service Data Types   *
 ***************************************/
