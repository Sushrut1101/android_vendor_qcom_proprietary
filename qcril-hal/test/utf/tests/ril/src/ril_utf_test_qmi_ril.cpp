/******************************************************************************
#  Copyright (c) 2013 Qualcomm Technologies, Inc.
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ---------------------------------------------------------------------------

  @file    ril_utf_test_qmi_ril.cpp
  @brief   RIL UTF test case definitions

  DESCRIPTION
  All test case definitions should be in this file
  ---------------------------------------------------------------------------
******************************************************************************/

#include "ril_utf_test_qmi_ril.h"

#define BAND_PREF_COMB_ANY (QMI_NAS_BAND_CLASS_0_A_SYSTEM_V01 | QMI_NAS_BAND_CLASS_0_B_AB_GSM850_V01 |\
        QMI_NAS_BAND_CLASS_1_ALL_BLOCKS_V01 | QMI_NAS_BAND_CLASS_2_PLACEHOLDER_V01 | \
        QMI_NAS_BAND_CLASS_3_A_SYSTEM_V01 | QMI_NAS_BAND_CLASS_4_ALL_BLOCKS_V01  | \
        QMI_NAS_BAND_CLASS_5_ALL_BLOCKS_V01 | QMI_NAS_GSM_DCS_1800_BAND_V01 | QMI_NAS_E_GSM_900_BAND_V01 | \
        QMI_NAS_P_GSM_900_BAND_V01 | QMI_NAS_BAND_CLASS_6_V01 | QMI_NAS_BAND_CLASS_7_V01 | \
        QMI_NAS_BAND_CLASS_8_V01 | QMI_NAS_BAND_CLASS_9_V01 | QMI_NAS_BAND_CLASS_10_V01 | \
        QMI_NAS_BAND_CLASS_11_V01 | QMI_NAS_GSM_BAND_450_V01 | QMI_NAS_GSM_BAND_480_V01 | \
        QMI_NAS_GSM_BAND_750_V01 | QMI_NAS_GSM_BAND_850_V01 | QMI_NAS_GSM_BAND_RAILWAYS_900_BAND_V01 | \
        QMI_NAS_GSM_BAND_PCS_1900_BAND_V01 | QMI_NAS_WCDMA_EU_J_CH_IMT_2100_BAND_V01 | \
        QMI_NAS_WCDMA_US_PCS_1900_BAND_V01 | QMI_NAS_EU_CH_DCS_1800_BAND_V01 | \
        QMI_NAS_WCDMA_US_1700_BAND_V01 | QMI_NAS_WCDMA_US_850_BAND_V01 | QMI_NAS_WCDMA_JAPAN_800_BAND_V01 | \
        QMI_NAS_BAND_CLASS_12_V01 | QMI_NAS_BAND_CLASS_14_V01 | QMI_NAS_BAND_CLASS_15_V01 | \
        QMI_NAS_WCDMA_EU_2600_BAND_V01 | QMI_NAS_WCDMA_EU_J_900_BAND_V01 | \
        QMI_NAS_WCDMA_J_1700_BAND_V01 | QMI_NAS_BAND_CLASS_16_V01 | QMI_NAS_BAND_CLASS_17_V01 | \
        QMI_NAS_BAND_CLASS_18_V01 | QMI_NAS_BAND_CLASS_19_V01)

test_result ril_utf_test_system_selection_preference(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_srv_domain_pref(QMI_SRV_DOMAIN_PREF_CS_PS_V01);
  t.inject(QMI_node);

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  t.inject(QMI_node);


  // Execute the test case
  t.execute();

  t.print_summary();

  // Start the ims threads for ims
  //utf_start_ims_threads();

  return t.get_test_result();

}

test_result ril_utf_test_nw_state_chg_001( user_specified_attrib_t attr )
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  property_set("persist.vendor.radio.limit_sys_info", "1");

  t.set_test_id("ril_utf_test_nw_state_chg_001");
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }


  // Inject: QMI_NAS_SYS_INFO_IND_MSG_01
  QMI_node.update_default_sys_info_ind_msg();
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_VOICE_NETWORK_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_voice_network_state_changed();
  t.expect(RIL_node);

  // Inject: QMI_NAS_EVENT_REPORT_IND_MSG_V01
  QMI_node.update_default_qmi_nas_event_report_ind_msg();
  QMI_node.set_qmi_nas_even_report_ind_registration_reject_reason((nas_network_service_domain_enum_v01)1, NAS_PACKET_SWITCHED_V01);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SIGNAL_STRENGTH
  RIL_node.update_default_ril_unsol_signal_strength();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_VOICE_NETWORK_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_voice_network_state_changed();
  t.expect(RIL_node);

  t.set_end();

  // Execute the test case
  t.execute();

  t.print_summary();

  // Start the ims threads for ims
  //utf_start_ims_threads();

  return t.get_test_result();
}

/**==
@testname: ril_utf_mo_call_with_handover_ind
@description: CS call with QMI_VOICE_HANDOVER_IND
==**/
test_result ril_utf_mo_call_with_handover_ind(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_mo_call_with_handover_ind");
  t.set_test_description("MO CS call with QMI_VOICE_HANDOVER_IND");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Get SRVCC_Start Indication
  // Inject: QMI_VOICE_HANDOVER_IND_V02
  QMI_node.update_qmi_voice_handover_ind_msg(VOICE_HANDOVER_START_V02, VOICE_HO_G_2_G_V02);
  t.inject(QMI_node);

  // Get SRVCC_Complete_Success Indication
  // Inject: QMI_VOICE_HANDOVER_IND_V02
  QMI_node.update_qmi_voice_handover_ind_msg(VOICE_HANDOVER_COMPLETE_V02, VOICE_HO_G_2_G_V02);
  t.inject(QMI_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_exit_ecbm_001
@description:
==**/
test_result ril_utf_ims_exit_ecbm_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_ims_exit_ecbm_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_EXIT_EMERGENCY_CALLBACK_MODE
  IMS_node.update_default_ims_request_exit_emergency_callback_mode();
  t.inject(IMS_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_emergency_mode(0);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_EXIT_EMERGENCY_CALLBACK_MODE (resp)
  IMS_node.update_default_ims_request_exit_emergency_callback_mode_resp();
  t.expect(IMS_node);

  t.set_end();

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_emergency_call_001
@description:
==**/
test_result ril_utf_ims_emergency_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("911");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("911");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end_reason = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end_reason[0].call_end_reason = CALL_END_CAUSE_NETWORK_END_V02;
  end_reason[0].call_id = 1;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->has_failCause = true;
  calls[0]->failCause.has_failcause = true;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_emergency_mode(1);
  t.inject(QMI_node);

  t.set_start();

  // Expect: QMI_EMBMS_E911_STATE_IND_V01
  OEM_node.update_default_qmi_embms_unsol_e911_state_ind_v01();
  OEM_node.set_qmi_embms_unsol_e911_state_ind_v01_e911_state(EMBMS_E911_MODE_ACTIVE_V01);
  t.expect(OEM_node);


  // Expect: ims_MsgId_UNSOL_ENTER_EMERGENCY_CALLBACK_MODE
  IMS_node.update_default_ims_unsol_enter_emergency_callback_mode();
  t.expect(IMS_node);

  t.set_end();

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_emergency_mode(0);
  t.inject(QMI_node);

  t.set_start();

  // Expect: QMI_EMBMS_E911_STATE_IND_V01
  OEM_node.update_default_qmi_embms_unsol_e911_state_ind_v01();
  OEM_node.set_qmi_embms_unsol_e911_state_ind_v01_e911_state(EMBMS_E911_MODE_INACTIVE_V01);
  t.expect(OEM_node);

  // Expect: ims_MsgId_UNSOL_EXIT_EMERGENCY_CALLBACK_MODE
  IMS_node.update_default_ims_unsol_exit_emergency_callback_mode();
  t.expect(IMS_node);

   t.set_end();

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_emergency_call_002
@description:
==**/
test_result ril_utf_ims_emergency_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("911");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("911");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);


  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_emergency_mode(1);
  t.inject(QMI_node);

  // Expect: QMI_EMBMS_E911_STATE_IND_V01
  OEM_node.update_default_qmi_embms_unsol_e911_state_ind_v01();
  OEM_node.set_qmi_embms_unsol_e911_state_ind_v01_e911_state(EMBMS_E911_MODE_ACTIVE_V01);
  t.expect(OEM_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end_reason = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end_reason[0].call_end_reason = CALL_END_CAUSE_NETWORK_END_V02;
  end_reason[0].call_id = 1;
  t.inject(QMI_node);

  t.set_start();

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->has_failCause = true;
  calls[0]->failCause.has_failcause = true;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_ENTER_EMERGENCY_CALLBACK_MODE
  IMS_node.update_default_ims_unsol_enter_emergency_callback_mode();
  t.expect(IMS_node);

  t.set_end();

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_emergency_mode(0);
  t.inject(QMI_node);

  t.set_start();

  // Expect: QMI_EMBMS_E911_STATE_IND_V01
  OEM_node.update_default_qmi_embms_unsol_e911_state_ind_v01();
  OEM_node.set_qmi_embms_unsol_e911_state_ind_v01_e911_state(EMBMS_E911_MODE_INACTIVE_V01);
  t.expect(OEM_node);

  // Expect: ims_MsgId_UNSOL_EXIT_EMERGENCY_CALLBACK_MODE
  IMS_node.update_default_ims_unsol_exit_emergency_callback_mode();
  t.expect(IMS_node);

  t.set_end();

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_emergency_call_003
@description:
==**/
test_result ril_utf_ims_emergency_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("911");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("911");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_emergency_mode(1);
  t.inject(QMI_node);

  // Expect: QMI_EMBMS_E911_STATE_IND_V01
  OEM_node.update_default_qmi_embms_unsol_e911_state_ind_v01();
  OEM_node.set_qmi_embms_unsol_e911_state_ind_v01_e911_state(EMBMS_E911_MODE_ACTIVE_V01);
  t.expect(OEM_node);

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_emergency_mode(0);
  t.inject(QMI_node);

  // Expect: QMI_EMBMS_E911_STATE_IND_V01
  OEM_node.update_default_qmi_embms_unsol_e911_state_ind_v01();
  OEM_node.set_qmi_embms_unsol_e911_state_ind_v01_e911_state(EMBMS_E911_MODE_INACTIVE_V01);
  t.expect(OEM_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end_reason = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end_reason[0].call_end_reason = CALL_END_CAUSE_NETWORK_END_V02;
  end_reason[0].call_id = 1;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->has_failCause = true;
  calls[0]->failCause.has_failcause = true;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_001
@description: This test creates an MO call through a dial request. Modem then steps through call states to active. The call is then torn down with hangup request.
==**/
test_result ril_utf_test_mo_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_001");
  t.set_test_description("This test creates an MO call through an ATEL dial request and then ends the call with an ATEL hangup request");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

#if 0
  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);
#endif
  // Inject: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup(1);
  t.inject(RIL_node);


  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

#if 0
  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);
#endif
  // Expect: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup_resp();
  RIL_node.set_ril_error_value(RIL_E_SUCCESS);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_screen_state_change
@description: Screen state changes ON and OFF while CS call is active
==**/
test_result ril_utf_test_mo_call_screen_state_change(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_screen_state_change");
  t.set_test_description("Screen state changes ON and OFF while CS call is active");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  util_ril_utf_test_screen_state(t, RIL_node, QMI_node, 0, TRUE, FALSE, FALSE);

  util_ril_utf_test_screen_state(t, RIL_node, QMI_node, 1, TRUE, TRUE, TRUE);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_delay_in_dial_resp
@description: This test creates an MO call through a dial request. Modem then steps through call states to active. The call is then torn down with hangup request.
==**/
test_result ril_utf_test_mo_call_delay_in_dial_resp(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_delay_in_dial_resp");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_test_mo_call_no_origination_indication_for_70_secs
@description: This test creates an MO call through a dial request. Modem then steps through call states to active. The call is then torn down with hangup request.
==**/
test_result ril_utf_test_mo_call_no_origination_indication_for_70_secs(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_no_origination_indication_for_70_secs");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_test_mo_call_no_dial_resp_for_70_secs
@description: This test creates an MO call through a dial request. Modem then steps through call states to active. The call is then torn down with hangup request.
==**/
test_result ril_utf_test_mo_call_no_dial_resp_for_70_secs(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_no_dial_resp_for_70_secs");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_test_mo_call_delay_in_origination_indication
@description: This test creates an MO call through a dial request. Modem then steps through call states to active. The call is then torn down with hangup request.
==**/
test_result ril_utf_test_mo_call_delay_in_origination_indication(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_delay_in_origination_indication");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_delay_in_origination_indication
@description: This test creates an MO call through a dial request, where modem delays the orgination indication.
==**/
test_result ril_utf_test_mo_call_no_origination_indication(user_specified_attrib_t attr)
{
  Testcase t;
  Testcase t2;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_no_origination_indication");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t2.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t2.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t2.inject(QMI_node);
  t2.execute();

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_GENERIC_FAILURE);
  t.expect(RIL_node);
  t.execute();

  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_test_mo_call_delay_in_origination_indication
@description: This test creates an MO call through a dial request, where modem delays the orgination indication.
==**/
test_result ril_utf_test_mo_call_no_origination_indication_for_74_secs(user_specified_attrib_t attr)
{
  Testcase t;
  Testcase t2;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_no_origination_indication_for_74_secs");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t2.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t2.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t2.inject(QMI_node);
  t2.execute();

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_GENERIC_FAILURE);
  t.expect(RIL_node);
  t.execute();

  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_test_mo_call_delay_in_origination_indication
@description: This test creates an MO call through a dial request, where modem delays the orgination indication.
==**/
test_result ril_utf_test_mo_call_no_dial_resp_for_74_secs(user_specified_attrib_t attr)
{
  Testcase t;
  Testcase t2;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_no_dial_resp_for_74_secs");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t2.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t2.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t2.inject(QMI_node);
  t2.execute();

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_GENERIC_FAILURE);
  t.expect(RIL_node);
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_002
@description: This test creates an MO call through a dial request. Modem then steps through call states to active.
              A pause and unpause request is run. The call is then torn down with hangup request.
==**/
test_result ril_utf_test_mo_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_002");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HOLD REQUEST
  // Inject: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // UNHOLD REQUEST
  // Inject: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_003
@description: This test creates two MO calls and hangs them up separately
==**/
test_result ril_utf_test_mo_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_003");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Second call begins here


  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("4428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

//TODO: find out why this test causes failure in call cache
/**==
@testname: ril_utf_test_mo_call_004
@description: Creates two MO calls and then conferences them together
              The whole conference is then ended.
==**/
test_result ril_utf_test_mo_call_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_004");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Second call begins here


  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("4428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_CONFERENCE
  RIL_node.update_default_ril_request_conference();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CONFERENCE (resp)
  RIL_node.update_default_ril_request_conference_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
  call[0]->isMpty = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
  call[1]->isMpty = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(2);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  end[1].call_id = 1;
  end[1].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

/*
  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);
  */



  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_005
@description: This test creates 2 MO calls and conferences them together.
              A separation request is run and then both calls are ended
==**/
test_result ril_utf_test_mo_call_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_005");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Second call begins here


  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("4428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_SEPARATE_CONNECTION
  RIL_node.update_default_ril_request_separate_connection(2);
  t.inject(RIL_node);

  // Only one ACTIVE call; SEPARATE_CONNECTION is no op, will get success.
  // Expect: RIL_REQUEST_SEPARATE_CONNECTION (resp)
  RIL_node.update_default_ril_request_separate_connection_resp();
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_CONFERENCE
  RIL_node.update_default_ril_request_conference();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CONFERENCE (resp)
  RIL_node.update_default_ril_request_conference_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
  call[0]->isMpty = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
  call[1]->isMpty = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SEPARATE_CONNECTION
  RIL_node.update_default_ril_request_separate_connection(1);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_HOLD_ALL_EXCEPT_SPECIFIED_CALL_V02);
  QMI_node.set_qmi_voice_manage_calls_req_v02_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEPARATE_CONNECTION (resp)
  RIL_node.update_default_ril_request_separate_connection_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("4428536960");
  strlcpy(number_list[0].number, "4428536960", strlen("4428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(2);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("4428536960");
  strlcpy(number_list[0].number, "4428536960", strlen("4428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("4428536960");
  strlcpy(number_list[0].number, "4428536960", strlen("4428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_006
@description: Makes a single MO call and then requests a conference.
              Failure expected.
==**/
test_result ril_utf_test_mo_call_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_006");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_CONFERENCE
  RIL_node.update_default_ril_request_conference();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CONFERENCE (resp)
  RIL_node.update_default_ril_request_conference_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_007
@description: Test creates an MO call and attempts a separation request.
==**/
test_result ril_utf_test_mo_call_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_007");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SEPARATE_CONNECTION
  RIL_node.update_default_ril_request_separate_connection(3);
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_SEPARATE_CONNECTION (resp)
  RIL_node.update_default_ril_request_separate_connection_resp();
  RIL_node.set_ril_error_value(RIL_E_INVALID_ARGUMENTS);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SEPARATE_CONNECTION
  RIL_node.update_default_ril_request_separate_connection(1);
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_SEPARATE_CONNECTION (resp)
  RIL_node.update_default_ril_request_separate_connection_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_hungup_before_dial_resp
@description: Test creates an MO call and sends Hangup before Dial resp.

==**/
test_result ril_utf_test_mo_call_hangup_before_dial_resp(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_hangup_before_dial_resp");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;

  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup(1);
  t.inject(RIL_node);


  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_ABORTED_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup_resp();
  RIL_node.set_ril_error_value(RIL_E_SUCCESS);
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_CANCELLED);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_hungup_before_cc_in_prog
@description: Test creates an MO call and sends Hangup before Dial resp.

==**/
test_result ril_utf_test_mo_call_hangup_before_cc_in_prog(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_hangup_before_cc_in_prog");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup(-1);
  t.inject(RIL_node);

  //t.sleep(10);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;

  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  t.set_end();

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  //QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_ABORTED_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  QMI_node.set_qmi_voice_dial_call_resp_end_reason(CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_test_mo_call_dial_modified_to_dial
@description: Call control by sim: Dial/ussd modified by sim to a voice call
==**/
test_result ril_utf_test_mo_call_dial_modified_to_dial(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_dial_modified_to_dial");
  t.set_test_description("Call control by sim: Dial/ussd modified by sim to a voice call");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("*611");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("*611");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_UNKNOWN_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("*611");
  strlcpy(number_list[0].number, "*611", strlen("*611")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);
#endif

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  QMI_node.set_qmi_voice_dial_call_cc_result_type(VOICE_CC_RESULT_TYPE_VOICE_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_DIAL_MODIFIED_TO_DIAL);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_008
@description: Makes a single MO call with UUSInfo filled
==**/
test_result ril_utf_test_mo_call_008(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_008");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL with UUS Information
  RIL_Dial* ptr = RIL_node.update_default_ril_request_dial("2428536960");
  ptr->uusInfo = (RIL_UUS_Info *)malloc(sizeof(RIL_UUS_Info));
  memset(ptr->uusInfo, 0, sizeof(ptr->uusInfo));
  ptr->uusInfo->uusDcs = RIL_UUS_DCS_USP;
  ptr->uusInfo->uusType = RIL_UUS_TYPE1_REQUIRED;
  ptr->uusInfo->uusLength = strlen("123123123");
  ptr->uusInfo->uusData = strdup("123123123");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
  voice_uus_type_v02 *uus_info = QMI_node.set_qmi_voice_dial_call_req_uus();
  uus_info->uus_type = UUS_TYPE1_REQUIRED_V02;
  uus_info->uus_dcs = UUS_DCS_USP_V02;
  uus_info->uus_data_len = strlen("123123123");
  memcpy(uus_info->uus_data, "123123123", strlen("123123123"));
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

    // Inject: RIL_REQUEST_HANGUP
    RIL_node.update_default_ril_request_hangup(1);
    t.inject(RIL_node);

    // Expect: QMI_VOICE_END_CALL_REQ_V02
    QMI_node.update_default_qmi_voice_end_call_req_msg(1);
    t.expect(QMI_node);

    // Inject: QMI_VOICE_END_CALL_RESP_V02
    QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
    QMI_node.set_qmi_voice_end_call_resp_call_id(1);
    t.inject(QMI_node);

    // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
    call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
    call_info[0].call_id = 1;
    call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
    call_info[0].call_type = CALL_TYPE_VOICE_V02;
    call_info[0].direction = CALL_DIRECTION_MO_V02;
    call_info[0].is_mpty = 0;
    call_info[0].mode = CALL_MODE_GSM_V02;
    // remote_party_number
    number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
    number_list[0].call_id = 1;
    number_list[0].number_len = strlen("2428536960");
    strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
    number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
    t.inject(QMI_node);

    // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
    call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
    call_info[0].call_id = 1;
    call_info[0].call_state = CALL_STATE_END_V02;
    call_info[0].call_type = CALL_TYPE_VOICE_V02;
    call_info[0].direction = CALL_DIRECTION_MO_V02;
    call_info[0].is_mpty = 0;
    call_info[0].mode = CALL_MODE_GSM_V02;
    // remote_party_number
    number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
    number_list[0].call_id = 1;
    number_list[0].number_len = strlen("2428536960");
    strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
    number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
    voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
    end[0].call_id = 1;
    end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
    t.inject(QMI_node);

#if 0
    // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
    RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
    t.expect(RIL_node);
#endif
    // Expect: RIL_REQUEST_HANGUP
    RIL_node.update_default_ril_request_hangup_resp();
    RIL_node.set_ril_error_value(RIL_E_SUCCESS);
    t.expect(RIL_node);

    // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
    RIL_node.update_default_ril_unsol_response_call_state_changed();
    t.expect(RIL_node);

    // Inject: RIL_REQUEST_GET_CURRENT_CALLS
    RIL_node.update_default_ril_request_get_current_calls();
    t.inject(RIL_node);

    // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
    RIL_node.update_default_ril_request_get_current_calls_resp(0);
    t.expect(RIL_node);

    // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
    RIL_node.update_default_ril_request_last_call_fail_cause();
    t.inject(RIL_node);

    // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
    RIL_LastCallFailCauseInfo *fail_cause =
      RIL_node.update_default_ril_request_last_call_fail_cause_resp();
    fail_cause->cause_code = CALL_FAIL_NORMAL;
    t.expect(RIL_node);

    t.execute();

    t.print_summary();

    return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_009
@description: MO call with ringback tone
==**/
test_result ril_utf_test_mo_call_009(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("MO call with ringback tone");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // alerting_type
  voice_alerting_type_type_v02 *alerting_type = QMI_node.set_qmi_voice_all_call_status_ind_alerting_type(1);
  alerting_type[0].call_id = 1;
  alerting_type[0].alerting_type = ALERTING_REMOTE_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RINGBACK_TONE
  RIL_node.update_default_ril_unsol_ringback_tone(true);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // alerting_type
  alerting_type = QMI_node.set_qmi_voice_all_call_status_ind_alerting_type(1);
  alerting_type[0].call_id = 1;
  alerting_type[0].alerting_type = ALERTING_LOCAL_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RINGBACK_TONE
  RIL_node.update_default_ril_unsol_ringback_tone(false);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup(1);
  t.inject(RIL_node);


  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup_resp();
  RIL_node.set_ril_error_value(RIL_E_SUCCESS);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mt_call_001
@description: This test creates an MT call. Modem then steps through call states to active. The call is then torn down with hangup request.
==**/
test_result ril_utf_test_mt_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mt_call_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

test_result qmi_ril_test_proactive_call_control_Voice_001(user_specified_attrib_t attr)
{
    Testcase t;
    QMIRILTestnode QMI_node;
    AndroidTelTestnode RIL_node;

    property_set("persist.vendor.radio.rat_on", "0");

    t.set_test_id("qmi_ril_test_proactive_call_control_Voice_001");
    t.set_test_attribute("VOICE");
    if (!t.isAttributeMatch(attr))
    {
        test_result ret;
        return ret;
    }

    // Inject: QMI_VOICE_CALL_CONTROL_RESULT_INFO_IND_V02
    voice_call_control_result_info_ind_msg_v02 *call_control_result = QMI_node.update_default_qmi_voice_call_control_result_ind_msg();
    call_control_result->alpha_presence = VOICE_CC_ALPHA_NOT_PRESENT_V02;
    t.inject(QMI_node);

    // Inject: QMI_VOICE_CALL_CONTROL_RESULT_INFO_IND_V02
    voice_call_control_result_info_ind_msg_v02 *call_control_result1 = QMI_node.update_default_qmi_voice_call_control_result_ind_msg();
    call_control_result1->alpha_presence = VOICE_CC_ALPHA_NULL_V02;
    t.inject(QMI_node);

    // Inject: QMI_VOICE_CALL_CONTROL_RESULT_INFO_IND_V02
    voice_call_control_result_info_ind_msg_v02 *call_control_result2 = QMI_node.update_default_qmi_voice_call_control_result_ind_msg();
    call_control_result2->alpha_presence = VOICE_CC_ALPHA_PRESENT_V02;
    call_control_result2->alpha_text_gsm8_valid = TRUE;
    call_control_result2->alpha_text_gsm8_len = 1;
    call_control_result2->alpha_text_gsm8[0] = {0x65};
    t.inject(QMI_node);

    // Expect: RIL_UNSOL_STK_CC_ALPHA_NOTIFY
    uint8_t *data = RIL_node.update_default_ril_unsol_stk_cc_alpha_notify();
    data[0] = 0x65;
    t.expect(RIL_node);

    RIL_node.free_ril_request_get_alpha_text_resp();

    // Inject: QMI_VOICE_CALL_CONTROL_RESULT_INFO_IND_V02
    voice_call_control_result_info_ind_msg_v02 *call_control_result3 = QMI_node.update_default_qmi_voice_call_control_result_ind_msg();
    call_control_result3->alpha_presence = VOICE_CC_ALPHA_PRESENT_V02;
    call_control_result3->alpha_text_utf16_valid = TRUE;
    call_control_result3->alpha_text_utf16_len = 1;
    call_control_result3->alpha_text_utf16[0] = {0x65};
    t.inject(QMI_node);

    // Expect: RIL_UNSOL_STK_CC_ALPHA_NOTIFY
    data = RIL_node.update_default_ril_unsol_stk_cc_alpha_notify();
    data[0] = 0x65;
    t.expect(RIL_node);

    RIL_node.free_ril_request_get_alpha_text_resp();

    // Execute the test case
    t.execute();

    t.print_summary();

    return t.get_test_result();
}

test_result qmi_ril_test_proactive_call_control_WMS_001(user_specified_attrib_t attr)
{
    Testcase t;
    QMIRILTestnode QMI_node;
    AndroidTelTestnode RIL_node;

    property_set("persist.vendor.radio.rat_on", "0");

    t.set_test_id("qmi_ril_test_proactive_call_control_WMS_001");
    t.set_test_attribute("WMS");
    if (!t.isAttributeMatch(attr))
    {
        test_result ret;
        return ret;
    }

    // Inject: QMI_WMS_EVENT_REPORT_IND_V01
    QMI_node.update_default_qmi_wms_event_report_ind_msg();
    QMI_node.set_call_control_flag_in_event_report_ind_mag(FALSE);
    t.inject(QMI_node);

    // Inject: QMI_WMS_EVENT_REPORT_IND_V01
    QMI_node.update_default_qmi_wms_event_report_ind_msg();
    QMI_node.set_call_control_flag_in_event_report_ind_mag(TRUE);
    QMI_node.set_call_control_alpha_text_in_event_report_ind_mag(0x42);
    t.inject(QMI_node);

    // Expect: RIL_UNSOL_STK_CC_ALPHA_NOTIFY
    uint8_t *data = RIL_node.update_default_ril_unsol_stk_cc_alpha_notify();
    data[0] = 0x42;
    t.expect(RIL_node);

    RIL_node.free_ril_request_get_alpha_text_resp();

    // Inject: QMI_WMS_EVENT_REPORT_IND_V01
    QMI_node.update_default_qmi_wms_event_report_ind_msg();
    QMI_node.set_call_control_flag_in_event_report_ind_mag(TRUE);
    QMI_node.set_call_control_alpha_text_in_event_report_ind_mag(0x80);
    t.inject(QMI_node);

    // Inject: QMI_WMS_EVENT_REPORT_IND_V01
    QMI_node.update_default_qmi_wms_event_report_ind_msg();
    QMI_node.set_call_control_flag_in_event_report_ind_mag(TRUE);
    QMI_node.set_call_control_alpha_text_in_event_report_ind_mag(0x81);
    t.inject(QMI_node);

    // Inject: QMI_WMS_EVENT_REPORT_IND_V01
    QMI_node.update_default_qmi_wms_event_report_ind_msg();
    QMI_node.set_call_control_flag_in_event_report_ind_mag(TRUE);
    QMI_node.set_call_control_alpha_text_in_event_report_ind_mag(0x82);
    t.inject(QMI_node);

    // Execute the test case
    t.execute();

    t.print_summary();

    return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_312517_001
@description: MO call is made with subaddress in DIAL request.
==**/
test_result ril_utf_retro_gerrit_312517_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_retro_gerrit_312517_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

//  property_set("persist.vendor.radio.support_subaddr", "1");
//  property_set("persist.vendor.radio.subaddr_amp", "1");  // default is 1

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960&1234567890123456789");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_extension_bit(1);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress_type(SUBADDRESS_TYPE_NSAP_V02);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_odd_even_ind(1);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress("1234567890123456789");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_355643_001
@description: This test case creates in MT call that goes to CONVERSATION. Then another MT
                    call is waiting with call_type VOICE. This call is then answered by
                    switching the first call to HOLD. Later, all calls are terminated.
==**/
test_result ril_utf_retro_gerrit_355643_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_355643_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // A SECOND VT CALL IS WAITING
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VT_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  //IMS_node.update_default_ims_unsol_call_ring();
  //t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_WAITING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_ACTIVE;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QCRIL_EVT_IMS_SOCKET_REQ_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active();
  IMS_node.set_ims_request_switch_waiting_or_holding_and_active_call_type(ims_CallType_CALL_TYPE_VOICE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(2);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VOICE_IP_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VT_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: QCRIL_EVT_IMS_SOCKET_REQ_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_HOLDING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();
  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_355643_002
@description: This test case creates in MT call that goes to CONVERSATION. Then another MT
                    call is waiting with call_type VT_TX. This call is then answered by
                    switching the first call to HOLD. Later, all calls are terminated.
==**/
test_result ril_utf_retro_gerrit_355643_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_355643_002");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // A SECOND VT CALL IS WAITING
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VT_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  //IMS_node.update_default_ims_unsol_call_ring();
  //t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_WAITING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_ACTIVE;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QCRIL_EVT_IMS_SOCKET_REQ_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active();
  IMS_node.set_ims_request_switch_waiting_or_holding_and_active_call_type(ims_CallType_CALL_TYPE_VT_TX);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(2);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VT_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: QCRIL_EVT_IMS_SOCKET_REQ_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_HOLDING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();
  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_355643_003
@description: This test case creates in MT call that goes to CONVERSATION. Then another MT
                    call is waiting with call_type VT_RX. This call is then answered by
                    switching the first call to HOLD. Later, all calls are terminated.
==**/
test_result ril_utf_retro_gerrit_355643_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_355643_003");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // A SECOND VT CALL IS WAITING
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VT_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  //IMS_node.update_default_ims_unsol_call_ring();
  //t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_WAITING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_ACTIVE;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QCRIL_EVT_IMS_SOCKET_REQ_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active();
  IMS_node.set_ims_request_switch_waiting_or_holding_and_active_call_type(ims_CallType_CALL_TYPE_VT_RX);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(2);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VT_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: QCRIL_EVT_IMS_SOCKET_REQ_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_HOLDING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();
  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_355643_004
@description: This test case creates in MT call that goes to CONVERSATION. Then another MT
                    call is waiting with call_type VT. This call is then answered by
                    switching the first call to HOLD. Later, all calls are terminated.
==**/
test_result ril_utf_retro_gerrit_355643_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_355643_004");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // A SECOND VT CALL IS WAITING
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VT_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  //IMS_node.update_default_ims_unsol_call_ring();
  //t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_WAITING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_ACTIVE;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QCRIL_EVT_IMS_SOCKET_REQ_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active();
  IMS_node.set_ims_request_switch_waiting_or_holding_and_active_call_type(ims_CallType_CALL_TYPE_VT);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(2);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VT_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: QCRIL_EVT_IMS_SOCKET_REQ_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_HOLDING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();
  return t.get_test_result();
}

/**==
@testname: ril_utf_test_reject_cause_21_001
@description: MT call in INCOMING state is rejected.
@Expectation: QMI_VOICE_MANAGE_CALLS_REQ_V02 is used to reject the call.
@Pass Criteria: persist.vendor.radio.reject_cause_21 == 0
@Fail Criteria: persist.vendor.radio.reject_cause_21 == 1
==**/
test_result ril_utf_test_reject_cause_21_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_reject_cause_21_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HANGUP REQUEST
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
} // test_result ril_utf_test_reject_cause_21_001(user_specified_attrib_t attr)

/**==
@testname: ril_utf_test_reject_cause_21_501
@description: MT call in INCOMING state is rejected.
@Expectation: QMI_VOICE_ANSWER_CALL_REQ_V02 is used to reject the call
                        with reject_call TLV set to TRUE
@Pass Criteria: persist.vendor.radio.reject_cause_21 == 1
@Fail Criteria: persist.vendor.radio.reject_cause_21 == 0
==**/
test_result ril_utf_test_reject_cause_21_501(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_reject_cause_21_501");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.reject_cause_21", "1");

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HANGUP REQUEST
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_call(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
} // test_result ril_utf_test_reject_cause_21_501(user_specified_attrib_t attr)

/**==
@testname: ril_utf_test_reject_cause_21_002
@description: MO call goes to CONVERSATION. Call
                        is put on HOLD, then hungup.
@Expectation: QMI_VOICE_ANSWER_CALL_REQ_V02 is NOT used to reject the call
@Pass Criteria: all
@Fail Criteria: none
==**/
test_result ril_utf_test_reject_cause_21_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_reject_cause_21_002");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HOLD REQUEST
  // Inject: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active_resp();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HANGUP REQUEST (Hangup the HOLD call)
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
} // test_result ril_utf_test_reject_cause_21_002(user_specified_attrib_t attr)

/**==
@testname: ril_utf_test_reject_cause_21_003
@description: MO call goes to CONVERSATION. Another MT call is in WAITING state.
                            This second MT call is rejected.
@Expectation: QMI_VOICE_ANSWER_CALL_REQ_V02 is NOT used to reject the call
@Pass Criteria: persist.vendor.radio.reject_cause_21 == 0
@Fail Criteria: persist.vendor.radio.reject_cause_21 == 1
==**/
test_result ril_utf_test_reject_cause_21_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_reject_cause_21_003");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // SECOND MT CALL INCOMING
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_SETUP_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 0;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 0;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HANGUP THE WAITING CALL
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);


  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->isMT = 0;
  call[0]->isMpty =  0;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // GRACEFULL CALL END
  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
} // test_result ril_utf_test_reject_cause_21_003(user_specified_attrib_t attr)

/**==
@testname: ril_utf_test_reject_cause_21_503
@description: MO call goes to CONVERSATION. Another MT call is in WAITING state.
                            This second MT call is rejected.
@Expectation: QMI_VOICE_ANSWER_CALL_REQ_V02 is used to reject the call
@Pass Criteria: persist.vendor.radio.reject_cause_21 == 1
@Fail Criteria: persist.vendor.radio.reject_cause_21 == 0
==**/
test_result ril_utf_test_reject_cause_21_503(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.reject_cause_21", "1");

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // SECOND MT CALL WAITING REQUEST
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_SETUP_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 0;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 0;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HANGUP THE WAITING CALL
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(2);
  QMI_node.set_qmi_voice_answer_call_req_reject_call(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 0;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->isMT = 0;
  call[0]->isMpty =  0;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // GRACEFULL CALL END
  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
} // test_result ril_utf_test_reject_cause_21_503(user_specified_attrib_t attr)

/**==
@testname: ril_utf_test_reject_cause_21_004
@description: MT call goes to CONVERSATION, then HOLD. Another MT call is in WAITING state.
                            This second MT call is rejected.
@Expectation: QMI_VOICE_ANSWER_CALL_REQ_V02 is NOT used to reject the call
@Pass Criteria: persist.vendor.radio.reject_cause_21 == 0
@Fail Criteria: persist.vendor.radio.reject_cause_21 == 1
==**/
test_result ril_utf_test_reject_cause_21_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_reject_cause_21_004");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HOLD REQUEST
  // Inject: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active_resp();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // SECOND MT CALL WAITING REQUEST
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_SETUP_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HANGUP THE WAITING CALL
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->isMT = 1;
  call[0]->isMpty =  0;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // GRACEFULL CALL END (Hangup the HOLD call)
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND (Resp)
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
} // test_result ril_utf_test_reject_cause_21_004(user_specified_attrib_t attr)

/**==
@testname: ril_utf_test_reject_cause_21_504
@description: MT call goes to CONVERSATION, then HOLD. Another MT call is in WAITING state.
                            This second MT call is rejected.
@Expectation: QMI_VOICE_ANSWER_CALL_REQ_V02 is used to reject the call
@Pass Criteria: persist.vendor.radio.reject_cause_21 == 1
@Fail Criteria: persist.vendor.radio.reject_cause_21 == 0
==**/
test_result ril_utf_test_reject_cause_21_504(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_reject_cause_21_504");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.reject_cause_21", "1");

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HOLD REQUEST
  // Inject: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active_resp();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // SECOND MT CALL WAITING REQUEST
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_SETUP_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HANGUP THE WAITING CALL
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(2);
  QMI_node.set_qmi_voice_answer_call_req_reject_call(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  voice_call_end_reason_type_v02* end;

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->isMT = 1;
  call[0]->isMpty =  0;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  RIL_LastCallFailCauseInfo *fail_cause;
  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);


  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // GRACEFULL CALL END (Hangup the HOLD call)
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND (Resp)
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
} // test_result ril_utf_test_reject_cause_21_504(user_specified_attrib_t attr)

/**==
@testname: ril_utf_retro_gerrit_391289_001
@description: RIL creates one MO call that goes to conversation. Then a direct
                call is places on to modem bypassing RIL. This second call goes
                through ORIGINATION, ALERTING and then CONVERSATION STATE. Later
                both calls are disconnected.
@expectation: While the second call is in ORIGINATION or ALERTING state,
                GET_CURRENT_CALL does not report them back to Telephony.
==**/
test_result ril_utf_retro_gerrit_391289_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_retro_gerrit_391289_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // *** Ghost call originated NOT by RIL ***


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_391289_002
@description: An MO call is placed on modem bypassing RIL. This call passes
                through states ORIGINATION, ALERTING and CONVERSATION. Later
                this call is hangup.
@expectation: RIL reports this call back to telephony even in ORIGINATING
                and ALERTING states.
==**/
test_result ril_utf_retro_gerrit_391289_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_retro_gerrit_391289_002");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Place a call on modem bypassing RIL

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_355735_001
@description: Sets the SMSC address
==**/
test_result ril_utf_retro_gerrit_355735_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_retro_gerrit_355735_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_SMSC_ADDRESS
  RIL_node.update_default_ril_request_set_smsc_address("\"+358501234567\",145");
  t.inject(RIL_node);

  // Expect: QMI_WMS_SET_SMSC_ADDRESS_REQ_V01
  QMI_node.update_deafult_qmi_wms_set_smsc_address_req_msg("+358501234567");
  QMI_node.set_qmi_wms_set_smsc_address_req_msg_smsc_address_type("145");
  t.expect(QMI_node);

  // Inject: QMI_WMS_SET_SMSC_ADDRESS_RESP_V01
  QMI_node.update_default_qmi_wms_set_smsc_address_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_SMSC_ADDRESS (resp)
  RIL_node.update_default_ril_request_set_smsc_address_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_mo_001
@description: Request send SMS message
==**/

test_result ril_utf_sms_mo_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_mo_001");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_SEND_SMS
  char** sms_data = RIL_node.update_default_ril_request_send_sms();
  strlcpy(sms_data[0], "8012452313", strlen("8012452313")+1);
  strlcpy(sms_data[1], "sometext", strlen("sometext")+1);
  t.inject(RIL_node);

  // Expect: QMI_WMS_RAW_SEND_REQ_V01
  QMI_node.update_default_qmi_wms_raw_send_req_msg("8012452313", "sometext", WMS_MESSAGE_FORMAT_GW_PP_V01);
  QMI_node.set_qmi_wms_raw_send_req_sms_on_ims(0);
  t.expect(QMI_node);

  // Inject: QMI_WMS_RAW_SEND_RESP_V01
  (void)QMI_node.update_default_qmi_wms_raw_send_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01, 0x01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_SMS (resp)
  RIL_SMS_Response* resp_ptr = RIL_node.update_default_ril_request_send_sms_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_verify_single_page_gsm_cmas 
@description: Emulate broadcast CMAS SMS
==**/
test_result ril_utf_sms_verify_single_page_gsm_cmas(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_verify_single_page_gsm_cmas");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
      test_result ret;
      return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_GSM_RADIO_ACCESS_V01);
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "C0001112011154741914AFA7C76B9058FEBEBB41E6371EA4AEB7E173D0DB5E9683E8E832881DD6E741E4F7B9");
  // QMI_node.set_qmi_wms_event_report_ind_wac_message("FFFFFFFFFFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS with CMAS data
  unsigned char arr[] = {0xc0, 0x0,  0x11, 0x12, 0x1,  0x11, 0x54, 0x74, 0x19, 0x14, 0xaf,
                         0xa7, 0xc7, 0x6b, 0x90, 0x58, 0xfe, 0xbe, 0xbb, 0x41, 0xe6, 0x37,
                         0x1e, 0xa4, 0xae, 0xb7, 0xe1, 0x73, 0xd0, 0xdb, 0x5e, 0x96, 0x83,
                         0xe8, 0xe8, 0x32, 0x88, 0x1d, 0xd6, 0xe7, 0x41, 0xe4, 0xf7, 0xb9};

  RIL_node.update_default_ril_unsol_response_new_broadcast_sms(arr, sizeof(arr));
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_verify_single_page_lte_cmas
@description: Emulate broadcast CMAS SMS
==**/
test_result ril_utf_sms_verify_single_page_lte_cmas(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_verify_single_page_lte_cmas");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
      test_result ret;
      return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_LTE_RADIO_ACCESS_V01);
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "C0001112011154741914AFA7C76B9058FEBEBB41E6371EA4AEB7E173D0DB5E9683E8E832881DD6E741E4F7B9");
  // QMI_node.set_qmi_wms_event_report_ind_wac_message("FFFFFFFFFFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS with CMAS data
  unsigned char arr[] = {
      0x1,  0x11, 0x12, 0xc0, 0x0,  0x1,  0x1,  0x54, 0x74, 0x19, 0x14, 0xaf, 0xa7, 0xc7, 0x6b,
      0x90, 0x58, 0xfe, 0xbe, 0xbb, 0x41, 0xe6, 0x37, 0x1e, 0xa4, 0xae, 0xb7, 0xe1, 0x73, 0xd0,
      0xdb, 0x5e, 0x96, 0x83, 0xe8, 0xe8, 0x32, 0x88, 0x1d, 0xd6, 0xe7, 0x41, 0xe4, 0xf7, 0xb9,
      0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
      0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
      0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x26};

  RIL_node.update_default_ril_unsol_response_new_broadcast_sms(arr, sizeof(arr));
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS with WAC data with first 4 bytes of CMAS header
  // RIL_node.update_default_ril_unsol_response_new_broadcast_sms("BBAA32AFFFFFFFFFFFFF");
  // RIL_node.set_expect_skip_verification_status(false);
  // t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_verify_single_page_lte_cmas_with_wac
@description: Emulate broadcast CMAS SMS
==**/
test_result ril_utf_sms_verify_single_page_lte_cmas_with_wac(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_verify_single_page_lte_cmas_with_wac");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
      test_result ret;
      return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  unsigned char wac[] = {
      0x1, 0x2, 0x3, 0x4, 0x5, 0x6
  };

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_LTE_RADIO_ACCESS_V01);
  QMI_node.set_warning_area_coordinate(wac, sizeof(wac));
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "C0001112011154741914AFA7C76B9058FEBEBB41E6371EA4AEB7E173D0DB5E9683E8E832881DD6E741E4F7B9");
  // QMI_node.set_qmi_wms_event_report_ind_wac_message("FFFFFFFFFFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS with CMAS data
  unsigned char arr[] = {
      0x1,  0x11, 0x12, 0xc0, 0x0,  0x1,  0x1,  0x54, 0x74, 0x19, 0x14, 0xaf, 0xa7, 0xc7,
      0x6b, 0x90, 0x58, 0xfe, 0xbe, 0xbb, 0x41, 0xe6, 0x37, 0x1e, 0xa4, 0xae, 0xb7, 0xe1,
      0x73, 0xd0, 0xdb, 0x5e, 0x96, 0x83, 0xe8, 0xe8, 0x32, 0x88, 0x1d, 0xd6, 0xe7, 0x41,
      0xe4, 0xf7, 0xb9, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
      0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
      0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
      0x0,  0x0,  0x0,  0x0,  0x0,  0x26, 0x6,  0x0,  0x1,  0x2,  0x3,  0x4,  0x5,  0x6};

  RIL_node.update_default_ril_unsol_response_new_broadcast_sms(arr, sizeof(arr));
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS with WAC data with first 4 bytes of CMAS header
  // RIL_node.update_default_ril_unsol_response_new_broadcast_sms("BBAA32AFFFFFFFFFFFFF");
  // RIL_node.set_expect_skip_verification_status(false);
  // t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_sms_verify_multi_page_gsm_cmas
@description: Emulate broadcast CMAS SMS
==**/
test_result ril_utf_sms_verify_multi_page_gsm_cmas(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_verify_multi_page_gsm_cmas");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
      test_result ret;
      return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01 page-1
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_GSM_RADIO_ACCESS_V01);
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "00161114011354747A0E4ABBE77479BD5D76D34170F9DB9E2697E72073DD3DA6A7DFEE301B442FCFE969F719F4"
      "3683C665361B2496BFC3E471784E074D9B5390380F9A97DDE4B4FB0CAAC341F437888E9697CB20B1FC1D06");
  t.inject(QMI_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01 page-2
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_GSM_RADIO_ACCESS_V01);
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "001611140123E471784E07B5CBF379F85C9E83E86F101D5D0691CBF6F4B80CAABBC96539885E9ED35D20EAFD0D"
      "32A7F16532885EC6D341EDF27C1E3E97E7A0B09B0CAACFCB7210B96C4EBBCB6410BD8CA783DE729038ED06");
  t.inject(QMI_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01 page-3
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_GSM_RADIO_ACCESS_V01);
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "0016111401336179FE551D4E65A076793E0F9FCB7350585E0685EDE1343B2C669741E6B71C342FB3CB637AFAED"
      "7681A8E832685E1EBFDD6490398D2F9341EDF27C1E3E97417378D83D07B5EB6C7A1ACE2E83E0E17379EE02");
  t.inject(QMI_node);

  unsigned char cb1[] = {
      0x0,  0x16, 0x11, 0x14, 0x1,  0x13, 0x54, 0x74, 0x7a, 0xe,  0x4a, 0xbb, 0xe7, 0x74, 0x79,
      0xbd, 0x5d, 0x76, 0xd3, 0x41, 0x70, 0xf9, 0xdb, 0x9e, 0x26, 0x97, 0xe7, 0x20, 0x73, 0xdd,
      0x3d, 0xa6, 0xa7, 0xdf, 0xee, 0x30, 0x1b, 0x44, 0x2f, 0xcf, 0xe9, 0x69, 0xf7, 0x19, 0xf4,
      0x36, 0x83, 0xc6, 0x65, 0x36, 0x1b, 0x24, 0x96, 0xbf, 0xc3, 0xe4, 0x71, 0x78, 0x4e, 0x7,
      0x4d, 0x9b, 0x53, 0x90, 0x38, 0xf,  0x9a, 0x97, 0xdd, 0xe4, 0xb4, 0xfb, 0xc,  0xaa, 0xc3,
      0x41, 0xf4, 0x37, 0x88, 0x8e, 0x96, 0x97, 0xcb, 0x20, 0xb1, 0xfc, 0x1d, 0x6
  };
  unsigned char cb2[] = {
      0x0,  0x16, 0x11, 0x14, 0x1,  0x23, 0xe4, 0x71, 0x78, 0x4e, 0x7,  0xb5, 0xcb, 0xf3, 0x79,
      0xf8, 0x5c, 0x9e, 0x83, 0xe8, 0x6f, 0x10, 0x1d, 0x5d, 0x6,  0x91, 0xcb, 0xf6, 0xf4, 0xb8,
      0xc,  0xaa, 0xbb, 0xc9, 0x65, 0x39, 0x88, 0x5e, 0x9e, 0xd3, 0x5d, 0x20, 0xea, 0xfd, 0xd,
      0x32, 0xa7, 0xf1, 0x65, 0x32, 0x88, 0x5e, 0xc6, 0xd3, 0x41, 0xed, 0xf2, 0x7c, 0x1e, 0x3e,
      0x97, 0xe7, 0xa0, 0xb0, 0x9b, 0xc,  0xaa, 0xcf, 0xcb, 0x72, 0x10, 0xb9, 0x6c, 0x4e, 0xbb,
      0xcb, 0x64, 0x10, 0xbd, 0x8c, 0xa7, 0x83, 0xde, 0x72, 0x90, 0x38, 0xed, 0x6
  };
  unsigned char cb3[] = {
      0x0,  0x16, 0x11, 0x14, 0x1,  0x33, 0x61, 0x79, 0xfe, 0x55, 0x1d, 0x4e, 0x65, 0xa0, 0x76,
      0x79, 0x3e, 0xf,  0x9f, 0xcb, 0x73, 0x50, 0x58, 0x5e, 0x6,  0x85, 0xed, 0xe1, 0x34, 0x3b,
      0x2c, 0x66, 0x97, 0x41, 0xe6, 0xb7, 0x1c, 0x34, 0x2f, 0xb3, 0xcb, 0x63, 0x7a, 0xfa, 0xed,
      0x76, 0x81, 0xa8, 0xe8, 0x32, 0x68, 0x5e, 0x1e, 0xbf, 0xdd, 0x64, 0x90, 0x39, 0x8d, 0x2f,
      0x93, 0x41, 0xed, 0xf2, 0x7c, 0x1e, 0x3e, 0x97, 0x41, 0x73, 0x78, 0xd8, 0x3d, 0x7,  0xb5,
      0xeb, 0x6c, 0x7a, 0x1a, 0xce, 0x2e, 0x83, 0xe0, 0xe1, 0x73, 0x79, 0xee, 0x2
  };
  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS for cmas page-1
  RIL_node.update_default_ril_unsol_response_new_broadcast_sms(
      cb1, sizeof(cb2));
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS for cmas page-2
  RIL_node.update_default_ril_unsol_response_new_broadcast_sms(
      cb2, sizeof(cb2));
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS for cmas page-3
  RIL_node.update_default_ril_unsol_response_new_broadcast_sms(
      cb3, sizeof(cb3));
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_verify_multi_page_lte_cmas
@description: Emulate broadcast CMAS SMS
==**/
test_result ril_utf_sms_verify_multi_page_lte_cmas(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_verify_multi_page_lte_cmas");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
      test_result ret;
      return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01 page-1
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_LTE_RADIO_ACCESS_V01);
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "00161114011354747A0E4ABBE77479BD5D76D34170F9DB9E2697E72073DD3DA6A7DFEE301B442FCFE969F719F4"
      "3683C665361B2496BFC3E471784E074D9B5390380F9A97DDE4B4FB0CAAC341F437888E9697CB20B1FC1D06");
  t.inject(QMI_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01 page-2
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_LTE_RADIO_ACCESS_V01);
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "001611140123E471784E07B5CBF379F85C9E83E86F101D5D0691CBF6F4B80CAABBC96539885E9ED35D20EAFD0D"
      "32A7F16532885EC6D341EDF27C1E3E97E7A0B09B0CAACFCB7210B96C4EBBCB6410BD8CA783DE729038ED06");
  t.inject(QMI_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01 page-3
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_sms_rat(WMS_BC_RAT_LTE_RADIO_ACCESS_V01);
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_bc_message(
      WMS_MESSAGE_FORMAT_GW_BC_V01,
      "0016111401336179FE551D4E65A076793E0F9FCB7350585E0685EDE1343B2C669741E6B71C342FB3CB637AFAED"
      "7681A8E832685E1EBFDD6490398D2F9341EDF27C1E3E97417378D83D07B5EB6C7A1ACE2E83E0E17379EE02");
  t.inject(QMI_node);

  unsigned char umts_cb[] = {
      0x1,  0x11, 0x14, 0x0,  0x16, 0x1,  0x3,  0x54, 0x74, 0x7a, 0xe,  0x4a, 0xbb, 0xe7, 0x74,
      0x79, 0xbd, 0x5d, 0x76, 0xd3, 0x41, 0x70, 0xf9, 0xdb, 0x9e, 0x26, 0x97, 0xe7, 0x20, 0x73,
      0xdd, 0x3d, 0xa6, 0xa7, 0xdf, 0xee, 0x30, 0x1b, 0x44, 0x2f, 0xcf, 0xe9, 0x69, 0xf7, 0x19,
      0xf4, 0x36, 0x83, 0xc6, 0x65, 0x36, 0x1b, 0x24, 0x96, 0xbf, 0xc3, 0xe4, 0x71, 0x78, 0x4e,
      0x7,  0x4d, 0x9b, 0x53, 0x90, 0x38, 0xf,  0x9a, 0x97, 0xdd, 0xe4, 0xb4, 0xfb, 0xc,  0xaa,
      0xc3, 0x41, 0xf4, 0x37, 0x88, 0x8e, 0x96, 0x97, 0xcb, 0x20, 0xb1, 0xfc, 0x1d, 0x6,  0x52,
      0xe4, 0x71, 0x78, 0x4e, 0x7,  0xb5, 0xcb, 0xf3, 0x79, 0xf8, 0x5c, 0x9e, 0x83, 0xe8, 0x6f,
      0x10, 0x1d, 0x5d, 0x6,  0x91, 0xcb, 0xf6, 0xf4, 0xb8, 0xc,  0xaa, 0xbb, 0xc9, 0x65, 0x39,
      0x88, 0x5e, 0x9e, 0xd3, 0x5d, 0x20, 0xea, 0xfd, 0xd,  0x32, 0xa7, 0xf1, 0x65, 0x32, 0x88,
      0x5e, 0xc6, 0xd3, 0x41, 0xed, 0xf2, 0x7c, 0x1e, 0x3e, 0x97, 0xe7, 0xa0, 0xb0, 0x9b, 0xc,
      0xaa, 0xcf, 0xcb, 0x72, 0x10, 0xb9, 0x6c, 0x4e, 0xbb, 0xcb, 0x64, 0x10, 0xbd, 0x8c, 0xa7,
      0x83, 0xde, 0x72, 0x90, 0x38, 0xed, 0x6,  0x52, 0x61, 0x79, 0xfe, 0x55, 0x1d, 0x4e, 0x65,
      0xa0, 0x76, 0x79, 0x3e, 0xf,  0x9f, 0xcb, 0x73, 0x50, 0x58, 0x5e, 0x6,  0x85, 0xed, 0xe1,
      0x34, 0x3b, 0x2c, 0x66, 0x97, 0x41, 0xe6, 0xb7, 0x1c, 0x34, 0x2f, 0xb3, 0xcb, 0x63, 0x7a,
      0xfa, 0xed, 0x76, 0x81, 0xa8, 0xe8, 0x32, 0x68, 0x5e, 0x1e, 0xbf, 0xdd, 0x64, 0x90, 0x39,
      0x8d, 0x2f, 0x93, 0x41, 0xed, 0xf2, 0x7c, 0x1e, 0x3e, 0x97, 0x41, 0x73, 0x78, 0xd8, 0x3d,
      0x7,  0xb5, 0xeb, 0x6c, 0x7a, 0x1a, 0xce, 0x2e, 0x83, 0xe0, 0xe1, 0x73, 0x79, 0xee, 0x2,
      0x52};

  // Expect: RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS for cmas page-1
  RIL_node.update_default_ril_unsol_response_new_broadcast_sms(
      umts_cb, sizeof(umts_cb));
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_sms_mt_001
@description: Emulate basic incoming sms
==*/
test_result ril_utf_sms_mt_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_mt_001");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01 , 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_SMS
  RIL_node.update_default_ril_unsol_response_new_sms("00BBAA32AFDE42FFFF");
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_mt_002
@description: need ack for first so second msg dropped
==**/
test_result ril_utf_sms_mt_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_mt_002");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_SMS
  RIL_node.update_default_ril_unsol_response_new_sms("00BBAA32AFDE42FFFF");
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "FFFFFFFFFFFFFFFF");
  t.inject(QMI_node);

  // Inject: RIL_REQUEST_SMS_ACKNOWLEDGE
  int *resp = RIL_node.update_default_ril_request_sms_acknowledge();
  resp[0] = 1;
  t.inject(RIL_node);

  // Expect: QMI_WMS_SEND_ACK_REQ_V01
  wms_send_ack_req_msg_v01* ack_req = QMI_node.update_default_qmi_wms_send_ack_req_msg();
  ack_req->ack_information.transaction_id = 0;
  ack_req->ack_information.success = 0x01;
  ack_req->ack_information.message_protocol = WMS_MESSAGE_PROTOCOL_WCDMA_V01;
  QMI_node.ril_utf_qmiril_if::set_qmi_wms_send_ack_req_sms_on_ims(0);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SEND_ACK_RESP_V01
  QMI_node.update_default_qmi_wms_send_ack_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SMS_ACKNOWLEDGE (resp)
  RIL_node.update_default_ril_request_sms_acknowledge_resp();
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_mt_003
@description: need ack for neither so both reported to ATEL
==**/
test_result ril_utf_sms_mt_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_mt_003");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_SMS
  RIL_node.update_default_ril_unsol_response_new_sms("00BBAA32AFDE42FFFF");
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "FFFFFFFFFFFFFFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_SMS
  RIL_node.update_default_ril_unsol_response_new_sms("00FFFFFFFFFFFFFFFF");
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_mt_004
@description: need ack for second so second both messages reported to ATEL
==**/
test_result ril_utf_sms_mt_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_mt_004");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_SMS
  RIL_node.update_default_ril_unsol_response_new_sms("00BBAA32AFDE42FFFF");
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "FFFFFFFFFFFFFFFF");
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_NEW_SMS
  RIL_node.update_default_ril_unsol_response_new_sms("00FFFFFFFFFFFFFFFF");
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SMS_ACKNOWLEDGE
  int *resp = RIL_node.update_default_ril_request_sms_acknowledge();
  resp[0] = 1;
  t.inject(RIL_node);

  // Expect: QMI_WMS_SEND_ACK_REQ_V01
  wms_send_ack_req_msg_v01* ack_req = QMI_node.update_default_qmi_wms_send_ack_req_msg();
  ack_req->ack_information.transaction_id = 0;
  ack_req->ack_information.success = 0x01;
  ack_req->ack_information.message_protocol = WMS_MESSAGE_PROTOCOL_WCDMA_V01;
  QMI_node.ril_utf_qmiril_if::set_qmi_wms_send_ack_req_sms_on_ims(0);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SEND_ACK_RESP_V01
  QMI_node.update_default_qmi_wms_send_ack_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SMS_ACKNOWLEDGE (resp)
  RIL_node.update_default_ril_request_sms_acknowledge_resp();
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_delete_sms_on_sim_001
@description: request to delete gsm sms on sim
==**/
test_result ril_utf_sms_delete_sms_on_sim_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_delete_sms_on_sim_001");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_DELETE_SMS_ON_SIM
  RIL_node.update_default_ril_request_delete_sms_on_sim(1);
  t.inject(RIL_node);

  // Expect: QMI_WMS_DELETE_REQ_V01
  QMI_node.update_default_qmi_wms_delete_req_msg(WMS_STORAGE_TYPE_UIM_V01);
  QMI_node.set_qmi_wms_delete_req_index(0);
  QMI_node.set_qmi_wms_delete_req_message_mode(WMS_MESSAGE_MODE_GW_V01);
  t.expect(QMI_node);

  // Inject: QMI_WMS_DELETE_RESP_V01
  QMI_node.update_default_qmi_wms_delete_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DELETE_SMS_ON_SIM(resp)
  RIL_node.update_default_ril_request_delete_sms_on_sim_resp(RIL_E_SUCCESS);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_sms_delete_cdma_sms_on_ruim_001
@description: request to delete cdma sms on ruim
==**/
test_result ril_utf_sms_delete_cdma_sms_on_ruim_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_sms_delete_cdma_sms_on_ruim_001");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_CDMA_DELETE_SMS_ON_RUIM
  RIL_node.update_default_ril_request_delete_cdma_sms_on_ruim(1);
  t.inject(RIL_node);

  // Expect: QMI_WMS_DELETE_REQ_V01
  QMI_node.update_default_qmi_wms_delete_req_msg(WMS_STORAGE_TYPE_UIM_V01);
  QMI_node.set_qmi_wms_delete_req_index(0);
  QMI_node.set_qmi_wms_delete_req_message_mode(WMS_MESSAGE_MODE_CDMA_V01);
  t.expect(QMI_node);

  // Inject: QMI_WMS_DELETE_RESP_V01
  QMI_node.update_default_qmi_wms_delete_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_DELETE_SMS_ON_RUIM(resp)
  RIL_node.update_default_ril_request_delete_cdma_sms_on_ruim_resp(RIL_E_SUCCESS);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_3gpp_sms_001
@description: request send ims sms message
==**/
test_result ril_utf_ims_mo_3gpp_sms_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mo_3gpp_sms_001");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();


  // Inject: IMS SEND SMS request
  RIL_IMS_SMS_Message* ims_sms = IMS_node.update_default_ims_request_send_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  ims_sms->messageRef = -1;
  IMS_node.set_ims_sms_gsm_payload("8012452313", "abcdefab");
  t.inject(IMS_node);

  // Expect: QMI_WMS_RAW_SEND_REQ_V01
  QMI_node.update_default_qmi_wms_raw_send_req_msg("8012452313", "abcdefab", WMS_MESSAGE_FORMAT_GW_PP_V01);
  QMI_node.set_qmi_wms_raw_send_req_sms_on_ims(1);
  t.expect(QMI_node);

  // Inject: QMI_WMS_RAW_SEND_RESP_V01
  (void)QMI_node.update_default_qmi_wms_raw_send_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01, 0x01);
  t.inject(QMI_node);

  IMS_node.update_default_ims_send_sms_response();
  IMS_node.set_ims_error_value(ims_Error_E_SUCCESS);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_3gpp_sms_002
@description: request send ims sms message with error
==**/
test_result ril_utf_ims_mo_3gpp_sms_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mo_3gpp_sms_002");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();


  // Inject: IMS SEND SMS request
  RIL_IMS_SMS_Message* ims_sms = IMS_node.update_default_ims_request_send_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  ims_sms->messageRef = -1;
  IMS_node.set_ims_sms_gsm_payload("8012452313", "abcdefab");
  t.inject(IMS_node);

  // Expect: QMI_WMS_RAW_SEND_REQ_V01
  QMI_node.update_default_qmi_wms_raw_send_req_msg("8012452313", "abcdefab", WMS_MESSAGE_FORMAT_GW_PP_V01);
  QMI_node.set_qmi_wms_raw_send_req_sms_on_ims(1);
  t.expect(QMI_node);

  // Inject: QMI_WMS_RAW_SEND_RESP_V01
  wms_raw_send_resp_msg_v01* send_resp = QMI_node.update_default_qmi_wms_raw_send_resp_msg(
        QMI_RESULT_FAILURE_V01, QMI_ERR_CAUSE_CODE_V01, 0x01);
  send_resp->gw_cause_info_valid = 1;
  send_resp->gw_cause_info.rp_cause = WMS_RP_CAUSE_TEMPORARY_FAILURE_V01;
  t.inject(QMI_node);

  IMS_node.update_default_ims_send_sms_response();
  IMS_node.set_ims_error_value(ims_Error_E_SMS_SEND_FAIL_RETRY);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_3gpp_sms_003
@description: request send ims sms message with error
==**/
test_result ril_utf_ims_mo_3gpp_sms_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mo_3gpp_sms_003");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();


  // Inject: IMS SEND SMS request
  RIL_IMS_SMS_Message* ims_sms = IMS_node.update_default_ims_request_send_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  ims_sms->messageRef = -1;
  IMS_node.set_ims_sms_gsm_payload("8012452313", "abcdefab");
  t.inject(IMS_node);

  // Expect: QMI_WMS_RAW_SEND_REQ_V01
  QMI_node.update_default_qmi_wms_raw_send_req_msg("8012452313", "abcdefab", WMS_MESSAGE_FORMAT_GW_PP_V01);
  QMI_node.set_qmi_wms_raw_send_req_sms_on_ims(1);
  t.expect(QMI_node);

  // Inject: QMI_WMS_RAW_SEND_RESP_V01
  (void)QMI_node.update_default_qmi_wms_raw_send_resp_msg(
        QMI_RESULT_FAILURE_V01, QMI_ERR_MSG_BLOCKED_V01, 0x01);
  t.inject(QMI_node);

  IMS_node.update_default_ims_send_sms_response();
  IMS_node.set_ims_error_value(ims_Error_E_FDN_CHECK_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_mt_3gpp_sms_001
@description: Emulate basic incoming sms
==**/
test_result ril_utf_ims_mt_3gpp_sms_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mt_3gpp_sms_001");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01 , 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  QMI_node.set_qmi_wms_event_report_ind_sms_on_ims(1);
  t.inject(QMI_node);

  // Expect: unsol IMS 3GPP SMS
  utf_ims_mt_sms_t* ims_sms = IMS_node.update_default_ims_mt_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  IMS_node.set_ims_mt_sms_payload({0x00, 0xBB, 0xAA, 0x32, 0xAF, 0xDE, 0x42, 0xFF, 0xFF});
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_3gpp_sms_002
@description: need ack for first so second msg dropped
==**/
test_result ril_utf_ims_mt_3gpp_sms_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mt_3gpp_sms_002");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  QMI_node.set_qmi_wms_event_report_ind_sms_on_ims(1);
  t.inject(QMI_node);

  // Expect: unsol IMS 3GPP SMS
  utf_ims_mt_sms_t* ims_sms = IMS_node.update_default_ims_mt_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  IMS_node.set_ims_mt_sms_payload({0x00, 0xBB, 0xAA, 0x32, 0xAF, 0xDE, 0x42, 0xFF, 0xFF});
  t.expect(IMS_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  // - this will be ignored since ATEL hasn't acknowledged the previous one
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "FFFFFFFFFFFFFFFF");
  QMI_node.set_qmi_wms_event_report_ind_sms_on_ims(1);
  t.inject(QMI_node);

  // Inject: IMS ACK SMS request
  utf_ims_ack_sms_t* ack_sms = IMS_node.update_default_ims_ack_sms();
  ack_sms->delivery_result = 0;
  t.inject(IMS_node);

  // Expect: QMI_WMS_SEND_ACK_REQ_V01
  wms_send_ack_req_msg_v01* ack_req = QMI_node.update_default_qmi_wms_send_ack_req_msg();
  ack_req->ack_information.transaction_id = 0;
  ack_req->ack_information.success = 0x01;
  ack_req->ack_information.message_protocol = WMS_MESSAGE_PROTOCOL_WCDMA_V01;
  QMI_node.ril_utf_qmiril_if::set_qmi_wms_send_ack_req_sms_on_ims(1);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SEND_ACK_RESP_V01
  QMI_node.update_default_qmi_wms_send_ack_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // NO ack response for IMS SMS

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_3gpp_sms_003
@description: need ack for neither so both reported to ATEL
==**/
test_result ril_utf_ims_mt_3gpp_sms_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mt_3gpp_sms_003");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  QMI_node.set_qmi_wms_event_report_ind_sms_on_ims(1);
  t.inject(QMI_node);

  // Expect: unsol IMS 3GPP SMS
  utf_ims_mt_sms_t* ims_sms = IMS_node.update_default_ims_mt_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  IMS_node.set_ims_mt_sms_payload({0x00, 0xBB, 0xAA, 0x32, 0xAF, 0xDE, 0x42, 0xFF, 0xFF});
  t.expect(IMS_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  // - this will be ignored since ATEL hasn't acknowledged the previous one
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "FFFFFFFFFFFFFFFF");
  QMI_node.set_qmi_wms_event_report_ind_sms_on_ims(1);
  t.inject(QMI_node);

  // Expect: unsol IMS 3GPP SMS
  ims_sms = IMS_node.update_default_ims_mt_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  IMS_node.set_ims_mt_sms_payload({0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF});
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_3gpp_sms_004
@description: need ack for first so second msg dropped
==**/
test_result ril_utf_ims_mt_3gpp_sms_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mt_3gpp_sms_004");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_DO_NOT_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  QMI_node.set_qmi_wms_event_report_ind_sms_on_ims(1);
  t.inject(QMI_node);

  // Expect: unsol IMS 3GPP SMS
  utf_ims_mt_sms_t* ims_sms = IMS_node.update_default_ims_mt_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  IMS_node.set_ims_mt_sms_payload({0x00, 0xBB, 0xAA, 0x32, 0xAF, 0xDE, 0x42, 0xFF, 0xFF});
  t.expect(IMS_node);

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  // - this will be ignored since ATEL hasn't acknowledged the previous one
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "FFFFFFFFFFFFFFFF");
  QMI_node.set_qmi_wms_event_report_ind_sms_on_ims(1);
  t.inject(QMI_node);

  // Expect: unsol IMS 3GPP SMS
  ims_sms = IMS_node.update_default_ims_mt_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  IMS_node.set_ims_mt_sms_payload({0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF});
  t.expect(IMS_node);

  // Inject: IMS ACK SMS request
  utf_ims_ack_sms_t* ack_sms = IMS_node.update_default_ims_ack_sms();
  ack_sms->delivery_result = 0;
  t.inject(IMS_node);

  // Expect: QMI_WMS_SEND_ACK_REQ_V01
  wms_send_ack_req_msg_v01* ack_req = QMI_node.update_default_qmi_wms_send_ack_req_msg();
  ack_req->ack_information.transaction_id = 0;
  ack_req->ack_information.success = 0x01;
  ack_req->ack_information.message_protocol = WMS_MESSAGE_PROTOCOL_WCDMA_V01;
  QMI_node.ril_utf_qmiril_if::set_qmi_wms_send_ack_req_sms_on_ims(1);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SEND_ACK_RESP_V01
  QMI_node.update_default_qmi_wms_send_ack_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // NO ack response for IMS SMS

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_3gpp_sms_005
@description: acknowledge with no_mem error code
==**/
test_result ril_utf_ims_mt_3gpp_sms_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mt_3gpp_sms_005");
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_wms_event_report_ind_msg();
  QMI_node.set_qmi_wms_event_report_ind_transfer_route_mt_message(WMS_ACK_INDICATOR_SEND_ACK_V01, 0,
    WMS_MESSAGE_FORMAT_GW_PP_V01, "BBAA32AFDE42FFFF");
  QMI_node.set_qmi_wms_event_report_ind_sms_on_ims(1);
  t.inject(QMI_node);

  // Expect: unsol IMS 3GPP SMS
  utf_ims_mt_sms_t* ims_sms = IMS_node.update_default_ims_mt_sms();
  ims_sms->tech = RADIO_TECH_3GPP;
  IMS_node.set_ims_mt_sms_payload({0x00, 0xBB, 0xAA, 0x32, 0xAF, 0xDE, 0x42, 0xFF, 0xFF});
  t.expect(IMS_node);

  // Inject: IMS ACK SMS request with error code NO_MEMORY
  utf_ims_ack_sms_t* ack_sms = IMS_node.update_default_ims_ack_sms();
  ack_sms->delivery_result = 2;
  t.inject(IMS_node);

  // Expect: QMI_WMS_SEND_ACK_REQ_V01
  wms_send_ack_req_msg_v01* ack_req = QMI_node.update_default_qmi_wms_send_ack_req_msg();
  ack_req->ack_information.transaction_id = 0;
  ack_req->ack_information.success = 0x00;
  ack_req->ack_information.message_protocol = WMS_MESSAGE_PROTOCOL_WCDMA_V01;
  ack_req->wms_3gpp_failure_information_valid = TRUE;
  ack_req->wms_3gpp_failure_information.rp_cause = WMS_RP_CAUSE_MEMORY_CAP_EXCEEDED_ACK_V01;
  ack_req->wms_3gpp_failure_information.tp_cause = WMS_TP_CAUSE_MEMORY_CAP_EXCEEDED_V01;
  QMI_node.ril_utf_qmiril_if::set_qmi_wms_send_ack_req_sms_on_ims(1);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SEND_ACK_RESP_V01
  QMI_node.update_default_qmi_wms_send_ack_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // NO ack response for IMS SMS

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_get_smsc_address_001
@description: Request SMSC address
==**/
test_result ril_utf_get_smsc_address_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_GET_SMSC_ADDRESS
  RIL_node.update_default_ril_request_get_smsc_address();
  t.inject(RIL_node);

  // Expect: QMI_WMS_GET_SMSC_ADDRESS_REQ_V01
  QMI_node.update_default_qmi_wms_get_smsc_address_req();
  t.expect(QMI_node);

  // Inject: QMI_WMS_GET_SMSC_ADDRESS_RESP_V01
  wms_smsc_address_type_v01* smsc = QMI_node.update_default_qmi_wms_get_smsc_address_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  smsc->smsc_address_type[0] = 't';
  smsc->smsc_address_type[1] = 'y';
  smsc->smsc_address_type[2] = 'p';
  smsc->smsc_address_digits_len = 4;
  smsc->smsc_address_digits[0] = '1';
  smsc->smsc_address_digits[1] = '2';
  smsc->smsc_address_digits[2] = '3';
  smsc->smsc_address_digits[3] = '4';
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_GET_SMSC_ADDRESS (resp)
  RIL_node.update_default_ril_request_get_smsc_address_resp("\"1234\",typ");
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_gsm_sms_broadcast_activation_001
@description: Activate gsm sms broadcast
==**/
test_result ril_utf_gsm_sms_broadcast_activation_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_GSM_SMS_BROADCAST_ACTIVATION
  auto confignode = RIL_node.update_default_ril_request_gsm_sms_broadcast_activation();
  confignode->activation_state = RIL_GSM_SMS_BROADCAST_ACTIVATE;
  t.inject(RIL_node);

  // Expect: QMI_WMS_SET_BROADCAST_ACTIVATION_REQ_V01
  auto broadcast_node = QMI_node.update_default_qmi_wms_set_broadcast_activation_req_msg();
  broadcast_node->message_mode = WMS_MESSAGE_MODE_GW_V01;
  broadcast_node->bc_activate = 1;
  t.expect(QMI_node);

  // Inject: QMI_WMS_SET_BROADCAST_ACTIVATION_RESP_V01
  QMI_node.update_qmi_wms_set_broadcast_activation_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_GSM_SMS_BROADCAST_ACTIVATION (resp)
  RIL_node.update_default_ril_request_gsm_sms_broadcast_activation_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_cdma_sms_broadcast_activation_001
@description: Activate cdma sms broadcast
==**/
test_result ril_utf_cdma_sms_broadcast_activation_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_CDMA_SMS_BROADCAST_ACTIVATION
  auto confignode = RIL_node.update_default_ril_request_cdma_sms_broadcast_activation();
  confignode->activation_state = RIL_CDMA_SMS_BROADCAST_ACTIVATE;
  t.inject(RIL_node);

  // Expect: QMI_WMS_SET_BROADCAST_ACTIVATION_REQ_V01
  auto broadcast_node = QMI_node.update_default_qmi_wms_set_broadcast_activation_req_msg();
  broadcast_node->message_mode = WMS_MESSAGE_MODE_CDMA_V01;
  broadcast_node->bc_activate = 1;
  t.expect(QMI_node);

  // Inject: QMI_WMS_SET_BROADCAST_ACTIVATION_RESP_V01
  QMI_node.update_qmi_wms_set_broadcast_activation_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_SMS_BROADCAST_ACTIVATION (resp)
  RIL_node.update_default_ril_request_cdma_sms_broadcast_activation_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_report_sms_memory_status_001
@description: Report sms memory full
==**/
test_result ril_utf_report_sms_memory_status_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_REPORT_SMS_MEMORY_STATUS
  auto statusnode = RIL_node.update_default_ril_request_report_sms_memory_status();
  statusnode->sms_memory_status = RIL_SMS_MEMORY_STATUS_EXCEEDED;
  t.inject(RIL_node);

  // Expect: QMI_WMS_SET_MEMORY_STATUS_REQ_V01
  QMI_node.update_default_qmi_wms_set_memory_status_req_msg(0);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SET_MEMORY_STATUS_RESP_V01
  QMI_node.update_default_qmi_wms_set_memory_status_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_REPORT_SMS_MEMORY_STATUS (resp)
  RIL_node.update_default_ril_request_report_sms_memory_status_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_get_gsm_broadcast_config_001
@description: Get gsm broadcast config
==**/
test_result ril_utf_get_gsm_broadcast_config_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_GSM_GET_BROADCAST_SMS_CONFIG
  RIL_node.update_default_ril_request_gsm_get_broadcast_sms_config();
  t.inject(RIL_node);

  // Expect: QMI_WMS_GET_BROADCAST_CONFIG_REQ_V01
  QMI_node.update_default_qmi_wms_get_broadcast_config_req_msg(WMS_MESSAGE_MODE_GW_V01);
  t.expect(QMI_node);

  // Inject: QMI_WMS_GET_BROADCAST_CONFIG_RESP_V01
  QMI_node.update_default_qmi_wms_get_broadcast_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  wms_get_broadcast_config_resp_msg_v01 bc_config_resp;
  memset(&bc_config_resp, 0x00, sizeof(bc_config_resp));
  bc_config_resp.wms_3gpp_broadcast_info_valid = 1;
  bc_config_resp.wms_3gpp_broadcast_info.wms_3gpp_broadcast_config_info_len = 1;
  bc_config_resp.wms_3gpp_broadcast_info.wms_3gpp_broadcast_config_info[0].from_service_id = 1;
  bc_config_resp.wms_3gpp_broadcast_info.wms_3gpp_broadcast_config_info[0].to_service_id = 2;
  bc_config_resp.wms_3gpp_broadcast_info.wms_3gpp_broadcast_config_info[0].selected = 1;
  QMI_node.set_wms_get_broadcast_config_resp(bc_config_resp);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_GSM_GET_BROADCAST_SMS_CONFIG (resp)
  auto config_nodes = RIL_node.update_default_ril_request_gsm_get_broadcast_sms_config_resp(1);
  if(config_nodes) {
    config_nodes[0]->fromServiceId = 1;
    config_nodes[0]->toServiceId = 2;
    config_nodes[0]->fromCodeScheme = 0xfff;
    config_nodes[0]->toCodeScheme = 0xfff;
    config_nodes[0]->selected = 1;
  }

  RIL_node.set_expect_skip_verification_status(false); //Skip since it requires custom verify
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_set_gsm_broadcast_config_001
@description: Set gsm broadcast config
==**/
test_result ril_utf_set_gsm_broadcast_config_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_GSM_SET_BROADCAST_SMS_CONFIG
  auto config_nodes = RIL_node.update_default_ril_request_gsm_set_broadcast_sms_config(1);
  if(config_nodes) {
    config_nodes[0]->fromServiceId = 1;
    config_nodes[0]->toServiceId = 2;
    config_nodes[0]->fromCodeScheme = 0xfff;
    config_nodes[0]->toCodeScheme = 0xfff;
    config_nodes[0]->selected = 1;
  }
  t.inject(RIL_node);

  // Expect: QMI_WMS_SET_BROADCAST_CONFIG_REQ_V01
  QMI_node.update_deafult_qmi_wms_set_broadcast_config_req_msg(WMS_MESSAGE_MODE_GW_V01);
  wms_set_broadcast_config_req_msg_v01 bc_config_req;
  memset(&bc_config_req, 0x00, sizeof(bc_config_req));
  bc_config_req.wms_3gpp_broadcast_config_info_valid = 1;
  bc_config_req.wms_3gpp_broadcast_config_info_len = 1;
  bc_config_req.wms_3gpp_broadcast_config_info[0].from_service_id = 1;
  bc_config_req.wms_3gpp_broadcast_config_info[0].to_service_id = 2;
  bc_config_req.wms_3gpp_broadcast_config_info[0].selected = 1;
  QMI_node.set_wms_set_broadcast_config_req(bc_config_req);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SET_BROADCAST_CONFIG_RESP_V01
  QMI_node.update_default_qmi_wms_set_broadcast_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_GSM_SET_BROADCAST_SMS_CONFIG (resp)
  RIL_node.update_default_ril_request_gsm_set_broadcast_sms_config_resp();

  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_get_cdma_broadcast_config_001
@description: Get cdma broadcast config
==**/
test_result ril_utf_get_cdma_broadcast_config_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_CDMA_GET_BROADCAST_SMS_CONFIG
  RIL_node.update_default_ril_request_cdma_get_broadcast_sms_config();
  t.inject(RIL_node);

  // Expect: QMI_WMS_GET_BROADCAST_CONFIG_REQ_V01
  QMI_node.update_default_qmi_wms_get_broadcast_config_req_msg(WMS_MESSAGE_MODE_CDMA_V01);
  t.expect(QMI_node);

  // Inject: QMI_WMS_GET_BROADCAST_CONFIG_RESP_V01
  QMI_node.update_default_qmi_wms_get_broadcast_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  wms_get_broadcast_config_resp_msg_v01 bc_config_resp;
  memset(&bc_config_resp, 0x00, sizeof(bc_config_resp));
  bc_config_resp.wms_3gpp2_broadcast_info_valid = 1;
  bc_config_resp.wms_3gpp2_broadcast_info.wms_3gpp2_broadcast_config_info_len = 1;
  bc_config_resp.wms_3gpp2_broadcast_info.wms_3gpp2_broadcast_config_info[0].language =
                                                                         WMS_LANGUAGE_ENGLISH_V01;
  bc_config_resp.wms_3gpp2_broadcast_info.wms_3gpp2_broadcast_config_info[0].service_category
                                                        = WMS_SERVICE_CAT_EMERGENCY_BROADCAST_V01;
  bc_config_resp.wms_3gpp2_broadcast_info.wms_3gpp2_broadcast_config_info[0].selected = 1;
  QMI_node.set_wms_get_broadcast_config_resp(bc_config_resp);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_GET_BROADCAST_SMS_CONFIG (resp)
  auto config_nodes = RIL_node.update_default_ril_request_cdma_get_broadcast_sms_config_resp(1);
  if(config_nodes) {
    config_nodes[0]->language = 1;
    config_nodes[0]->service_category = 1;
    config_nodes[0]->selected = 1;
  }

  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_set_cdma_broadcast_config_001
@description: Set cdma broadcast config
==**/
test_result ril_utf_set_cdma_broadcast_config_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_CDMA_SET_BROADCAST_SMS_CONFIG
  auto config_nodes = RIL_node.update_default_ril_request_cdma_set_broadcast_sms_config(1);
  if(config_nodes) {
    config_nodes[0]->language = 1;
    config_nodes[0]->service_category = 1;
    config_nodes[0]->selected = 1;
  }
  t.inject(RIL_node);

  // Expect: QMI_WMS_SET_BROADCAST_CONFIG_REQ_V01
  QMI_node.update_deafult_qmi_wms_set_broadcast_config_req_msg(WMS_MESSAGE_MODE_CDMA_V01);
  wms_set_broadcast_config_req_msg_v01 bc_config_req;
  memset(&bc_config_req, 0x00, sizeof(bc_config_req));
  bc_config_req.wms_3gpp2_broadcast_config_info_valid = 1;
  bc_config_req.wms_3gpp2_broadcast_config_info_len = 1;
  bc_config_req.wms_3gpp2_broadcast_config_info[0].language = WMS_LANGUAGE_ENGLISH_V01;
  bc_config_req.wms_3gpp2_broadcast_config_info[0].service_category =
                                                WMS_SERVICE_CAT_EMERGENCY_BROADCAST_V01;
  bc_config_req.wms_3gpp2_broadcast_config_info[0].selected = 1;
  QMI_node.set_wms_set_broadcast_config_req(bc_config_req);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SET_BROADCAST_CONFIG_RESP_V01
  QMI_node.update_default_qmi_wms_set_broadcast_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_SET_BROADCAST_SMS_CONFIG (resp)
  RIL_node.update_default_ril_request_cdma_set_broadcast_sms_config_resp();

  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_write_sms_to_sim_001
@description: Write SMS to sim
==**/
test_result ril_utf_write_sms_to_sim_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: QMI_WMS_RAW_WRITE_REQ_V01
  auto write_sms = RIL_node.update_default_ril_request_write_sms_to_sim();
  strlcpy(write_sms->smsc, "8012452313", strlen("8012452313")+1);
  strlcpy(write_sms->pdu, "sometext", strlen("sometext")+1);
  write_sms->status = 0;
  t.inject(RIL_node);

  // Expect: QMI_WMS_RAW_WRITE_RESP_V01
  QMI_node.update_default_qmi_wms_raw_write_req_msg("8012452313",
                    "sometext", WMS_MESSAGE_FORMAT_GW_PP_V01, WMS_TAG_TYPE_MT_NOT_READ_V01);
  t.expect(QMI_node);

  // Inject: QMI_WMS_SET_BROADCAST_CONFIG_RESP_V01
  QMI_node.update_default_qmi_wms_raw_write_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01, 1);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_WRITE_SMS_TO_SIM (resp)
  auto write_node = RIL_node.update_default_ril_request_write_sms_to_sim_resp();
  write_node->response = 2; //1 based index for Android
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_unsol_sms_memory_full_001
@description: Send SMS memory full indication to Telephony
==**/
test_result ril_utf_unsol_sms_memory_full_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_WRITE_SMS_TO_SIM
  auto write_sms = RIL_node.update_default_ril_request_write_sms_to_sim();
  strlcpy(write_sms->smsc, "8012452313", strlen("8012452313")+1);
  strlcpy(write_sms->pdu, "sometext", strlen("sometext")+1);
  write_sms->status = 0;
  t.inject(RIL_node);

  // Expect: QMI_WMS_RAW_WRITE_REQ_V01
  QMI_node.update_default_qmi_wms_raw_write_req_msg("8012452313",
                    "sometext", WMS_MESSAGE_FORMAT_GW_PP_V01, WMS_TAG_TYPE_MT_NOT_READ_V01);
  t.expect(QMI_node);

  // Inject: QMI_WMS_RAW_WRITE_RESP_V01
  QMI_node.update_default_qmi_wms_raw_write_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01, 1);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_WRITE_SMS_TO_SIM (resp)
  auto write_node = RIL_node.update_default_ril_request_write_sms_to_sim_resp();
  write_node->response = 2; //1 based index for Android
  t.expect(RIL_node);

  // Inject:
  auto sms_memory_indication = QMI_node.update_default_qmi_wms_memory_full_ind_msg();
  sms_memory_indication->message_mode = WMS_MESSAGE_MODE_GW_V01;
  sms_memory_indication->storage_type = WMS_STORAGE_TYPE_UIM_V01;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SIM_SMS_STORAGE_FULL (unsol)
  RIL_node.update_default_ril_unsol_sim_sms_storage_full();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_unsol_sms_memory_full_002
@description: Send SMS memory full indication to Telephony for CDMA
==**/
test_result ril_utf_unsol_sms_memory_full_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("SMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // INJECT: QMI_WMS_SERVICE_READY_IND_V01
  QMI_node.update_default_qmi_wms_service_ready_ind(WMS_SERVICE_READY_STATUS_3GPP_AND_3GPP2_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_EVT_HOOK_UNSOL_WMS_READY
  OEM_node.update_default_qcril_evt_hook_unsol_wms_ready();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
  t.set_end();

  // Inject:
  auto sms_memory_indication = QMI_node.update_default_qmi_wms_memory_full_ind_msg();
  sms_memory_indication->message_mode = WMS_MESSAGE_MODE_CDMA_V01;
  sms_memory_indication->storage_type = WMS_STORAGE_TYPE_UIM_V01;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CDMA_RUIM_SMS_STORAGE_FULL (unsol)
  RIL_node.update_default_ril_unsol_ruim_sms_storage_full();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_oem_testcase_001
@description: first OEM test case designed to exercise sending and receiving msgs
==**/
test_result ril_utf_oem_testcase_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_oem_testcase_001");
  t.set_test_attribute("OEM");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_NAS_LTE_SIB16_NETWORK_TIME_IND_V01
  QMI_node.update_default_qmi_nas_lte_sib16_network_time_ind();
  QMI_node.set_qmi_nas_lte_sib16_network_time_ind_lte_sib16_acquired(NAS_TRI_TRUE_V01);
  t.inject(QMI_node);

  // Expect: QMI_EMBMS_UNSOL_SIB16_COVERAGE_IND_V01
  OEM_node.update_default_qmi_embms_unsol_sib16_coverage_ind_v01();
  OEM_node.set_qmi_embms_unsol_sib16_coverage_ind_v01_in_converage(1);
  t.expect(OEM_node);

  // Inject: QMI_EMBMS_GET_SIB16_COVERAGE_REQ_V01
  OEM_node.update_default_qmi_embms_get_sib16_coverage_req_v01();
  t.inject(OEM_node);

  // Expect: QMI_EMBMS_GET_SIB16_COVERAGE_RESP_V01
  OEM_node.update_default_qmi_embms_get_sib16_coverage_resp_v01();
  OEM_node.set_qmi_embms_get_sib16_coverage_resp_v01_in_converage(1);
  t.expect(OEM_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_260696_001
@description: MO IMS call is made with isconferenceuri enabled.
==**/
test_result ril_utf_retro_gerrit_260696_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_260696_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  IMS_node.set_ims_request_dial_isconferenceuri();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("Conference Call");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_IP_V02);
  //QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_conf_uri_list("2428536960");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_mo_multi_001
@description: 2 MO LTE calls through IMS
==**/
test_result ril_utf_ims_mo_multi_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mo_multi_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* dial = IMS_node.update_default_ims_request_dial("2428536961");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536961");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_HOLDING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_mt_call_001
@description: MO call with MT call waiting
==**/
test_result ril_utf_ims_mo_mt_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mo_mt_call_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_WAITING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = 1;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_ACTIVE;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(2);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = 1;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_vt_call_001
@description: creates MO call and upgrades to VT
==**/
test_result ril_utf_ims_vt_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_vt_call_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x03);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_clip_testcase_001
@description:
==**/
test_result ril_utf_clip_testcase_001(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;

  t.set_test_id("ril_utf_clip_testcase_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_CLIP
  RIL_node.update_default_ril_request_query_clip();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_clip_response (ACTIVE_STATUS_ACTIVE_V02, PROVISION_STATUS_PROVISIONED_PERMANENT_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CLIP (resp)
  RIL_node.update_default_ril_request_query_clip_resp(1);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_QUERY_CLIP
  RIL_node.update_default_ril_request_query_clip();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_clip_response (ACTIVE_STATUS_INACTIVE_V02, PROVISION_STATUS_PROVISIONED_PERMANENT_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CLIP (resp)
  RIL_node.update_default_ril_request_query_clip_resp(0);
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_clip_testcase_002
@description:
==**/
test_result ril_utf_clip_testcase_002(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_clip_testcase_002");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_CLIP
  RIL_node.update_default_ril_request_query_clip();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_NO_NETWORK_FOUND_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CLIP (resp)
  RIL_node.update_default_ril_request_query_clip_resp(1);
  RIL_node.set_expect_skip_verification_status(false); // no payload when error
  RIL_node.set_ril_error_value(RIL_E_NO_NETWORK_FOUND);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_clip_testcase_003
@description:
==**/
test_result ril_utf_clip_testcase_003(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_clip_testcase_003");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_CLIP
  RIL_node.update_default_ril_request_query_clip();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_NO_NETWORK_FOUND_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_sip_error_code(400);
  uint16_t description[] = {85, 110, 97, 98, 108, 101, 32, 116,
                          111, 32, 102, 105, 110, 100, 32, 112,
                          97, 114, 101, 110, 116, 32, 111, 102,
                          32, 110, 111, 100, 101, 0};
  QMI_node.set_qmi_voice_get_clip_resp_msg_failure_cause_description(30, description);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CLIP (resp)
  RIL_node.update_default_ril_request_query_clip_resp(1);
  RIL_node.set_expect_skip_verification_status(false); // no payload when error
  RIL_node.set_ril_error_value(RIL_E_NO_NETWORK_FOUND);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_facility_lock_testcase_001
@description:
==**/
test_result ril_utf_facility_lock_testcase_001(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;

  t.set_test_id("ril_utf_facility_lock_testcase_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_FACILITY_LOCK
  char **data = RIL_node.update_default_ril_request_query_facility_lock();
  strlcpy(data[0], "AO", 10);
  strlcpy(data[1], "", 10);
  strlcpy(data[2], "0", 40);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg((voice_reason_enum_v02)0x07);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_FACILITY_LOCK (resp)
  RIL_node.update_default_ril_request_query_facility_lock_resp(0);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_facility_lock_testcase_002
@description:
==**/
test_result ril_utf_facility_lock_testcase_002(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;

  t.set_test_id("ril_utf_facility_lock_testcase_002");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_FACILITY_LOCK
  char **data = RIL_node.update_default_ril_request_set_facility_lock();
  strlcpy(data[0], "OI", 10);
  strlcpy(data[1], "1", 10);
  strlcpy(data[2], "", 40);
  strlcpy(data[3], "0", 40);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg((voice_service_enum_v02)0x01, (voice_reason_enum_v02)0x08);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_FACILITY_LOCK
  RIL_node.update_default_ril_request_set_facility_lock_resp();
  t.expect(RIL_node);

  // with password

  // Inject: RIL_REQUEST_SET_FACILITY_LOCK
  data = RIL_node.update_default_ril_request_set_facility_lock();
  strlcpy(data[0], "OI", 10);
  strlcpy(data[1], "1", 10);
  strlcpy(data[2], "1111", 10);
  strlcpy(data[3], "0", 10);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg((voice_service_enum_v02)0x01, (voice_reason_enum_v02)0x08);
  QMI_node.set_qmi_voice_set_sups_service_req_password("1111");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_FACILITY_LOCK
  RIL_node.update_default_ril_request_set_facility_lock_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_facility_lock_testcase_003
@description:
==**/
test_result ril_utf_facility_lock_testcase_003(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;

  t.set_test_id("ril_utf_facility_lock_testcase_003");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_FACILITY_LOCK
  char **data = RIL_node.update_default_ril_request_query_facility_lock();
  strlcpy(data[0], "AC", 10);
  strlcpy(data[1], "", 10);
  strlcpy(data[2], "0", 10);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg((voice_reason_enum_v02)0x0E);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_FACILITY_LOCK (resp)
  RIL_node.update_default_ril_request_query_facility_lock_resp(0);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_facility_lock_testcase_004
@description:
==**/
test_result ril_utf_facility_lock_testcase_004(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;

  t.set_test_id("ril_utf_facility_lock_testcase_004");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_FACILITY_LOCK
  char **data = RIL_node.update_default_ril_request_query_facility_lock();
  strlcpy(data[0], "AI", 10);
  strlcpy(data[1], "", 10);
  strlcpy(data[2], "0", 10);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg((voice_reason_enum_v02)0x0A);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_FACILITY_LOCK (resp)
  RIL_node.update_default_ril_request_query_facility_lock_resp(0);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_facility_lock_testcase_005
@description:
==**/
test_result ril_utf_facility_lock_testcase_005(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_facility_lock_testcase_005");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_FACILITY_LOCK
  char **data = RIL_node.update_default_ril_request_query_facility_lock();
  strlcpy(data[0], "AI", 10);
  strlcpy(data[1], "", 10);
  strlcpy(data[2], "0", 10);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg((voice_reason_enum_v02)0x0A);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_NO_NETWORK_FOUND_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_FACILITY_LOCK (resp)
  RIL_node.update_default_ril_request_query_facility_lock_resp(0);
  RIL_node.set_expect_skip_verification_status(false); // no payload when error
  RIL_node.set_ril_error_value(RIL_E_NO_NETWORK_FOUND);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_fail_001
@description: This test creates an MO call through a dial request. The call fails at the Origination stage.
==**/
test_result ril_utf_test_mo_call_fail_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_fail_001");
  t.set_test_description("This test creates an MO call through a dial request. The call fails at the Origination stage.");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Call end reason
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_FADE_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_RADIO_LINK_LOST;
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();

} // ril_utf_test_mo_call_fail_001


/**==
@testname: ril_utf_test_mo_call_fail_002
@description: This test creates an MO call through a dial request. The call fails at the Alerting stage.
==**/
test_result ril_utf_test_mo_call_fail_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_fail_002");
  t.set_test_description("This test creates an MO call through a dial request. The call fails at the Alerting stage.");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Call end reason
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NO_SRV_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_OUT_OF_SERVICE;
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();

} // ril_utf_test_mo_call_fail_002


/**==
@testname: ril_utf_test_mo_call_fail_003
@description: This test creates an MO call through a dial request. The call fails due to Dial Response error.
==**/
test_result ril_utf_test_mo_call_fail_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_fail_003");
  t.set_test_description("This test creates an MO call through a dial request. The call fails due to Dial Response error.");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();

} // ril_utf_test_mo_call_fail_003

/**==
@testname: ril_utf_test_mo_call_fail_004
@description: This test creates an MO call through a dial request. The call fails due to Dial Response error. Dial response doesnot contain call_id TLV.
==**/
test_result ril_utf_test_mo_call_fail_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("This test creates an MO call through a dial request. The call fails due to Dial Response error. Dial response doesnot contain call_id TLV");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_UNKNOWN_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_NO_NETWORK_FOUND_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_NO_NETWORK_FOUND);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
} // ril_utf_test_mo_call_fail_004

/**==
@testname: ril_utf_test_mo_call_fail_005
@description: Empty number
==**/
test_result ril_utf_test_mo_call_fail_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  TimeoutNode Timeout_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("");
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_INVALID_ARGUMENTS);
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_test_mo_call_fail_005

/**==
@testname: ril_utf_test_mo_call_fail_006
@description: Long number in DIAL request
==**/
test_result ril_utf_test_mo_call_fail_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  TimeoutNode Timeout_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("185755254556685865865865656568865658568685685555566565656535536666666666666658800000000");
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_INVALID_ARGUMENTS);
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_test_mo_call_fail_006


/**==
@testname: ril_utf_test_hangup_fail_001
@description: This test creates an MO call through a dial request. The hangup request
              to tear down the call fails.
==**/
test_result ril_utf_test_hangup_fail_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_hangup_fail_001");
  t.set_test_description("This test creates an MO call through a dial request. The hangup request to tear down the call fails.");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();

} // ril_utf_test_hangup_fail_001

/**==
@testname: ril_utf_test_timeout_dial_001
@description: ATEL sends Dial request, get dial resp from QMI but no ALL_CALL_STATUS
              indication for more than 72 seconds. Timeout and send failed Dial
              response to ATEL.
@
==**/
test_result ril_utf_test_timeout_dial_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  TimeoutNode Timeout_node;

  t.set_test_id("ril_utf_test_timeout_dial_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Timeout
  t.sleep(74000);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_INTERNAL_ERR);
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_test_timeout_dial_001

/**==
@testname: ril_utf_test_wrong_fail_cause_001
@description: Two active calls, one ends with a fail cause, report call status change to ATEL,
              ATEL queries for current calls and finds out first call has ended, second call
              fails with a different fail type before ATEL queries last call fail cause for
              the first call, incorrectly update ATEL with second call's fail cause for the
              first one. This test case should ideally fail!
              CR: http://prism/CR/636136
@
==**/
test_result ril_utf_test_wrong_fail_cause_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_wrong_fail_cause_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("4428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("4428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Call end reason
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_CLIENT_END_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("4428536960");
  strlcpy(number_list[0].number, "4428536960", strlen("4428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Call end reason
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NO_SRV_V02;
  t.inject(QMI_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE (for call ID 1, that failed earlier)
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  t.set_start();

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  //fail_cause->cause_code = CALL_FAIL_NORMAL;                      // Call 1's reason
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;           // Call 2's reason
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE (for call ID 2, that failed later)
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  //fail_cause->cause_code = CALL_FAIL_NORMAL;                      // Call 1's reason
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;           // Call 2's reason
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
} // ril_utf_test_wrong_fail_cause_001

/**==
@testname: ril_utf_retro_gerrit_318335_001
@description: IMS conference. Call mode is NO_SERVE for ORIGINATING and ALERTING call states
==**/
test_result ril_utf_retro_gerrit_318335_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_318335_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* dial = IMS_node.update_default_ims_request_dial("2428536961");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536961");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_CONFERENCE
  IMS_node.update_default_ims_request_conference();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_CONFERENCE (resp)
  IMS_node.update_default_ims_request_conference_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[2].call_id = 3;
  call_info[2].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[2].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = CALL_MODE_NO_SRV_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[2].call_id = 3;
  call_info[2].call_state = CALL_STATE_ALERTING_V02;
  call_info[2].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = CALL_MODE_NO_SRV_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[2].call_id = 3;
  call_info[2].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[2].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 1;
  call_info[2].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(3);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 0;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 2;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 2;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_ACTIVE;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->isMpty = 0;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 0;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[2]->has_index = TRUE;
  calls[2]->index = 1;
  calls[2]->has_state = TRUE;
  calls[2]->state = ims_CallState_CALL_HOLDING;
  calls[2]->has_toa = TRUE;
  calls[2]->toa = 129;
  calls[2]->has_isMpty = TRUE;
  calls[2]->isMpty = 0;
  calls[2]->has_isMT = TRUE;
  calls[2]->has_als = TRUE;
  calls[2]->has_isVoice = TRUE;
  calls[2]->isVoice     = 1;
  calls[2]->has_isVoicePrivacy = TRUE;
  calls[2]->isVoicePrivacy     = 0;
  calls[2]->has_numberPresentation = TRUE;
  calls[2]->numberPresentation     = 0;
  calls[2]->has_namePresentation = TRUE;
  calls[2]->namePresentation     = 0;
  calls[2]->callDetails.has_callDomain = TRUE;
  calls[2]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[2]->callDetails.has_callType = TRUE;
  calls[2]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[2].call_id = 3;
  call_info[2].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[2].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 1;
  call_info[2].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 0;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->has_index = TRUE;
  calls[1]->index = 2;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_ACTIVE;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->isMpty = 0;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 3;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("2428536961");
  strlcpy(number_list[0].number, "2428536961", strlen("2428536961")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 0;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(3);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(3);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  voice_call_end_reason_type_v02* end_reason = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end_reason[0].call_end_reason = CALL_END_CAUSE_NETWORK_END_V02;
  end_reason[0].call_id = 3;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_get_clir_success
@description: GET_CLIR success scenario
==**/
test_result ril_utf_ims_get_clir_success(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_get_clir_success");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_GET_CLIR
  IMS_node.update_default_ims_request_get_clir();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIR_REQ_V02
  QMI_node.update_default_qmi_voice_get_clir_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIR_RESP_V02
  QMI_node.update_default_qmi_voice_get_clir_resp_msg(
      QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  QMI_node.set_qmi_void_get_clir_resp_clir_response(
      ACTIVE_STATUS_ACTIVE_V02,
      PROVISION_STATUS_PRESENTATION_ALLOWED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_GET_CLIR (resp)
  IMS_node.update_default_ims_request_get_clir_resp();
  IMS_node.set_ims_request_get_clir_resp_param_m(4);  // QCRIL_QMI_VOICE_CLIR_SRV_PRESENTATION_ALLOWED
  IMS_node.set_ims_request_get_clir_resp_param_n(0);  // QCRIL_QMI_VOICE_SS_CLIR_PRESENTATION_INDICATOR
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_CLIR
  IMS_node.update_default_ims_request_set_clir();
  IMS_node.set_ims_request_set_clir_param_n(
          QCRIL_QMI_VOICE_SS_CLIR_INVOCATION_OPTION);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_CLIR (resp)
  IMS_node.update_default_ims_request_set_clir_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CLIR
  IMS_node.update_default_ims_request_get_clir();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIR_REQ_V02
  QMI_node.update_default_qmi_voice_get_clir_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIR_RESP_V02
  QMI_node.update_default_qmi_voice_get_clir_resp_msg(
      QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  QMI_node.set_qmi_void_get_clir_resp_clir_response(
      ACTIVE_STATUS_ACTIVE_V02,
      PROVISION_STATUS_PRESENTATION_RESTRICTED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_GET_CLIR (resp)
  IMS_node.update_default_ims_request_get_clir_resp();
  IMS_node.set_ims_request_get_clir_resp_param_m(
          QCRIL_QMI_VOICE_CLIR_SRV_PRESENTATION_RESTRICTED);
  IMS_node.set_ims_request_get_clir_resp_param_n(
          QCRIL_QMI_VOICE_SS_CLIR_INVOCATION_OPTION);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CLIR
  IMS_node.update_default_ims_request_get_clir();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIR_REQ_V02
  QMI_node.update_default_qmi_voice_get_clir_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIR_RESP_V02
  QMI_node.update_default_qmi_voice_get_clir_resp_msg(
      QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  QMI_node.set_qmi_void_get_clir_resp_clir_response(
      ACTIVE_STATUS_ACTIVE_V02,
      PROVISION_STATUS_PROVISIONED_PERMANENT_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_GET_CLIR (resp)
  IMS_node.update_default_ims_request_get_clir_resp();
  IMS_node.set_ims_request_get_clir_resp_param_m(
          QCRIL_QMI_VOICE_CLIR_SRV_PROVISIONED_PERMANENT);
  IMS_node.set_ims_request_get_clir_resp_param_n(
          QCRIL_QMI_VOICE_SS_CLIR_INVOCATION_OPTION);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_get_clir_error
@description: GET_CLIR failure scenario. Modem returns error.
==**/
test_result ril_utf_ims_get_clir_error(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  OEMTestnode OEM_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_ims_get_clir_error");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_GET_CLIR
  IMS_node.update_default_ims_request_get_clir();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIR_REQ_V02
  QMI_node.update_default_qmi_voice_get_clir_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIR_RESP_V02
  QMI_node.update_default_qmi_voice_get_clir_resp_msg(
      QMI_RESULT_FAILURE_V01,
      QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_GET_CLIR (resp)
  IMS_node.update_default_ims_request_get_clir_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_CLIR
  IMS_node.update_default_ims_request_set_clir();
  IMS_node.set_ims_request_set_clir_param_n(
          QCRIL_QMI_VOICE_SS_CLIR_SUPPRESSION_OPTION);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_CLIR (resp)
  IMS_node.update_default_ims_request_set_clir_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CLIR
  IMS_node.update_default_ims_request_get_clir();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIR_REQ_V02
  QMI_node.update_default_qmi_voice_get_clir_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIR_RESP_V02
  QMI_node.update_default_qmi_voice_get_clir_resp_msg(
      QMI_RESULT_FAILURE_V01,
      QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_void_get_clir_resp_failure_cause(
          QMI_FAILURE_CAUSE_FACILITY_NOT_SUPPORTED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_GET_CLIR (resp)
  IMS_node.update_default_ims_request_get_clir_resp();
  IMS_node.set_ims_request_get_clir_resp_param_m(
          QCRIL_QMI_VOICE_CLIR_SRV_PRESENTATION_RESTRICTED);
  IMS_node.set_ims_request_get_clir_resp_param_n(
          QCRIL_QMI_VOICE_SS_CLIR_SUPPRESSION_OPTION);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_get_clir_error
@description: GET_CLIR failure scenario.
    Modem returns FACILITY_NOT_SUPPORTED failure.
    RIL will return the cached clir value to Telephony.
==**/
test_result ril_utf_get_clir_error(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_get_clir_error");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_CLIR
  ril_request_set_clir_t* set_clir_req =
      RIL_node.update_default_ril_request_set_clir();
  set_clir_req->n_parameter = QCRIL_QMI_VOICE_SS_CLIR_INVOCATION_OPTION;
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_SET_CLIR (Resp)
  RIL_node.update_default_ril_request_set_clir_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CLIR
  RIL_node.update_default_ril_request_get_clir();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CLIR_REQ_V02
  QMI_node.update_default_qmi_voice_get_clir_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIR_RESP_V02
  QMI_node.update_default_qmi_voice_get_clir_resp_msg(
      QMI_RESULT_FAILURE_V01,
      QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_void_get_clir_resp_failure_cause(
          QMI_FAILURE_CAUSE_FACILITY_NOT_SUPPORTED_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_GET_CLIR (resp)
  ril_request_get_clir_resp_t *get_clir_resp =
      RIL_node.update_default_ril_request_get_clir_resp();
  get_clir_resp->n_parameter = QCRIL_QMI_VOICE_SS_CLIR_INVOCATION_OPTION;
  get_clir_resp->m_parameter = QCRIL_QMI_VOICE_CLIR_SRV_PRESENTATION_ALLOWED;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_redir_num
@description: This test creates an MO call through a dial request. And call gets connected and
redirecting_party_num tlv set in ALL_CALL_STATUS_IND
==**/
test_result ril_utf_test_mo_call_redir_num(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_mo_call_redir_num");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // redirecting party number
  voice_num_with_id_type_v02 *redir_number_list = QMI_node.set_qmi_voice_all_call_status_ind_redirecting_party_num(1);
  redir_number_list[0].call_id = 1;
  redir_number_list[0].num_len = strlen("12345");
  strlcpy(redir_number_list[0].num, "12345", strlen("12345")+1);
  redir_number_list[0].num_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
//  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960&12345");
  call[0]->numberPresentation = 0;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // redirecting party number
  redir_number_list = QMI_node.set_qmi_voice_all_call_status_ind_redirecting_party_num(1);
  redir_number_list[0].call_id = 1;
  redir_number_list[0].num_len = strlen("12345");
  strlcpy(redir_number_list[0].num, "12345", strlen("12345")+1);
  redir_number_list[0].num_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // redirecting party number
  redir_number_list = QMI_node.set_qmi_voice_all_call_status_ind_redirecting_party_num(1);
  redir_number_list[0].call_id = 1;
  redir_number_list[0].num_len = strlen("12345");
  strlcpy(redir_number_list[0].num, "12345", strlen("12345")+1);
  redir_number_list[0].num_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mo_call_speech_codec_ind
@description:  SPEECH_CODEC_INFO_IND for CS call
==**/
test_result ril_utf_test_mo_call_speech_codec_ind(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  property_set("persist.vendor.radio.report_codec", "1");

  t.set_test_id(__func__);
  t.set_test_description("SPEECH_CODEC_INFO_IND for CS call");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_GSM_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_NB_V02);
  t.inject(QMI_node);

  t.set_start();
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: QCRIL_EVT_HOOK_UNSOL_SPEECH_CODEC_INFO
  OEM_node.update_default_qcril_evt_hook_unsol_speech_codec_info(1, VOICE_SPEECH_CODEC_AMR_NB_V02, VOICE_NETWORK_MODE_GSM_V02);
  t.expect(OEM_node);

#if 0
  // Expect: RIL_UNSOL_OEM_HOOK_RAW
  RIL_node.update_default_ril_unsol_oem_hook_raw();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
#endif
  t.set_end();

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_hangup_001
@description:
RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND request to resume the HELD call
==**/
test_result ril_utf_test_hangup_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // HOLD REQUEST
  // Inject: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active_resp();
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // UNHOLD REQUEST
  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  t.set_start();
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);
  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_368730_001
@description: MO CSVT call
==**/
test_result ril_utf_retro_gerrit_368730_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_368730_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_CS;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.inject(IMS_node);

  // Expect: QMI_CSVT_ORIGINATE_CALL_REQ_V01
  QMI_node.update_default_qmi_csvt_originate_call_req(1, CSVT_CALL_MODE_DATA_V01, "2428536960");
  t.expect(QMI_node);

  // Inject: QMI_CSVT_ORIGINATE_CALL_RESP_V01
  QMI_node.update_default_qmi_csvt_originate_call_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_CSVT_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_csvt_event_report_ind(1, CSVT_EVENT_TYPE_CONFIRM_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_CS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: QMI_CSVT_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_csvt_event_report_ind(1, CSVT_EVENT_TYPE_PROGRESS_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_CS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: QMI_CSVT_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_csvt_event_report_ind(1, CSVT_EVENT_TYPE_CONNECT_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_CS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_CSVT_END_CALL_REQ_V01
  QMI_node.update_default_qmi_csvt_end_call_req(1);
  t.expect(QMI_node);

  // Inject: QMI_CSVT_END_CALL_RESP_V01
  QMI_node.update_default_qmi_csvt_end_call_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_CSVT_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_csvt_event_report_ind(1, CSVT_EVENT_TYPE_END_V01);
  QMI_node.set_qmi_csvt_event_report_ind_call_end_cause(16);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_MISC);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_368730_002
@description: MT CSVT Call
==**/
test_result ril_utf_retro_gerrit_368730_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_368730_002");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallList_Call** calls;

  // Inject: QMI_CSVT_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_csvt_event_report_ind(1, CSVT_EVENT_TYPE_SETUP_V01);
  t.inject(QMI_node);

  // Expect: QMI_CSVT_CONFIRM_CALL_REQ_V01
  QMI_node.update_default_qmi_csvt_confirm_call_req(1, 1);
  t.expect(QMI_node);

  // Inject: QMI_CSVT_CONFIRM_CALL_RESP_V01
  QMI_node.update_default_qmi_csvt_confirm_call_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_CSVT_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_csvt_event_report_ind(1, CSVT_EVENT_TYPE_INCOMING_V01);
  // incoming number 18682569385 in BCD format
  char incoming_number[] = {0x21, (char)0x83, (char)0x81, (char)0x86, 0x52, (char)0x96, (char)0x83, (char)0xF5, 0x00};
  QMI_node.set_qmi_csvt_event_report_ind_incoming_number(incoming_number);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_CS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_CSVT_ANSWER_CALL_REQ_V01
  QMI_node.update_default_qmi_csvt_answer_call_req(1, 1);
  t.expect(QMI_node);

  // Inject: QMI_CSVT_ANSWER_CALL_RESP_V01
  QMI_node.update_default_qmi_csvt_answer_call_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_CSVT_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_csvt_event_report_ind(1, CSVT_EVENT_TYPE_CONNECT_V01);
  QMI_node.set_qmi_csvt_event_report_ind_incoming_number(incoming_number);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_CS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_CSVT_END_CALL_REQ_V01
  QMI_node.update_default_qmi_csvt_end_call_req(1);
  t.expect(QMI_node);

  // Inject: QMI_CSVT_END_CALL_RESP_V01
  QMI_node.update_default_qmi_csvt_end_call_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_CSVT_EVENT_REPORT_IND_V01
  QMI_node.update_default_qmi_csvt_event_report_ind(1, CSVT_EVENT_TYPE_END_V01);
  QMI_node.set_qmi_csvt_event_report_ind_call_end_cause(16);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_MISC);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_284454_001
@description: IMS MT call with presentation
==**/
test_result ril_utf_retro_gerrit_284454_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_284454_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  IMS_node.set_ims_request_answer_presentation(ims_IpPresentation_IP_PRESENTATION_NUM_ALLOWED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_347631_001
@description: An MT call is indicated with call type VT and video attribute 0.
@               This call is then appropriately reported to IMS as VT NODIR.
@               Finally call is answered and then terminated.
==**/
test_result ril_utf_retro_gerrit_347631_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_347631_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = 0;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_NODIR;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = 0;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_NODIR;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = 0;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_338798_001
@description: Am MO IMS call is dialed with clir type QCRIL_QMI_VOICE_SS_CLIR_INVOCATION_OPTION.
@               RIL then sends to modem the dial request with pi
@               IP_PRESENTATION_NUM_RESTRICTED_V02.
==**/
test_result ril_utf_retro_gerrit_338798_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_338798_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = TRUE;
  ptr->clir = QCRIL_QMI_VOICE_SS_CLIR_INVOCATION_OPTION;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_INVOCATION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_RESTRICTED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  //QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_338798_002
@description: Am MO IMS call is dialed with clir type QCRIL_QMI_VOICE_SS_CLIR_SUPPRESSION_OPTION.
@               RIL then sends to modem the dial request with pi
@               IP_PRESENTATION_NUM_ALLOWED_V02.
==**/
test_result ril_utf_retro_gerrit_338798_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_338798_002");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = TRUE;
  ptr->clir = QCRIL_QMI_VOICE_SS_CLIR_SUPPRESSION_OPTION;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_SUPPRESSION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  //QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_334432_001
@description: IMS VOICE IP call goes to CONVERSATION. Then indication is received to modify
@                   call to VT. IMS accepts and the call turns VT.
==**/
test_result ril_utf_retro_gerrit_334432_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_334432_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallList_Call **calls;
  ims_Dial *dial;
  voice_call_info2_type_v02 *call_info;

  // Inject: ims_MsgId_REQUEST_DIAL
  dial = IMS_node.update_default_ims_request_dial("2428536960");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  //QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(1);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  //QMI_node.set_qmi_voice_modified_ind_failure_cause(QMI_FAILURE_CAUSE_INCOM_CALL_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_ACCEPT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_334432_002
@description: IMS VOICE IP call goes to CONVERSATION. Then indication is received to modify
@                   call to VT. IMS rejects and the call stays VOICE IP.
==**/
test_result ril_utf_retro_gerrit_334432_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_retro_gerrit_334432_002");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_Dial *dial;
  voice_call_info2_type_v02 *call_info;
  ims_CallList_Call **calls;

  // Inject: ims_MsgId_REQUEST_DIAL
  dial = IMS_node.update_default_ims_request_dial("2428536960");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  //QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(1);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  //QMI_node.set_qmi_voice_modified_ind_failure_cause(QMI_FAILURE_CAUSE_INCOM_CALL_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VOICE, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_ACCEPT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0);
  t.expect(QMI_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**=======
@testname: ril_utf_test_voice_call_converted_ussd_in_alpha_null_case
@description: This test creates an MO call through a dial request. And voice call got converted to ussd
in Alpha NULL case
==**/
test_result ril_utf_test_voice_call_converted_ussd_in_alpha_null_case(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_voice_call_converted_ussd_in_alpha_null_case");
  t.set_test_attribute("VOICE");

  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_UNKNOWN_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);
#endif

  // Inject: QMI_VOICE_CALL_CONTROL_RESULT_INFO_IND_V02
  voice_call_control_result_info_ind_msg_v02 *call_control_result1 = QMI_node.update_default_qmi_voice_call_control_result_ind_msg();
  call_control_result1->alpha_presence = VOICE_CC_ALPHA_NULL_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  voice_alpha_ident_type_v02* alpha_iden = QMI_node.set_qmi_voice_dial_call_resp_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  QMI_node.set_qmi_voice_dial_call_cc_result_type(VOICE_CC_RESULT_TYPE_USSD_V02);
  voice_cc_sups_result_type_v02* cc_sups_result = QMI_node.set_qmi_voice_dial_call_resp_cc_sups_result();
  cc_sups_result->service_type = VOICE_CC_SUPS_RESULT_SERVICE_TYPE_USSD_V02;
  cc_sups_result->reason = VOICE_CC_SUPS_RESULT_REASON_NONE_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_DIAL_MODIFIED_TO_USSD);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_DIAL_MODIFIED_TO_USSD;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg( SERVICE_TYPE_USSD_V02,1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  alpha_iden = QMI_node.set_qmi_voice_sups_ind_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  voice_uss_info_type_v02* voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg( SERVICE_TYPE_USSD_V02,1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  alpha_iden = QMI_node.set_qmi_voice_sups_ind_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  t.inject(QMI_node);

#ifndef QMI_RIL_HAL_UTF
  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('2', NULL, 0);
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
#endif

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**=======
@testname: ril_utf_test_voice_call_converted_ss_in_alpha_null_case
@description: This test creates an MO call through a dial request. And voice call got converted to ss
in Alpha NULL case
==**/
test_result ril_utf_test_voice_call_converted_ss_in_alpha_null_case(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_voice_call_converted_ss_in_alpha_null_case");
  t.set_test_attribute("VOICE");

  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_UNKNOWN_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);
#endif

  // Inject: QMI_VOICE_CALL_CONTROL_RESULT_INFO_IND_V02
  voice_call_control_result_info_ind_msg_v02 *call_control_result1 = QMI_node.update_default_qmi_voice_call_control_result_ind_msg();
  call_control_result1->alpha_presence = VOICE_CC_ALPHA_NULL_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  voice_alpha_ident_type_v02* alpha_iden = QMI_node.set_qmi_voice_dial_call_resp_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  QMI_node.set_qmi_voice_dial_call_cc_result_type(VOICE_CC_RESULT_TYPE_SUPS_V02);
  voice_cc_sups_result_type_v02* cc_sups_result = QMI_node.set_qmi_voice_dial_call_resp_cc_sups_result();
  cc_sups_result->service_type = VOICE_CC_SUPS_RESULT_SERVICE_TYPE_ACTIVATE_V02;
  cc_sups_result->reason = VOICE_CC_SUPS_RESULT_REASON_NONE_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_DIAL_MODIFIED_TO_SS);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_DIAL_MODIFIED_TO_SS;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg( SERVICE_TYPE_ACTIVATE_V02,1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  alpha_iden = QMI_node.set_qmi_voice_sups_ind_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  voice_uss_info_type_v02* voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg( SERVICE_TYPE_ACTIVATE_V02,1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  alpha_iden = QMI_node.set_qmi_voice_sups_ind_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  t.inject(QMI_node);

#ifndef QMI_RIL_HAL_UTF
  // Expect: RIL_UNSOL_ON_SS
  RIL_StkCcUnsolSsResponse* unsol_ss_resp = RIL_node.update_default_ril_unsol_on_ss();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
#endif

  t.execute();

  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_retro_gerrit_275073_001
@description: RIL sends Unsol signal strength when sys info ind and sig info ind arrive
@               and persist.vendor.radio.3gpp_drte_ltd is enabled.
==**/
test_result ril_utf_retro_gerrit_275073_001( user_specified_attrib_t attr )
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  nas_3gpp_srv_status_info_type_v01 *srv_status;
  nas_wcdma_sys_info_type_v01 *sys_info;

  property_set("persist.vendor.radio.3gpp_drte_ltd", "1");

  t.set_test_id("ril_utf_retro_gerrit_275073_001");
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_NAS_SYS_INFO_IND_MSG_01
  QMI_node.update_default_sys_info_ind_msg();
  srv_status = QMI_node.set_qmi_nas_sys_info_ind_wcdma_srv_status_info();
  srv_status->srv_status = NAS_SYS_SRV_STATUS_LIMITED_V01;
  sys_info = QMI_node.set_qmi_nas_sys_info_ind_wcdma_sys_info();
  sys_info->common_sys_info.srv_domain_valid = TRUE;
  sys_info->common_sys_info.srv_domain = SYS_SRV_DOMAIN_PS_ONLY_V01;
  sys_info->common_sys_info.srv_capability_valid = TRUE;
  sys_info->common_sys_info.srv_capability = SYS_SRV_DOMAIN_PS_ONLY_V01;
  t.inject(QMI_node);

  // Expect: QMI_NAS_GET_SYS_INFO_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_sys_info_req_msg_v01();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_SYS_INFO_RESP_MSG_V01
  nas_get_sys_info_resp_msg_v01 *ptr = QMI_node.update_default_qmi_nas_get_sys_info_resp_msg_v01();
  ptr->gsm_srv_status_info_valid = TRUE;
  ptr->gsm_srv_status_info.srv_status = NAS_SYS_SRV_STATUS_NO_SRV_V01;
  ptr->gsm_srv_status_info.true_srv_status = SYS_SRV_STATUS_NO_SRV_V01;
  ptr->gsm_srv_status_info.is_pref_data_path = 0;
  ptr->wcdma_srv_status_info_valid = TRUE;
  ptr->wcdma_srv_status_info.srv_status = NAS_SYS_SRV_STATUS_LIMITED_V01;
  ptr->wcdma_sys_info.common_sys_info.srv_domain_valid = TRUE;
  ptr->wcdma_sys_info.common_sys_info.srv_domain = SYS_SRV_DOMAIN_PS_ONLY_V01;
  ptr->wcdma_sys_info.common_sys_info.srv_capability_valid = TRUE;
  ptr->wcdma_sys_info.common_sys_info.srv_capability = SYS_SRV_DOMAIN_PS_ONLY_V01;
  QMI_node.set_qmi_nas_get_sys_info_resp_msg_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_VOICE_NETWORK_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_voice_network_state_changed();
  t.expect(RIL_node);

  // Inject: QMI_NAS_SIG_INFO_IND_MSG_V01
  QMI_node.update_default_qmi_nas_sig_info_ind_msg();
  QMI_node.set_qmi_nas_sig_info_ind_wcdma_sig_info(-110, 2);
  t.inject(QMI_node);

  // Expect: QMI_NAS_GET_ERR_RATE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_err_rate_req_msg_v01();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_ERR_RATE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_get_err_rate_resp_msg_v01();
  QMI_node.set_qmi_nas_get_err_rate_resp_msg_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SIGNAL_STRENGTH
  RIL_node.update_default_ril_unsol_signal_strength();
  RIL_node.set_ril_unsol_signal_strength_gw_signal_strength(2, 0);
  RIL_node.set_ril_unsol_signal_strength_cdma_signal_strength(-1, -1);
  RIL_node.set_ril_unsol_signal_strength_evdo_signal_strength(-1, -1, -1);
  RIL_node.set_ril_unsol_signal_strength_lte_signal_strength(0x63, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF, 0x7FFFFFFF);
  RIL_node.set_ril_unsol_signal_strength_td_scdma_signal_strength(0x7FFFFFFF);
  RIL_node.set_expect_skip_verification_status(true);
  t.expect(RIL_node);

  // Execute the test case
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_275073_002
@description: RIL doesn't send Unsol signal strength when sys info ind and
@               sig info ind arrive and persist.vendor.radio.3gpp_drte_ltd is disabled.
==**/
test_result ril_utf_retro_gerrit_275073_002( user_specified_attrib_t attr )
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  nas_3gpp_srv_status_info_type_v01 *srv_status;
  nas_wcdma_sys_info_type_v01 *sys_info;

  property_set("persist.vendor.radio.3gpp_drte_ltd", "0");

  t.set_test_id("ril_utf_retro_gerrit_275073_002");
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_NAS_SYS_INFO_IND_MSG_01
  QMI_node.update_default_sys_info_ind_msg();
  srv_status = QMI_node.set_qmi_nas_sys_info_ind_wcdma_srv_status_info();
  srv_status->srv_status = NAS_SYS_SRV_STATUS_LIMITED_V01;
  sys_info = QMI_node.set_qmi_nas_sys_info_ind_wcdma_sys_info();
  sys_info->common_sys_info.srv_domain_valid = TRUE;
  sys_info->common_sys_info.srv_domain = SYS_SRV_DOMAIN_PS_ONLY_V01;
  sys_info->common_sys_info.srv_capability_valid = TRUE;
  sys_info->common_sys_info.srv_capability = SYS_SRV_DOMAIN_PS_ONLY_V01;
  t.inject(QMI_node);

  util_ril_utf_physical_channel_configuration_query_sequence(t, QMI_node);

  // Expect: QMI_NAS_GET_SYS_INFO_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_sys_info_req_msg_v01();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_SYS_INFO_RESP_MSG_V01
  nas_get_sys_info_resp_msg_v01 *ptr = QMI_node.update_default_qmi_nas_get_sys_info_resp_msg_v01();
  ptr->gsm_srv_status_info_valid = TRUE;
  ptr->gsm_srv_status_info.srv_status = NAS_SYS_SRV_STATUS_NO_SRV_V01;
  ptr->gsm_srv_status_info.true_srv_status = SYS_SRV_STATUS_NO_SRV_V01;
  ptr->gsm_srv_status_info.is_pref_data_path = 0;
  ptr->wcdma_srv_status_info_valid = TRUE;
  ptr->wcdma_srv_status_info.srv_status = NAS_SYS_SRV_STATUS_LIMITED_V01;
  ptr->wcdma_sys_info.common_sys_info.srv_domain_valid = TRUE;
  ptr->wcdma_sys_info.common_sys_info.srv_domain = SYS_SRV_DOMAIN_PS_ONLY_V01;
  ptr->wcdma_sys_info.common_sys_info.srv_capability_valid = TRUE;
  ptr->wcdma_sys_info.common_sys_info.srv_capability = SYS_SRV_DOMAIN_PS_ONLY_V01;
  QMI_node.set_qmi_nas_get_sys_info_resp_msg_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  util_ril_utf_physical_channel_configuration_query_sequence(t, QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_VOICE_NETWORK_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_voice_network_state_changed();
  t.expect(RIL_node);

  // Inject: QMI_NAS_SIG_INFO_IND_MSG_V01
  QMI_node.update_default_qmi_nas_sig_info_ind_msg();
  QMI_node.set_qmi_nas_sig_info_ind_wcdma_sig_info(-110, 2);
  t.inject(QMI_node);

  // Execute the test case
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_setup_answer_001
@description: MT call in accepted in SETUP state.
==**/
test_result ril_utf_setup_answer_001(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_setup_answer_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QCRIL_EVT_HOOK_GET_CURRENT_SETUP_CALLS
  OEM_node.update_default_qcril_evt_hook_get_current_setup_calls();
  t.inject(OEM_node);

  // Expect: QCRIL_EVT_HOOK_GET_CURRENT_SETUP_CALLS (resp)
  qcril_qmi_voice_setup_call_info *setup_call_info = OEM_node.update_default_qcril_evt_hook_get_current_setup_calls_resp(TRUE);
  setup_call_info->index = 1;
  setup_call_info->toa = 0;
  setup_call_info->als = 0;
  setup_call_info->isVoice = 1;
  setup_call_info->numberPresentation = 2;
  setup_call_info->namePresentation = 2;
  t.expect(OEM_node);

  // Inject: QCRIL_EVT_HOOK_REQUEST_SETUP_ANSWER
  OEM_node.update_default_qcril_evt_hook_request_setup_answer(0);
  t.inject(OEM_node);

  // Expect: QMI_VOICE_SETUP_ANSWER_REQ_V02
  QMI_node.update_default_qmi_voice_setup_answer_req(1);
  QMI_node.set_qmi_voice_setup_answer_req_reject_setup(0);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SETUP_ANSWER_RESP_V02
  QMI_node.update_default_qmi_voice_setup_answer_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  t.set_start();

  // Expect: QCRIL_EVT_HOOK_REQUEST_SETUP_ANSWER (resp)
  OEM_node.update_default_qcril_evt_hook_request_setup_answer_resp();
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_setup_answer_002
@description: MT call in SETUP state is rejected
==**/
test_result ril_utf_setup_answer_002(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;
  OEMTestnode OEM_node;

  t.set_test_id("ril_utf_setup_answer_002");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QCRIL_EVT_HOOK_GET_CURRENT_SETUP_CALLS
  OEM_node.update_default_qcril_evt_hook_get_current_setup_calls();
  t.inject(OEM_node);

  // Expect: QCRIL_EVT_HOOK_GET_CURRENT_SETUP_CALLS (resp)
  qcril_qmi_voice_setup_call_info *setup_call_info = OEM_node.update_default_qcril_evt_hook_get_current_setup_calls_resp(TRUE);
  setup_call_info->index = 1;
  setup_call_info->toa = 0;
  setup_call_info->als = 0;
  setup_call_info->isVoice = 1;
  setup_call_info->numberPresentation = 2;
  setup_call_info->namePresentation = 2;
  t.expect(OEM_node);

  // Inject: QCRIL_EVT_HOOK_REQUEST_SETUP_ANSWER
  OEM_node.update_default_qcril_evt_hook_request_setup_answer(1);
  t.inject(OEM_node);

  // Expect: QMI_VOICE_SETUP_ANSWER_REQ_V02
  QMI_node.update_default_qmi_voice_setup_answer_req(1);
  QMI_node.set_qmi_voice_setup_answer_req_reject_setup(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SETUP_ANSWER_RESP_V02
  QMI_node.update_default_qmi_voice_setup_answer_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: QCRIL_EVT_HOOK_REQUEST_SETUP_ANSWER (resp)
  OEM_node.update_default_qcril_evt_hook_request_setup_answer_resp();
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mwi_ind_01
@description:
MWI indication with message summary
==**/
test_result ril_utf_ims_mwi_ind_01(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mwi_ind_01");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_WMS_TRANSPORT_LAYER_MWI_IND_V01
  QMI_node.update_default_qmi_wms_transport_layer_mwi_ind_msg();
  wms_mwi_summary_type_v01 *mwi_summary = QMI_node.set_qmi_wms_transport_layer_mwi_ind_message_waiting_summary_info(1);
  mwi_summary[0].message_type = TRANSPORT_MWI_MESSAGE_TYPE_VOICEMAIL_V01;
  mwi_summary[0].new_msg      = 1;
  mwi_summary[0].old_msg      = 0;
  mwi_summary[0].new_urgent   = 0;
  mwi_summary[0].old_urgent   = 0;
  QMI_node.set_qmi_wms_transport_layer_mwi_ind_UE_address("9876543210");
  t.inject(QMI_node);

  // Expect: UNSOL_MWI
  IMS_node.update_default_ims_unsol_mwi(1, 0);
  IMS_node.set_ims_unsol_mwi_message_summary(0, ims_MwiMessageType_MWI_MSG_VOICE, 1, 0, 0 ,0);
  IMS_node.set_ims_unsol_mwi_ueaddress("9876543210");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mwi_ind_02
@description:
MWI indication with message summary and details
==**/
test_result ril_utf_ims_mwi_ind_02(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mwi_ind_02");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_WMS_TRANSPORT_LAYER_MWI_IND_V01
  QMI_node.update_default_qmi_wms_transport_layer_mwi_ind_msg();
  wms_mwi_summary_type_v01 *mwi_summary = QMI_node.set_qmi_wms_transport_layer_mwi_ind_message_waiting_summary_info(2);
  mwi_summary[0].message_type = TRANSPORT_MWI_MESSAGE_TYPE_VOICEMAIL_V01;
  mwi_summary[0].new_msg      = 2;
  mwi_summary[0].old_msg      = 1;
  mwi_summary[0].new_urgent   = 1;
  mwi_summary[0].old_urgent   = 0;
  mwi_summary[1].message_type = TRANSPORT_MWI_MESSAGE_TYPE_VIDEOMAIL_V01;
  mwi_summary[1].new_msg      = 1;
  mwi_summary[1].old_msg      = 8;
  mwi_summary[1].new_urgent   = 0;
  mwi_summary[1].old_urgent   = 6;
  QMI_node.set_qmi_wms_transport_layer_mwi_ind_UE_address("9876543210");
  wms_mwi_detail_type_v01 *mwi_details = QMI_node.set_qmi_wms_transport_layer_mwi_ind_message_waiting_detail_info(3);
  mwi_details[0].message_type = TRANSPORT_MWI_MESSAGE_TYPE_VOICEMAIL_V01;
  mwi_details[0].priority     = WMS_NORMAL_PRIORITY_V01;
  strlcpy(mwi_details[0].to_address, "111111", strlen("111111")+1);
  strlcpy(mwi_details[0].from_address, "222222", strlen("222222")+1);
  strlcpy(mwi_details[0].subject, "Test", strlen("Test")+1);
  strlcpy(mwi_details[0].date_time, "4/15/2014", strlen("4/15/2014")+1);
  strlcpy(mwi_details[0].message_id, "999999", strlen("999999")+1);
  mwi_details[1].message_type = TRANSPORT_MWI_MESSAGE_TYPE_VOICEMAIL_V01;
  mwi_details[1].priority     = WMS_URGENT_PRIORITY_V01;
  strlcpy(mwi_details[1].to_address, "123123", strlen("123123")+1);
  strlcpy(mwi_details[1].from_address, "989898", strlen("989898")+1);
  strlcpy(mwi_details[1].subject, "Test Urgent", strlen("Test Urgent")+1);
  strlcpy(mwi_details[1].date_time, "4/17/2014", strlen("4/17/2014")+1);
  strlcpy(mwi_details[1].message_id, "67676767", strlen("67676767")+1);
  mwi_details[2].message_type = TRANSPORT_MWI_MESSAGE_TYPE_VIDEOMAIL_V01;
  mwi_details[2].priority     = WMS_URGENT_PRIORITY_V01;
  strlcpy(mwi_details[2].to_address, "33445522", strlen("33445522")+1);
  strlcpy(mwi_details[2].from_address, "66554433", strlen("66554433")+1);
  strlcpy(mwi_details[2].subject, "Urgent Videomail", strlen("Urgent Videomail")+1);
  strlcpy(mwi_details[2].date_time, "5/19/2014", strlen("5/19/2014")+1);
  strlcpy(mwi_details[2].message_id, "887766ABDA", strlen("887766ABDA")+1);
  t.inject(QMI_node);

  // Expect: UNSOL_MWI
  IMS_node.update_default_ims_unsol_mwi(2, 3);
  IMS_node.set_ims_unsol_mwi_message_summary(0, ims_MwiMessageType_MWI_MSG_VOICE, 2, 1, 1 ,0);
  IMS_node.set_ims_unsol_mwi_message_summary(1, ims_MwiMessageType_MWI_MSG_VIDEO, 1, 8, 0 ,6);
  IMS_node.set_ims_unsol_mwi_ueaddress("9876543210");
  IMS_node.set_ims_unsol_mwi_message_details(0, "111111", "222222", "Test", "4/15/2014",
      ims_MwiPriority_MWI_MSG_PRIORITY_NORMAL, "999999", ims_MwiMessageType_MWI_MSG_VOICE);
  IMS_node.set_ims_unsol_mwi_message_details(1, "123123", "989898", "Test Urgent", "4/17/2014",
      ims_MwiPriority_MWI_MSG_PRIORITY_URGENT, "67676767", ims_MwiMessageType_MWI_MSG_VOICE);
  IMS_node.set_ims_unsol_mwi_message_details(2, "33445522", "66554433", "Urgent Videomail", "5/19/2014",
      ims_MwiPriority_MWI_MSG_PRIORITY_URGENT, "887766ABDA", ims_MwiMessageType_MWI_MSG_VIDEO);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mwi_ind_03
@description:
MWI indication with message summary and details
==**/
test_result ril_utf_ims_mwi_ind_03(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_WMS_TRANSPORT_LAYER_MWI_IND_V01
  QMI_node.update_default_qmi_wms_transport_layer_mwi_ind_msg();
  wms_mwi_summary_type_v01 *mwi_summary = QMI_node.set_qmi_wms_transport_layer_mwi_ind_message_waiting_summary_info(4);
  mwi_summary[0].message_type = TRANSPORT_MWI_MESSAGE_TYPE_FAX_V01;
  mwi_summary[0].new_msg      = 1;
  mwi_summary[0].old_msg      = 0;
  mwi_summary[0].new_urgent   = 2;
  mwi_summary[0].old_urgent   = 0;
  mwi_summary[1].message_type = TRANSPORT_MWI_MESSAGE_TYPE_PAGER_V01;
  mwi_summary[1].new_msg      = 2;
  mwi_summary[1].old_msg      = 1;
  mwi_summary[1].new_urgent   = 3;
  mwi_summary[1].old_urgent   = 1;
  mwi_summary[2].message_type = TRANSPORT_MWI_MESSAGE_TYPE_MULTIMEDIA_V01;
  mwi_summary[2].new_msg      = 1;
  mwi_summary[2].old_msg      = 2;
  mwi_summary[2].new_urgent   = 0;
  mwi_summary[2].old_urgent   = 6;
  mwi_summary[3].message_type = TRANSPORT_MWI_MESSAGE_TYPE_TEXT_V01;
  mwi_summary[3].new_msg      = 1;
  mwi_summary[3].old_msg      = 5;
  mwi_summary[3].new_urgent   = 1;
  mwi_summary[3].old_urgent   = 1;
  QMI_node.set_qmi_wms_transport_layer_mwi_ind_UE_address("9876543210");
  wms_mwi_detail_type_v01 *mwi_details = QMI_node.set_qmi_wms_transport_layer_mwi_ind_message_waiting_detail_info(3);
  mwi_details[0].message_type = TRANSPORT_MWI_MESSAGE_TYPE_PAGER_V01;
  mwi_details[0].priority     = WMS_NORMAL_PRIORITY_V01;
  strlcpy(mwi_details[0].to_address, "111111", strlen("111111")+1);
  strlcpy(mwi_details[0].from_address, "222222", strlen("222222")+1);
  strlcpy(mwi_details[0].subject, "Test", strlen("Test")+1);
  strlcpy(mwi_details[0].date_time, "4/15/2014", strlen("4/15/2014")+1);
  strlcpy(mwi_details[0].message_id, "999999", strlen("999999")+1);
  mwi_details[1].message_type = TRANSPORT_MWI_MESSAGE_TYPE_MULTIMEDIA_V01;
  mwi_details[1].priority     = WMS_LOW_PRIORITY_V01;
  strlcpy(mwi_details[1].to_address, "123123", strlen("123123")+1);
  strlcpy(mwi_details[1].from_address, "989898", strlen("989898")+1);
  strlcpy(mwi_details[1].subject, "Test Urgent", strlen("Test Urgent")+1);
  strlcpy(mwi_details[1].date_time, "4/17/2014", strlen("4/17/2014")+1);
  strlcpy(mwi_details[1].message_id, "67676767", strlen("67676767")+1);
  mwi_details[2].message_type = TRANSPORT_MWI_MESSAGE_TYPE_TEXT_V01;
  mwi_details[2].priority     = WMS_UNKNOWN_PRIORITY_V01;
  strlcpy(mwi_details[2].to_address, "33445522", strlen("33445522")+1);
  strlcpy(mwi_details[2].from_address, "66554433", strlen("66554433")+1);
  strlcpy(mwi_details[2].subject, "Urgent Videomail", strlen("Urgent Videomail")+1);
  strlcpy(mwi_details[2].date_time, "5/19/2014", strlen("5/19/2014")+1);
  strlcpy(mwi_details[2].message_id, "887766ABDA", strlen("887766ABDA")+1);
  t.inject(QMI_node);

  // Expect: UNSOL_MWI
  IMS_node.update_default_ims_unsol_mwi(4, 3);
  IMS_node.set_ims_unsol_mwi_message_summary(0, ims_MwiMessageType_MWI_MSG_FAX, 1, 0, 2 ,0);
  IMS_node.set_ims_unsol_mwi_message_summary(1, ims_MwiMessageType_MWI_MSG_PAGER, 2, 1, 3 ,1);
  IMS_node.set_ims_unsol_mwi_message_summary(2, ims_MwiMessageType_MWI_MSG_MULTIMEDIA, 1, 2, 0 ,6);
  IMS_node.set_ims_unsol_mwi_message_summary(3, ims_MwiMessageType_MWI_MSG_TEXT, 1, 5, 1 ,1);
  IMS_node.set_ims_unsol_mwi_ueaddress("9876543210");
  IMS_node.set_ims_unsol_mwi_message_details(0, "111111", "222222", "Test", "4/15/2014",
      ims_MwiPriority_MWI_MSG_PRIORITY_NORMAL, "999999", ims_MwiMessageType_MWI_MSG_PAGER);
  IMS_node.set_ims_unsol_mwi_message_details(1, "123123", "989898", "Test Urgent", "4/17/2014",
      ims_MwiPriority_MWI_MSG_PRIORITY_LOW, "67676767", ims_MwiMessageType_MWI_MSG_MULTIMEDIA);
  IMS_node.set_ims_unsol_mwi_message_details(2, "33445522", "66554433", "Urgent Videomail", "5/19/2014",
      ims_MwiPriority_MWI_MSG_PRIORITY_UNKNOWN, "887766ABDA", ims_MwiMessageType_MWI_MSG_TEXT);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_feature_autom_001( user_specified_attrib_t attr )
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  property_set("ro.baseband", "auto");

  t.set_test_id("ril_utf_feature_autom_001");
  t.set_test_attribute("ALL");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_set_pref_net_type(t, RIL_node, QMI_node, QCRIL_PREF_NET_TYPE_LTE_ONLY, RADIO_TECH_LTE, 0, RIL_E_SUCCESS, 0, TRUE, FALSE, FALSE, FALSE);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_219098_001
@description: Modem reports a VT call in conversation state with Video attribute as 0.
                RIL will then report this call as VT_NODIR.
==**/
test_result ril_utf_retro_gerrit_219098_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  voice_call_attributes_type_v02 *video_attrib;
  voice_call_end_reason_type_v02 *end;
  voice_call_info2_type_v02 *call_info;
  voice_remote_party_number2_type_v02 *number_list;
  ims_CallList_Call **calls;

  t.set_test_id("ril_utf_retro_gerrit_219098_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // video_attribute
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = 0;  // No Direction
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_NODIR;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // video_attribute
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = 0;  // No Direction
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_253102_001
@description: An incoming VT call is answered in TX only
==**/
test_result ril_utf_retro_gerrit_253102_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  voice_call_attributes_type_v02 *video_attrib;
  voice_call_end_reason_type_v02 *end;
  voice_call_info2_type_v02 *call_info;
  voice_remote_party_number2_type_v02 *number_list;
  ims_CallList_Call **calls;

  t.set_test_id("ril_utf_retro_gerrit_253102_001");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  IMS_node.set_ims_request_answer_call_type(ims_CallType_CALL_TYPE_VT_TX);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_answer_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_answer_call_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // video_attribute
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_TX;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // video_attribute
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_253102_002
@description: An incoming VT call is answered in RX only
==**/
test_result ril_utf_retro_gerrit_253102_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  voice_call_attributes_type_v02 *video_attrib;
  voice_call_end_reason_type_v02 *end;
  voice_call_info2_type_v02 *call_info;
  voice_remote_party_number2_type_v02 *number_list;
  ims_CallList_Call **calls;

  t.set_test_id("ril_utf_retro_gerrit_253102_002");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  IMS_node.set_ims_request_answer_call_type(ims_CallType_CALL_TYPE_VT_RX);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_answer_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_answer_call_req_video_attrib(VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // video_attribute
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_RX_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_RX;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // video_attribute
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_registration_state_001
@description: When RIL receives am IMS_REGISTRATION_STATE request, it sends the message
                down to IMSA
==**/
test_result ril_utf_ims_registration_state_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_IMS_REGISTRATION_STATE
  IMS_node.update_default_ims_request_registration_state();
  t.inject(IMS_node);

  // Expect: QMI_IMSA_GET_REGISTRATION_STATUS_REQ_V01
  QMI_node.update_default_qmi_imsa_get_registration_status_req();
  t.expect(QMI_node);

  // Inject: QMI_IMSA_GET_REGISTRATION_STATUS_RSP_V01
  QMI_node.update_default_qmi_imsa_get_registration_status_rsp(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_IMS_REGISTRATION_STATE (resp)
  IMS_node.update_default_ims_request_registration_state_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_IMS_REGISTRATION_STATE
  IMS_node.update_default_ims_request_registration_state();
  t.inject(IMS_node);

  // Expect: QMI_IMSA_GET_REGISTRATION_STATUS_REQ_V01
  QMI_node.update_default_qmi_imsa_get_registration_status_req();
  t.expect(QMI_node);

  // Inject: QMI_IMSA_GET_REGISTRATION_STATUS_RSP_V01
  QMI_node.update_default_qmi_imsa_get_registration_status_rsp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_imsa_get_registration_status_rsp_ims_registered(1);
  QMI_node.set_qmi_imsa_get_registration_status_rsp_ims_reg_status(IMSA_STATUS_REGISTERED_V01);
  QMI_node.set_qmi_imsa_get_registration_status_rsp_registration_network(IMSA_WWAN_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_IMS_REGISTRATION_STATE (resp)
  ims_Registration *reg = IMS_node.update_default_ims_request_registration_state_resp();
  reg->has_state = TRUE;
  reg->state = ims_Registration_RegState_REGISTERED;
  reg->has_radioTech = TRUE;
  reg->radioTech = ims_RadioTechType_RADIO_TECH_LTE;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_registration_state_002
@description: IMSA registration ind
==**/
test_result ril_utf_ims_registration_state_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_IMSA_REGISTRATION_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_registration_status_ind();
  QMI_node.set_qmi_imsa_registration_status_ind_ims_registered(FALSE);
  QMI_node.set_qmi_imsa_registration_status_ind_ims_reg_status(TRUE, IMSA_STATUS_REGISTERING_V01);
  QMI_node.set_qmi_imsa_registration_status_ind_registration_network(IMSA_WWAN_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_ims_network_state_changed();
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_state(TRUE, ims_Registration_RegState_REGISTERING);
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_radioTech(ims_RadioTechType_RADIO_TECH_LTE);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_REGISTRATION_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_registration_status_ind();
  QMI_node.set_qmi_imsa_registration_status_ind_ims_registered(FALSE);
  QMI_node.set_qmi_imsa_registration_status_ind_ims_reg_status(TRUE, IMSA_STATUS_NOT_REGISTERED_V01);
  QMI_node.set_qmi_imsa_registration_status_ind_registration_network(IMSA_WWAN_V01);
  QMI_node.set_qmi_imsa_registration_status_ind_ims_registration_failure_error_code(TRUE, 400);
  QMI_node.set_qmi_imsa_registration_status_ind_registration_error_string(TRUE, "IMS error");
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_ims_network_state_changed();
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_state(TRUE, ims_Registration_RegState_NOT_REGISTERED);
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_radioTech(ims_RadioTechType_RADIO_TECH_LTE);
  IMS_node.set_ims_unsol_response_ims_network_state_changed_errorcode(TRUE, 400, "IMS error");
  t.expect(IMS_node);

  // Inject: QMI_IMSA_REGISTRATION_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_registration_status_ind();
  QMI_node.set_qmi_imsa_registration_status_ind_ims_registered(FALSE);
  QMI_node.set_qmi_imsa_registration_status_ind_ims_reg_status(TRUE, IMSA_STATUS_REGISTERING_V01);
  QMI_node.set_qmi_imsa_registration_status_ind_registration_network(IMSA_WWAN_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_ims_network_state_changed();
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_state(TRUE, ims_Registration_RegState_REGISTERING);
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_radioTech(ims_RadioTechType_RADIO_TECH_LTE);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_REGISTRATION_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_registration_status_ind();
  QMI_node.set_qmi_imsa_registration_status_ind_ims_registered(TRUE);
  QMI_node.set_qmi_imsa_registration_status_ind_ims_reg_status(TRUE, IMSA_STATUS_REGISTERED_V01);
  QMI_node.set_qmi_imsa_registration_status_ind_registration_network(IMSA_WWAN_V01);
  p_associated_uri_v01 *uri_list = QMI_node.set_qmi_imsa_registration_status_ind_uri_list(2);
  strlcpy(uri_list[0].uri, "sip:+18984642816@ims1.testnetwork.com", sizeof(uri_list[0].uri));
  strlcpy(uri_list[1].uri, "tel:+18984642816", sizeof(uri_list[1].uri));
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_ims_network_state_changed();
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_state(TRUE, ims_Registration_RegState_REGISTERED);
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_radioTech(ims_RadioTechType_RADIO_TECH_LTE);
  IMS_node.set_ims_unsol_response_ims_network_state_changed_reg_pAssociatedUris(
      "sip:+18984642816@ims1.testnetwork.com|tel:+18984642816");
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_IMS_REGISTRATION_STATE
  IMS_node.update_default_ims_request_registration_state();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_IMS_REGISTRATION_STATE (resp)
  IMS_node.update_default_ims_request_registration_state_resp();
  IMS_node.set_ims_request_registration_state_resp_state(ims_Registration_RegState_REGISTERED);
  IMS_node.set_ims_request_registration_state_resp_radioTech(ims_RadioTechType_RADIO_TECH_LTE);
  IMS_node.set_ims_request_registration_state_resp_pAssociatedUris(
      "sip:+18984642816@ims1.testnetwork.com|tel:+18984642816");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_block_status_ind_001
@description: IMS block status indication
==**/
test_result ril_utf_ims_block_status_ind_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_IMSA_IMS_BLOCK_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_ims_block_status_ind();
  imsa_ims_failure_reason_type_v01 *failure_on_wwan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wwan();
  failure_on_wwan->block_reason_mask = IMSA_BLOCK_REASON_PDP_FAILURE_BIT_MASK_V01;
  failure_on_wwan->pdp_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_UNSPECIFIED_V01;
  failure_on_wwan->pdp_failure_reason.call_end_reason = 400;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_REGISTRATION_BLOCK_STATUS
  ims_RegistrationBlockStatus* blockStatus = IMS_node.update_default_ims_unsol_registration_block_status();
  blockStatus->has_imsBlockStatusOnWwan = TRUE;
  blockStatus->imsBlockStatusOnWwan.has_blockReason = TRUE;
  blockStatus->imsBlockStatusOnWwan.blockReason = ims_BlockReasonType_BLOCK_REASON_PDP_FAILURE;
  blockStatus->imsBlockStatusOnWwan.has_blockReasonDetails = TRUE;
  blockStatus->imsBlockStatusOnWwan.blockReasonDetails.has_regFailureReasonType = TRUE;
  blockStatus->imsBlockStatusOnWwan.blockReasonDetails.regFailureReasonType = ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_UNSPECIFIED;
  blockStatus->imsBlockStatusOnWwan.blockReasonDetails.has_RegFailureReason = TRUE;
  blockStatus->imsBlockStatusOnWwan.blockReasonDetails.RegFailureReason = 400;
  t.expect(IMS_node);

  // Inject: QMI_IMSA_IMS_BLOCK_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_ims_block_status_ind();
  failure_on_wwan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wwan();
  failure_on_wwan->block_reason_mask = IMSA_BLOCK_REASON_OTHER_FAILURE_BIT_MASK_V01;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_REGISTRATION_BLOCK_STATUS
  blockStatus = IMS_node.update_default_ims_unsol_registration_block_status();
  blockStatus->has_imsBlockStatusOnWwan = TRUE;
  blockStatus->imsBlockStatusOnWwan.has_blockReason = TRUE;
  blockStatus->imsBlockStatusOnWwan.blockReason = ims_BlockReasonType_BLOCK_REASON_OTHER_FAILURE;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_block_status_ind_002
@description: IMS block status indication
==**/
test_result ril_utf_ims_block_status_ind_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_IMSA_IMS_BLOCK_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_ims_block_status_ind();
  imsa_ims_failure_reason_type_v01 *failure_on_wwan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wwan();
  failure_on_wwan->block_reason_mask = IMSA_BLOCK_REASON_REGISTRATION_FAILURE_BIT_MASK_V01;
  failure_on_wwan->pdp_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_MOBILE_IP_V01;
  failure_on_wwan->registration_failure_reason = 504;
  imsa_ims_failure_reason_type_v01 *failure_on_wlan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wlan();
  failure_on_wlan->block_reason_mask = IMSA_BLOCK_REASON_HANDOVER_FAILURE_BIT_MASK_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_INTERNAL_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason = 504;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_REGISTRATION_BLOCK_STATUS
  IMS_node.update_default_ims_unsol_registration_block_status();
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWwan(
      ims_BlockReasonType_BLOCK_REASON_REGISTRATION_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_MOBILE_IP, 504);
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWlan(
      ims_BlockReasonType_BLOCK_REASON_HANDOVER_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_INTERNAL, 504);
  t.expect(IMS_node);



  // Inject: QMI_IMSA_IMS_BLOCK_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_ims_block_status_ind();
  failure_on_wwan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wwan();
  failure_on_wwan->block_reason_mask = IMSA_BLOCK_REASON_REGISTRATION_FAILURE_BIT_MASK_V01;
  failure_on_wwan->pdp_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_CALL_MANAGER_DEFINED_V01;
  failure_on_wwan->registration_failure_reason = 504;
  failure_on_wlan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wlan();
  failure_on_wlan->block_reason_mask = IMSA_BLOCK_REASON_HANDOVER_FAILURE_BIT_MASK_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_3GPP_SPEC_DEFINED_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason = 504;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_REGISTRATION_BLOCK_STATUS
  IMS_node.update_default_ims_unsol_registration_block_status();
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWwan(
      ims_BlockReasonType_BLOCK_REASON_REGISTRATION_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_CALL_MANAGER_DEFINED, 504);
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWlan(
      ims_BlockReasonType_BLOCK_REASON_HANDOVER_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_3GPP_SPEC_DEFINED, 504);
  t.expect(IMS_node);


  // Inject: QMI_IMSA_IMS_BLOCK_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_ims_block_status_ind();
  failure_on_wwan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wwan();
  failure_on_wwan->block_reason_mask = IMSA_BLOCK_REASON_REGISTRATION_FAILURE_BIT_MASK_V01;
  failure_on_wwan->pdp_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_3GPP_SPEC_DEFINED_V01;
  failure_on_wwan->registration_failure_reason = 504;
  failure_on_wlan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wlan();
  failure_on_wlan->block_reason_mask = IMSA_BLOCK_REASON_HANDOVER_FAILURE_BIT_MASK_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_PPP_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason = 504;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_REGISTRATION_BLOCK_STATUS
  IMS_node.update_default_ims_unsol_registration_block_status();
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWwan(
      ims_BlockReasonType_BLOCK_REASON_REGISTRATION_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_3GPP_SPEC_DEFINED, 504);
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWlan(
      ims_BlockReasonType_BLOCK_REASON_HANDOVER_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_PPP, 504);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_IMS_BLOCK_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_ims_block_status_ind();
  failure_on_wwan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wwan();
  failure_on_wwan->block_reason_mask = IMSA_BLOCK_REASON_REGISTRATION_FAILURE_BIT_MASK_V01;
  failure_on_wwan->pdp_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_EHRPD_V01;
  failure_on_wwan->registration_failure_reason = 504;
  failure_on_wlan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wlan();
  failure_on_wlan->block_reason_mask = IMSA_BLOCK_REASON_HANDOVER_FAILURE_BIT_MASK_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_IPV6_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason = 504;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_REGISTRATION_BLOCK_STATUS
  IMS_node.update_default_ims_unsol_registration_block_status();
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWwan(
      ims_BlockReasonType_BLOCK_REASON_REGISTRATION_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_EHRPD, 504);
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWlan(
      ims_BlockReasonType_BLOCK_REASON_HANDOVER_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_IPV6, 504);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_IMS_BLOCK_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_ims_block_status_ind();
  failure_on_wwan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wwan();
  failure_on_wwan->block_reason_mask = IMSA_BLOCK_REASON_REGISTRATION_FAILURE_BIT_MASK_V01;
  failure_on_wwan->pdp_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_IWLAN_V01;
  failure_on_wwan->registration_failure_reason = 504;
  failure_on_wlan = QMI_node.set_qmi_imsa_ims_block_status_ind_ims_failure_on_wlan();
  failure_on_wlan->block_reason_mask = IMSA_BLOCK_REASON_HANDOVER_FAILURE_BIT_MASK_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason_type = IMSA_VCER_TYPE_HANDOFF_V01;
  failure_on_wlan->handover_failure_reason.call_end_reason = 504;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_REGISTRATION_BLOCK_STATUS
  IMS_node.update_default_ims_unsol_registration_block_status();
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWwan(
      ims_BlockReasonType_BLOCK_REASON_REGISTRATION_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_IWLAN, 504);
  IMS_node.set_ims_unsol_registration_block_status_BlockStatusOnWlan(
      ims_BlockReasonType_BLOCK_REASON_HANDOVER_FAILURE,
      ims_RegFailureReasonType_REG_FAILURE_REASON_TYPE_HANDOFF, 504);
  t.expect(IMS_node);



  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_retro_gerrit_338792_001
@description:
==**/
test_result ril_utf_retro_gerrit_338792_001(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;
  OEMTestnode OEM_node;

  nas_lte_embms_signal_type_v01 *embms_signal;
  embms_get_rssi_resp_msg_v01 *rssi_resp;

  t.set_test_id("ril_utf_retro_gerrit_338792_001");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_EMBMS_GET_RSSI_REQ_V01
  OEM_node.update_default_qmi_embms_get_rssi_req_v01(1);
  t.inject(OEM_node);

  // Expect: QMI_NAS_GET_EMBMS_SIG_EXT_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_embms_sig_ext_req();
  QMI_node.set_qmi_nas_get_embms_sig_ext_req_trace_id(1);
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_EMBMS_SIG_EXT_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_get_embms_sig_ext_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_nas_get_embms_sig_ext_resp_trace_id(1);
  embms_signal = QMI_node.set_qmi_nas_get_embms_sig_ext_resp_snr_and_tmgi_list(1);
  embms_signal[0].area_id = 10;
  embms_signal[0].snr = 0.03;
  embms_signal[0].excess_snr = 0.02;
  embms_signal[0].tmgi_info_len = 1;
  embms_signal[0].tmgi_info[0].mrb_id = 2;
  embms_signal[0].tmgi_info[0].session_id_valid = TRUE;
  embms_signal[0].tmgi_info[0].session_id = 4;
  strlcpy((char *)embms_signal[0].tmgi_info[0].tmgi_identifier, "timba", NAS_TMGI_IDENTIFIER_LEN_V01);
  t.inject(QMI_node);

  // Expect: QMI_EMBMS_GET_RSSI_RESP_V01
  rssi_resp = OEM_node.update_default_qmi_embms_get_rssi_resp_v01();
  rssi_resp->dbg_trace_id = 1;
  rssi_resp->resp_code = 0;
  rssi_resp->area_id_valid = TRUE;
  rssi_resp->area_id_len = 1;
  rssi_resp->area_id[0] = 10;
  rssi_resp->sig_noise_ratio_valid = TRUE;
  rssi_resp->sig_noise_ratio_len = 1;
  rssi_resp->sig_noise_ratio[0] = 0.03;
  rssi_resp->excess_snr_valid = TRUE;
  rssi_resp->excess_snr_len = 1;
  rssi_resp->excess_snr[0] = 0.02;
  rssi_resp->number_of_tmgi_per_mbsfn_valid = TRUE;
  rssi_resp->number_of_tmgi_per_mbsfn_len = 1;
  rssi_resp->number_of_tmgi_per_mbsfn[0] = 1;
  rssi_resp->active_tgmi_valid = TRUE;
  rssi_resp->active_tgmi_len = 1;
  rssi_resp->active_tgmi[0].tmgi_len = 6;
  strlcpy((char *)rssi_resp->active_tgmi[0].tmgi, "timba", TMGI_LENGTH_MAX_V01);
  t.expect(OEM_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_set_call_forward_status
==**/
test_result ril_utf_set_call_forward_status(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_CALL_FORWARD
  RIL_CallForwardInfo *ptr = RIL_node.update_default_ril_request_set_call_forward();
  ptr->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  RIL_node.add_callflow_tag("status = ENABLE, \\nreason = Unconditional");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
          VOICE_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.add_callflow_tag("status = ENABLE, \\nreason = Unconditional");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  QMI_node.add_callflow_tag("Success");
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_FORWARD (resp)
  RIL_node.update_default_ril_request_set_call_forward_resp();
  RIL_node.add_callflow_tag("Success");
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_CALL_FORWARD
  ptr = RIL_node.update_default_ril_request_set_call_forward();
  ptr->status = 3;  // QCRIL_QMI_VOICE_MODE_REG
  ptr->reason = 4;  // QCRIL_QMI_VOICE_CCFC_REASON_ALLCALL
  ptr->timeSeconds = 5;  // no reply time
  ptr->serviceClass = 3;  // voice(1)|data(2)
  ptr->toa = 145;
  ptr->number = (char *)qcril_malloc(sizeof("8613716857495"));
  strlcpy(ptr->number, "8613716857495", strlen("8613716857495")+1);
  RIL_node.add_callflow_tag("status = REG, reason = ALLCALL,\\ntimeSeconds = 5, serviceClass = 3");
  t.inject(RIL_node);


  // Expect: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_REQ_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_req_msg(VOICE_SERVICE_REGISTER_V02,
          VOICE_REASON_FWD_ALLFORWARDING_V02);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_timer_value(5);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_service_class((voice_service_class_enum_v02)0x03); // voice(1)|data(2)
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_number("+8613716857495");
  QMI_node.add_callflow_tag("status = ENABLE, reason = ALLFORWARDING,\\ntimer = 5, service class = 3");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_RESP_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.add_callflow_tag("Success");
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_FORWARD (resp)
  RIL_node.update_default_ril_request_set_call_forward_resp();
  RIL_node.add_callflow_tag("Success");
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ril_set_tty_mode_001
==**/
test_result ril_utf_ril_set_tty_mode_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_TTY_MODE
  ril_request_set_tty_mode_t *tty_mode = RIL_node.update_default_ril_request_set_tty_mode();
  tty_mode->tty_mode = TTY_Full;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_set_config_req_msg();
  QMI_node.set_qmi_voice_set_config_req_tty_mode(TTY_MODE_FULL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_set_config_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_TTY_MODE (resp)
  RIL_node.update_default_ril_request_set_tty_mode_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_TTY_MODE
  tty_mode = RIL_node.update_default_ril_request_set_tty_mode();
  tty_mode->tty_mode = TTY_VCO;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_set_config_req_msg();
  QMI_node.set_qmi_voice_set_config_req_tty_mode(TTY_MODE_VCO_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_set_config_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);


  // Expect: RIL_REQUEST_SET_TTY_MODE (resp)
  RIL_node.update_default_ril_request_set_tty_mode_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_TTY_MODE
  tty_mode = RIL_node.update_default_ril_request_set_tty_mode();
  tty_mode->tty_mode = TTY_HCO;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_set_config_req_msg();
  QMI_node.set_qmi_voice_set_config_req_tty_mode(TTY_MODE_HCO_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_set_config_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);


  // Expect: RIL_REQUEST_SET_TTY_MODE (resp)
  RIL_node.update_default_ril_request_set_tty_mode_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_TTY_MODE
  tty_mode = RIL_node.update_default_ril_request_set_tty_mode();
  tty_mode->tty_mode = TTY_Off;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_set_config_req_msg();
  QMI_node.set_qmi_voice_set_config_req_tty_mode(TTY_MODE_OFF_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_set_config_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_TTY_MODE (resp)
  RIL_node.update_default_ril_request_set_tty_mode_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_TTY_MODE
  tty_mode = RIL_node.update_default_ril_request_set_tty_mode();
  tty_mode->tty_mode = (ril_tty_mode_enum_type)10;
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_SET_TTY_MODE (resp)
  RIL_node.update_default_ril_request_set_tty_mode_resp();
  RIL_node.set_ril_error_value(RIL_E_INVALID_ARGUMENTS);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ril_set_tty_mode_002
    Back to back set tty requests
==**/
test_result ril_utf_ril_set_tty_mode_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_TTY_MODE
  ril_request_set_tty_mode_t *tty_mode = RIL_node.update_default_ril_request_set_tty_mode();
  tty_mode->tty_mode = TTY_Full;
  RIL_node.set_token_id(100);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_set_config_req_msg();
  QMI_node.set_qmi_voice_set_config_req_tty_mode(TTY_MODE_FULL_V02);
  t.expect(QMI_node);

  // Inject: RIL_REQUEST_SET_TTY_MODE
  tty_mode = RIL_node.update_default_ril_request_set_tty_mode();
  tty_mode->tty_mode = TTY_VCO;
  RIL_node.set_token_id(101);
  t.inject(RIL_node);

  // Inject: QMI_VOICE_SET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_set_config_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_TTY_MODE (resp)
  RIL_node.update_default_ril_request_set_tty_mode_resp();
  RIL_node.set_token_id(100);
  t.expect(RIL_node);

  // Expect: QMI_VOICE_SET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_set_config_req_msg();
  QMI_node.set_qmi_voice_set_config_req_tty_mode(TTY_MODE_VCO_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_set_config_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_TTY_MODE (resp)
  RIL_node.update_default_ril_request_set_tty_mode_resp();
  //RIL_node.set_ril_error_value(RIL_E_NO_RESOURCES);
  RIL_node.set_token_id(101);
  t.expect(RIL_node);



  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ril_get_tty_mode_001
==**/
test_result ril_utf_ril_get_tty_mode_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_TTY_MODE
  RIL_node.update_default_ril_request_get_tty_mode();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_get_config_req_msg();
  QMI_node.set_qmi_voice_get_config_req_tty_mode(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_get_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_config_resp_current_tty_mode(TTY_MODE_FULL_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_TTY_MODE (resp)
  ril_request_get_tty_mode_t *ril_resp = RIL_node.update_default_ril_request_get_tty_mode_resp();
  ril_resp->tty_mode = TTY_Full;
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_QUERY_TTY_MODE
  RIL_node.update_default_ril_request_get_tty_mode();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_get_config_req_msg();
  QMI_node.set_qmi_voice_get_config_req_tty_mode(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_get_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_config_resp_current_tty_mode(TTY_MODE_VCO_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_TTY_MODE (resp)
  ril_resp = RIL_node.update_default_ril_request_get_tty_mode_resp();
  ril_resp->tty_mode = TTY_VCO;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_QUERY_TTY_MODE
  RIL_node.update_default_ril_request_get_tty_mode();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_get_config_req_msg();
  QMI_node.set_qmi_voice_get_config_req_tty_mode(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_get_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_config_resp_current_tty_mode(TTY_MODE_HCO_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_TTY_MODE (resp)
  ril_resp = RIL_node.update_default_ril_request_get_tty_mode_resp();
  ril_resp->tty_mode = TTY_HCO;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_QUERY_TTY_MODE
  RIL_node.update_default_ril_request_get_tty_mode();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_get_config_req_msg();
  QMI_node.set_qmi_voice_get_config_req_tty_mode(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_get_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_config_resp_current_tty_mode(TTY_MODE_OFF_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_TTY_MODE (resp)
  ril_resp = RIL_node.update_default_ril_request_get_tty_mode_resp();
  ril_resp->tty_mode = TTY_Off;
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ril_get_tty_mode_002
==**/
test_result ril_utf_ril_get_tty_mode_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_TTY_MODE
  RIL_node.update_default_ril_request_get_tty_mode();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_get_config_req_msg();
  QMI_node.set_qmi_voice_get_config_req_tty_mode(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_get_config_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_TTY_MODE (resp)
  ril_request_get_tty_mode_t *ril_resp = RIL_node.update_default_ril_request_get_tty_mode_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_tty_mode
==**/
test_result ril_utf_ims_set_tty_mode(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_set_tty_mode");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_TTY_MODE
  IMS_node.update_default_ims_request_set_tty_mode(ims_Tty_Mode_Type_TTY_MODE_FULL);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_set_config_req_msg();
  QMI_node.set_qmi_voice_set_config_req_ui_tty_setting(TTY_MODE_FULL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_set_config_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_TTY_MODE (resp)
  IMS_node.update_default_ims_request_set_tty_mode_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_TTY_MODE
  IMS_node.update_default_ims_request_set_tty_mode(ims_Tty_Mode_Type_TTY_MODE_HCO);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_set_config_req_msg();
  QMI_node.set_qmi_voice_set_config_req_ui_tty_setting(TTY_MODE_HCO_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_set_config_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_TTY_MODE (resp)
  IMS_node.update_default_ims_request_set_tty_mode_resp();
  t.expect(IMS_node);

#if 0
  // Inject: ims_MsgId_REQUEST_SET_TTY_MODE
  IMS_node.update_default_ims_request_set_tty_mode((ims_Tty_Mode_Type)10);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_TTY_MODE (resp)
  IMS_node.update_default_ims_request_set_tty_mode_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);
#endif

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

#ifndef RIL_UTF_L_MASTER

void util_ims_conf_call
(
  Testcase &t,
  QMIRILTestnode &QMI_node,
  IMSTestnode &IMS_node,
  ims_CallType ims_call_type
)
{
  call_type_enum_v02 qmi_call_type;

  if (ims_call_type == ims_CallType_CALL_TYPE_VOICE)
  {
      qmi_call_type = CALL_TYPE_VOICE_IP_V02;
  }
  else if (ims_call_type == ims_CallType_CALL_TYPE_VT)
  {
      qmi_call_type = CALL_TYPE_VT_V02;
  }
  else
  {
      return;
  }


  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_call_type;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_call_type;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_call_type;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  IMS_node.update_default_ims_request_switch_waiting_or_holding_and_active_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* dial = IMS_node.update_default_ims_request_dial("2428536961");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536961");
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = qmi_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("2428536961");
  strlcpy(number_list[0].number, "2428536961", strlen("2428536961")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(2);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[1].call_id         = 2;
    audio_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(2);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[1].call_id         = 2;
    video_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_call_type;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = qmi_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("2428536961");
  strlcpy(number_list[0].number, "2428536961", strlen("2428536961")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(2);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[1].call_id         = 2;
    audio_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(2);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[1].call_id         = 2;
    video_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_call_type;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = qmi_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("2428536961");
  strlcpy(number_list[0].number, "2428536961", strlen("2428536961")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(2);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[1].call_id         = 2;
    audio_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(2);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[1].call_id         = 2;
    video_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 1;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_call_type;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_CONFERENCE
  IMS_node.update_default_ims_request_conference();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[2].call_id = 1;
  call_info[2].call_state = CALL_STATE_HOLD_V02;
  call_info[2].call_type = qmi_call_type;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = qmi_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(3);
  number_list[2].call_id = 1;
  number_list[2].number_len = strlen("2428536960");
  strlcpy(number_list[2].number, "2428536960", strlen("2428536960")+1);
  number_list[2].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(3);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[1].call_id         = 2;
    audio_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[2].call_id         = 3;
    audio_attrib[2].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(3);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[1].call_id         = 2;
    video_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[2].call_id         = 3;
    video_attrib[2].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[2].call_id = 1;
  call_info[2].call_state = CALL_STATE_HOLD_V02;
  call_info[2].call_type = qmi_call_type;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = qmi_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(3);
  number_list[2].call_id = 1;
  number_list[2].number_len = strlen("2428536960");
  strlcpy(number_list[2].number, "2428536960", strlen("2428536960")+1);
  number_list[2].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(3);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[1].call_id         = 2;
    audio_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[2].call_id         = 3;
    audio_attrib[2].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(3);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[1].call_id         = 2;
    video_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[2].call_id         = 3;
    video_attrib[2].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[2].call_id = 1;
  call_info[2].call_state = CALL_STATE_HOLD_V02;
  call_info[2].call_type = qmi_call_type;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = qmi_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(3);
  number_list[2].call_id = 1;
  number_list[2].number_len = strlen("2428536960");
  strlcpy(number_list[2].number, "2428536960", strlen("2428536960")+1);
  number_list[2].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(3);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[1].call_id         = 2;
    audio_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[2].call_id         = 3;
    audio_attrib[2].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(3);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[1].call_id         = 2;
    video_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[2].call_id         = 3;
    video_attrib[2].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[2].call_id = 1;
  call_info[2].call_state = CALL_STATE_END_V02;
  call_info[2].call_type = qmi_call_type;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = qmi_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(3);
  number_list[2].call_id = 1;
  number_list[2].number_len = strlen("2428536960");
  strlcpy(number_list[2].number, "2428536960", strlen("2428536960")+1);
  number_list[2].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(3);
    audio_attrib[0].call_id         = 1;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[1].call_id         = 2;
    audio_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[2].call_id         = 3;
    audio_attrib[2].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(3);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[1].call_id         = 2;
    video_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[2].call_id         = 3;
    video_attrib[2].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = qmi_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = qmi_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  if (qmi_call_type == CALL_TYPE_VT_V02)
  {
    // Audio attributes
    voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(2);
    audio_attrib[0].call_id         = 2;
    audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    audio_attrib[1].call_id         = 3;
    audio_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    // Video attributes
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(2);
    video_attrib[0].call_id         = 2;
    video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
    video_attrib[1].call_id         = 3;
    video_attrib[1].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_CONFERENCE (resp)
  IMS_node.update_default_ims_request_conference_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 2;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 2;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_ACTIVE;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->isMpty = 1;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 0;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_call_type;
  t.expect(IMS_node);

}


/**==
@testname: ril_utf_ims_mt_call_display_text
@description: VoLTE call with Display Text
==**/
test_result ril_utf_ims_mt_call_display_text(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mt_call_display_text");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // display text "JTORREY" in UTF-16 format
  voice_display_text_info_type_v02 *display_text = QMI_node.set_qmi_voice_all_call_status_ind_display_text(1);
  display_text[0].call_id = 1;
  display_text[0].display_text_len = 7;
  display_text[0].display_text[0] = 0x4A;
  display_text[0].display_text[1] = 0x54;
  display_text[0].display_text[2] = 0x4F;
  display_text[0].display_text[3] = 0x52;
  display_text[0].display_text[4] = 0x52;
  display_text[0].display_text[5] = 0x45;
  display_text[0].display_text[6] = 0x59;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.n_extras = 1;
  calls[0]->callDetails.extras = malloc(1 * sizeof(char *));
  calls[0]->callDetails.extras[0] = "DisplayText=JTORREY";
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.n_extras = 1;
  calls[0]->callDetails.extras = malloc(1 * sizeof(char *));
  calls[0]->callDetails.extras[0] = "DisplayText=JTORREY";
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  IMS_node.update_default_ims_request_hangup_foreground_resume_background();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (resp)
  IMS_node.update_default_ims_request_hangup_foreground_resume_background_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

#endif

/**==
@testname: ril_utf_ims_mt_call_voip_caller_name
@description: VoLTE call with VoIP caller name TLV
==**/
test_result ril_utf_ims_mt_call_voip_caller_name(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_mt_call_voip_caller_name");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // IP Caller Name "JTORREY" in UTF-16 format
  voice_ip_caller_name_info_type_v02 *ip_caller_name = QMI_node.set_qmi_voice_all_call_status_ind_ip_caller_name(1);
  ip_caller_name[0].call_id = 1;
  ip_caller_name[0].ip_caller_name_len = 7;
  ip_caller_name[0].ip_caller_name[0] = 0x4A;
  ip_caller_name[0].ip_caller_name[1] = 0x54;
  ip_caller_name[0].ip_caller_name[2] = 0x4F;
  ip_caller_name[0].ip_caller_name[3] = 0x52;
  ip_caller_name[0].ip_caller_name[4] = 0x52;
  ip_caller_name[0].ip_caller_name[5] = 0x45;
  ip_caller_name[0].ip_caller_name[6] = 0x59;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->name.arg = qcril_malloc(sizeof("JTORRY"));
  strlcpy((char*)calls[0]->name.arg, "JTORRY", strlen("JTORRY")+1);
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->failCause.has_failcause = FALSE;
  t.expect(IMS_node);
#else
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  ims_CallList_Call** calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->name = qcril_malloc(sizeof("JTORRY"));
  strlcpy(calls[0]->name, "JTORRY", strlen("JTORRY")+1);
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);
#endif

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->name.arg = qcril_malloc(sizeof("JTORREY"));
  strlcpy((char*)calls[0]->name.arg, "JTORREY", strlen("JTORREY")+1);
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);
#else
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->name = qcril_malloc(sizeof("JTORREY"));
  strlcpy(calls[0]->name, "JTORREY", strlen("JTORREY")+1);
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);
#endif

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->name.arg = qcril_malloc(sizeof("JTORREY"));
  strlcpy((char*)calls[0]->name.arg, "JTORREY", strlen("JTORREY")+1);
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);
#else
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_NORMAL);
  t.expect(IMS_node);
#endif

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_end_reason_text
@description: VoLTE call with VoIP caller name TLV
==**/
test_result ril_utf_ims_mo_call_end_reason_text(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  ims_CallList_Call** calls;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }


  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED;
  t.expect(IMS_node);
#else
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);
#endif

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_SIP_403_FORBIDDEN_V02;
  // End Reason Text "Forbidden - Not authorized for service" in UTF-16 format
  int i = 0;
  uint16_t text[50] = {0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x20,
      0x2d, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
      0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 38;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  t.inject(QMI_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  //calls[0]->failcause->networkerrorstring = "Forbidden - Not authorized for service";
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_SIP_FORBIDDEN;
  t.expect(IMS_node);
#else
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED);
  //IMS_node.set_ims_request_last_call_fail_cause_networkerrorstring("Forbidden - Not authorized for service");
  t.expect(IMS_node);
#endif

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_mo_call_end_imm_orig
@description: IMS MO call ENDs immediately after ORIG
==**/
test_result ril_utf_ims_mo_call_end_imm_orig(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  OEMTestnode OEM_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;
  ims_CallList_Call** calls;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
//  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->failCause.has_failcause = FALSE;
  t.expect(IMS_node);
#else
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);
#endif

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_PEER_NOT_REACHABLE_V02;
  t.inject(QMI_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_SIP_TEMPORARILY_UNAVAILABLE;
  t.expect(IMS_node);
#else
  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  IMS_node.update_default_ims_unsol_response_call_state_changed();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_GET_CURRENT_CALLS
  IMS_node.update_default_ims_request_get_current_calls();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_GET_CURRENT_CALLS (resp)
  calls = IMS_node.update_default_ims_request_get_current_calls_resp(0);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE
  IMS_node.update_default_ims_request_last_call_fail_cause();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_LAST_CALL_FAIL_CAUSE (resp)
  IMS_node.update_default_ims_request_last_call_fail_cause_resp();
  IMS_node.set_ims_request_last_call_fail_cause_failcause(ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED);
  t.expect(IMS_node);
#endif

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

//==================================================
// MSIM tests
//  Description:
//   Test cases for multi sim scenarios
//==================================================
test_result ril_utf_msim_dsds_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_description("first dsds test");
  t.set_test_attribute("ALL");
  // DSDS tests require one of the msim boot cases
  t.set_boot_case(qmi_ril_msim_bootup_primary_001);

  t.set_test_id(__func__);
  t.set_test_attribute("MSIM");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_msim_dsds_secondary_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_description("first dsds test");
  t.set_test_attribute("ALL");
  // DSDS tests require one of the msim boot cases
  t.set_boot_case(qmi_ril_msim_bootup_secondary_001);

  t.set_test_id(__func__);
  t.set_test_attribute("MSIM");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_add_participant_failure
@description: CS call with ADD_PARTICIPANT request, which is expected to fail.
==**/
test_result ril_utf_test_add_participant_failure(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_test_add_participant_failure");
  t.set_test_description("CS call with ADD_PARTICIPANT request");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: ims_MsgId_REQUEST_ADD_PARTICIPANT
  IMS_node.update_default_ims_request_add_participant("2428536960");
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_ADD_PARTICIPANT
  IMS_node.update_default_ims_request_add_participant_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

//==================================================
// DB tests
//  Description:
//   Test cases for db support
//==================================================
test_result ril_utf_db_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;
  DBTestnode DB_node;

  t.set_test_description("first db test");
  t.set_test_attribute("DB");
  t.set_test_id(__func__);

  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  t.clear_db_before_execution();

  // update DB property_set
  db_property_set("test_property_key", "0");

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(
    ims_SuppSvcOperationType_QUERY,
    ims_SuppSvcFacilityType_FACILITY_BAOC
    );
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg
    ( VOICE_REASON_BARR_ALLOUTGOING_V02 );
  t.expect(QMI_node);

  DB_node.utf_db_query_operator_type("ab", "cde", "");
  t.expect(DB_node);

  DB_node.utf_db_insert_operator_type("ab", "cde", "123", 0);
  t.inject(DB_node);

  DB_node.utf_db_insert_operator_type("ab", "cde", "123", 1);
  t.inject(DB_node);

  DB_node.utf_db_query_operator_type("ab", "cde", "123");
  t.expect(DB_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(
    QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01 );
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_SS_service_type
    ( VOICE_CC_SUPS_RESULT_REASON_BARR_ALLOUTGOING_V02 );
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status
    (
    ims_ServiceClassStatus_DISABLED,
    ims_SuppSvcFacilityType_FACILITY_BAOC
    );

  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


#ifdef RIL_UTF_L_MASTER
//==================================================
// SSR tests
//  Description:
//   Test cases for sub system restart
//==================================================
test_result ril_utf_ssr_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  SSRTestnode SSR_node;
  IMSTestnode IMS_node;
  OEMTestnode OEM_node;

  t.set_test_description("Simple SSR test case");
  t.set_test_attribute("ALL");
  t.set_test_id(__func__);

  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_VOICE);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_NAS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_WMS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_DMS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_PBM);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_RF_SAR);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_RFPE);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_PDC);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_DSD);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_IMS_SETTING);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_IMSA);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_LTE);
  t.inject(SSR_node);

  // Expect: RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED
  RIL_node.update_default_ril_unsol_resp_radio_state_changed();
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RADIO_STATE_CHANGED
  IMS_node.update_default_ims_unsol_radio_state_changed(ims_RadioState_RADIO_STATE_UNAVAILABLE);
  t.expect(IMS_node);

  // Wait for notify cb requests
  t.add_func_exec(utf_wait_for_notify_reg_cb);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_VOICE);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_NAS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_WMS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_DMS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_PBM);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_RF_SAR);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_RFPE);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_PDC);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_DSD);
  t.inject(SSR_node);

  t.set_start();
  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_IMSA);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_IMS_SETTING);
  t.inject(SSR_node);

  // Expect: QMI_IMS_SETTINGS_GET_SUPPORTED_MSGS_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_supported_msgs_req();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_SUPPORTED_MSGS_RESP_V01
  QMI_node.update_default_qmi_ims_settings_get_supported_msgs_resp();
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_GET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_reg_mgr_config_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_get_reg_mgr_config_rsp_v01();
  QMI_node.set_qmi_ims_settings_get_reg_mgr_config_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_GET_CLIENT_PROVISIONING_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_client_provisioning_config_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_CLIENT_PROVISIONING_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_get_client_provisioning_config_rsp_v01();
  QMI_node.set_qmi_ims_settings_get_client_provisioning_config_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMSA_IND_REG_REQ_V01
  QMI_node.update_default_qmi_imsa_ind_reg_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMSA_IND_REG_RSP_V01
  QMI_node.update_default_qmi_imsa_ind_reg_rsp_v01();
  QMI_node.set_qmi_imsa_ind_req_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_CONFIG_IND_REG_REQ_V01
  QMI_node.update_default_qmi_ims_config_ind_reg_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_CONFIG_IND_REG_RSP_V01
  QMI_node.update_default_qmi_ims_config_ind_reg_rsp_v01();
  QMI_node.set_qmi_ims_config_ind_req_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  t.set_end();

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_LTE);
  t.inject(SSR_node);

  ril_utf_bootup_helper(t, SSR_BOOT);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

//==================================================
//  Description:
//   Test case that haults execution and performs
//   SSR during boot sequence
//==================================================
test_result ril_utf_ssr_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  SSRTestnode SSR_node;
  IMSTestnode IMS_node;
  OEMTestnode OEM_node;

  t.set_test_description("attempt an SSR during partial qmi_client_init");
  t.set_test_attribute("ALL");
  // using a boot case that haults execution at qmi_client_init for IMSA

  t.set_test_id(__func__);
  t.set_test_attribute("ALL");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_VOICE);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_NAS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_WMS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_DMS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_PBM);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_RF_SAR);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_RFPE);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_PDC);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_DSD);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_IMSA);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_IMS_SETTING);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_LTE);
  t.inject(SSR_node);

  // Expect: RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED
  RIL_node.update_default_ril_unsol_resp_radio_state_changed();
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RADIO_STATE_CHANGED
  IMS_node.update_default_ims_unsol_radio_state_changed(ims_RadioState_RADIO_STATE_UNAVAILABLE);
  t.expect(IMS_node);

  // Wait for notify cb requests
  t.add_func_exec(utf_wait_for_notify_reg_cb);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_VOICE);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_NAS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_WMS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_DMS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_PBM);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_RF_SAR);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_RFPE);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_PDC);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_DSD);
  t.inject(SSR_node);

  t.set_start();

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_IMS_SETTING);
  t.inject(SSR_node);

  // Expect: QMI_IMS_SETTINGS_CONFIG_IND_REG_REQ_V01
  QMI_node.update_default_qmi_ims_config_ind_reg_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_CONFIG_IND_REG_RSP_V01
  QMI_node.update_default_qmi_ims_config_ind_reg_rsp_v01();
  QMI_node.set_qmi_ims_config_ind_req_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_GET_SUPPORTED_MSGS_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_supported_msgs_req();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_SUPPORTED_MSGS_RESP_V01
  QMI_node.update_default_qmi_ims_settings_get_supported_msgs_resp();
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_GET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_reg_mgr_config_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_get_reg_mgr_config_rsp_v01();
  QMI_node.set_qmi_ims_settings_get_reg_mgr_config_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_GET_CLIENT_PROVISIONING_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_client_provisioning_config_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_CLIENT_PROVISIONING_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_get_client_provisioning_config_rsp_v01();
  QMI_node.set_qmi_ims_settings_get_client_provisioning_config_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  t.set_end();

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_LTE);
  t.inject(SSR_node);

  // Run test nodes for partial boot up to blocked point
  qmi_ril_partial_bootup_helper_001(t);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_VOICE);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_NAS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_WMS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_DMS);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_PBM);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_RF_SAR);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_RFPE);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_PDC);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_DSD);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_IMS_SETTING);
  t.inject(SSR_node);

  // Inject: CLIENT_ERROR_CALLBACK
  SSR_node.update_default_ssr_client_error_callback(QCRIL_QMI_CLIENT_LTE);
  t.inject(SSR_node);

  // Expect: RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED
  RIL_node.update_default_ril_unsol_resp_radio_state_changed();
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RADIO_STATE_CHANGED
  IMS_node.update_default_ims_unsol_radio_state_changed(ims_RadioState_RADIO_STATE_UNAVAILABLE);
  t.expect(IMS_node);

  // Expect: LteDirectDiscovery_MsgId_UNSOL_RESPONSE_SERVICE_STATUS
  OEM_node.update_default_lte_direct_discovery_unsol_response_service_status();
  OEM_node.set_lte_direct_discovery_unsol_response_service_status_publish_allowed(0);
  OEM_node.set_lte_direct_discovery_unsol_response_service_status_subscribe_allowed(0);
  t.expect(OEM_node);

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_RADIO_NOT_AVAILABLE);
  t.expect(RIL_node);

  // Delay for notify registration
  // TODO: probably should find a deterministic way to do this
  t.sleep(500);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_VOICE);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_NAS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_WMS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_DMS);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_PBM);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_RF_SAR);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_RFPE);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_PDC);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_DSD);
  t.inject(SSR_node);

  t.set_start();

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_IMSA);
  t.inject(SSR_node);

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_IMS_SETTING);
  t.inject(SSR_node);

  // Expect: QMI_IMS_SETTINGS_GET_SUPPORTED_MSGS_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_supported_msgs_req();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_SUPPORTED_MSGS_RESP_V01
  QMI_node.update_default_qmi_ims_settings_get_supported_msgs_resp();
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_GET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_reg_mgr_config_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_get_reg_mgr_config_rsp_v01();
  QMI_node.set_qmi_ims_settings_get_reg_mgr_config_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_GET_CLIENT_PROVISIONING_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_get_client_provisioning_config_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_GET_CLIENT_PROVISIONING_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_get_client_provisioning_config_rsp_v01();
  QMI_node.set_qmi_ims_settings_get_client_provisioning_config_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMSA_IND_REG_REQ_V01
  QMI_node.update_default_qmi_imsa_ind_reg_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMSA_IND_REG_RSP_V01
  QMI_node.update_default_qmi_imsa_ind_reg_rsp_v01();
  QMI_node.set_qmi_imsa_ind_req_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_CONFIG_IND_REG_REQ_V01
  QMI_node.update_default_qmi_ims_config_ind_reg_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_CONFIG_IND_REG_RSP_V01
  QMI_node.update_default_qmi_ims_config_ind_reg_rsp_v01();
  QMI_node.set_qmi_ims_config_ind_req_rsp_v01_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  t.set_end();

  // Inject: CLIENT_NOTIFY_CALLBACK
  SSR_node.update_default_ssr_client_notify_callback(QCRIL_QMI_CLIENT_LTE);
  t.inject(SSR_node);

  ril_utf_bootup_helper(t, SSR_BOOT);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
#endif

/**==
@testname: ril_utf_test_get_activity_info_001
@description:
==**/
test_result ril_utf_test_get_activity_info_001( user_specified_attrib_t attr )
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__FUNCTION__);
  t.set_test_attribute("DMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_GET_ACTIVITY_INFO
  RIL_node.update_default_ril_request_get_activity_info_req();
  t.inject(RIL_node);

  // Expect: QMI_DMS_GET_MODEM_ACTIVITY_INFO_REQ_V01
  QMI_node.update_default_qmi_dms_get_modem_activity_info_req();
  t.expect(QMI_node);

  // Inject: QMI_DMS_GET_MODEM_ACTIVITY_INFO_RESP_V01
  QMI_node.update_default_qmi_dms_get_modem_activity_info_resp();
  t.inject(QMI_node);

  // Inject: QMI_DMS_MODEM_ACTIVITY_INFO_IND_V01
  QMI_node.update_default_qmi_dms_get_modem_activity_info_ind();
  QMI_node.set_qmi_dms_get_modem_activity_info_ind_is_newly_calculated_values(TRUE);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_GET_ACTIVITY_INFO
  RIL_node.update_default_ril_request_get_activity_info_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_lte_band_pref_001
@description: basic test case for RIL_REQUEST_SET_LTE_BAND_PREF
==**/
test_result ril_utf_test_set_lte_band_pref_001( user_specified_attrib_t attr )
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__FUNCTION__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_LTE_BAND_PREF_REQ
  int data[6] = {
    5,
    E_UTRA_Operating_Band_1,
    E_UTRA_Operating_Band_2,
    E_UTRA_Operating_Band_3,
    E_UTRA_Operating_Band_4,
    E_UTRA_Operating_Band_127,
  };
  RIL_node.update_default_ril_request_set_lte_band_pref_req(data);
  t.inject(RIL_node);

  // Expect: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_req();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_resp();
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_LTE_BAND_PRIORITY_REQ_MSG_V01
  nas_set_lte_band_priority_req_msg_v01* ptr = QMI_node.update_default_qmi_nas_set_lte_band_priority_req();
  ptr->band_priority_list_len = 5;
  ptr->band_priority_list[0] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_1_V01;
  ptr->band_priority_list[1] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_2_V01;
  ptr->band_priority_list[2] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_3_V01;
  ptr->band_priority_list[3] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_4_V01;
  ptr->band_priority_list[4] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_127_V01;
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_LTE_BAND_PRIORITY_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_lte_band_priority_resp();
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_LTE_BAND_PREF_RESP
  RIL_node.update_default_ril_request_set_lte_band_pref_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_lte_band_pref_002
@description: test case for 2nd RIL_REQUEST_SET_LTE_BAND_PREF_REQ comes before 1st finish
==**/
test_result ril_utf_test_set_lte_band_pref_002( user_specified_attrib_t attr )
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__FUNCTION__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_LTE_BAND_PREF_REQ
  int data[6] = {
    5,
    E_UTRA_Operating_Band_1,
    E_UTRA_Operating_Band_2,
    E_UTRA_Operating_Band_3,
    E_UTRA_Operating_Band_4,
    E_UTRA_Operating_Band_127,
  };
  RIL_node.update_default_ril_request_set_lte_band_pref_req(data);
  RIL_node.set_token_id(5000);
  t.inject(RIL_node);

  // Inject: RIL_REQUEST_SET_LTE_BAND_PREF_REQ
  RIL_node.update_default_ril_request_set_lte_band_pref_req(data);
  RIL_node.set_token_id(5001);
  t.inject(RIL_node);

  // Expect: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_req();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_resp();
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_LTE_BAND_PRIORITY_REQ_MSG_V01
  nas_set_lte_band_priority_req_msg_v01* ptr = QMI_node.update_default_qmi_nas_set_lte_band_priority_req();
  ptr->band_priority_list_len = 5;
  ptr->band_priority_list[0] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_1_V01;
  ptr->band_priority_list[1] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_2_V01;
  ptr->band_priority_list[2] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_3_V01;
  ptr->band_priority_list[3] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_4_V01;
  ptr->band_priority_list[4] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_127_V01;
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_LTE_BAND_PRIORITY_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_lte_band_priority_resp();
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_LTE_BAND_PREF_RESP
  RIL_node.update_default_ril_request_set_lte_band_pref_resp();
  RIL_node.set_token_id(5000);
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_SET_LTE_BAND_PREF_RESP
  RIL_node.update_default_ril_request_set_lte_band_pref_resp();
  RIL_node.set_token_id(5001);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_lte_band_pref_003
@description: test case for 2nd RIL_REQUEST_SET_LTE_BAND_PREF_REQ comes after 1st finish, and band_pref are the same
==**/
test_result ril_utf_test_set_lte_band_pref_003( user_specified_attrib_t attr )
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__FUNCTION__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_LTE_BAND_PREF_REQ
  int data[6] = {
    5,
    E_UTRA_Operating_Band_1,
    E_UTRA_Operating_Band_2,
    E_UTRA_Operating_Band_3,
    E_UTRA_Operating_Band_4,
    E_UTRA_Operating_Band_127,
  };
  RIL_node.update_default_ril_request_set_lte_band_pref_req(data);
  t.inject(RIL_node);

  // Expect: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_req();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_resp();
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_LTE_BAND_PRIORITY_REQ_MSG_V01
  nas_set_lte_band_priority_req_msg_v01* ptr = QMI_node.update_default_qmi_nas_set_lte_band_priority_req();
  ptr->band_priority_list_len = 5;
  ptr->band_priority_list[0] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_1_V01;
  ptr->band_priority_list[1] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_2_V01;
  ptr->band_priority_list[2] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_3_V01;
  ptr->band_priority_list[3] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_4_V01;
  ptr->band_priority_list[4] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_127_V01;
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_LTE_BAND_PRIORITY_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_lte_band_priority_resp();
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_LTE_BAND_PREF_RESP
  RIL_node.update_default_ril_request_set_lte_band_pref_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_LTE_BAND_PREF_REQ
  RIL_node.update_default_ril_request_set_lte_band_pref_req(data);
  t.inject(RIL_node);

  // Expect: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_req();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_RESP_MSG_V01
  nas_get_lte_band_priority_list_resp_msg_v01* ptr2 = QMI_node.update_default_qmi_nas_get_lte_band_priority_list_resp();
  ptr2->configured_band_priority_list_valid = TRUE;
  ptr2->configured_band_priority_list_len = 5;
  ptr2->configured_band_priority_list[0] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_1_V01;
  ptr2->configured_band_priority_list[1] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_2_V01;
  ptr2->configured_band_priority_list[2] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_3_V01;
  ptr2->configured_band_priority_list[3] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_4_V01;
  ptr2->configured_band_priority_list[4] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_127_V01;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_LTE_BAND_PREF_RESP
  RIL_node.update_default_ril_request_set_lte_band_pref_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_lte_band_pref_004
@description: test case for 2nd RIL_REQUEST_SET_LTE_BAND_PREF_REQ comes after 1st finish, and band_pref are different
==**/
test_result ril_utf_test_set_lte_band_pref_004( user_specified_attrib_t attr )
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__FUNCTION__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_LTE_BAND_PREF_REQ
  int data1[6] = {
    5,
    E_UTRA_Operating_Band_1,
    E_UTRA_Operating_Band_2,
    E_UTRA_Operating_Band_3,
    E_UTRA_Operating_Band_4,
    E_UTRA_Operating_Band_127,
  };
  RIL_node.update_default_ril_request_set_lte_band_pref_req(data1);
  t.inject(RIL_node);

  // Expect: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_req();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_resp();
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_LTE_BAND_PRIORITY_REQ_MSG_V01
  nas_set_lte_band_priority_req_msg_v01* ptr = QMI_node.update_default_qmi_nas_set_lte_band_priority_req();
  ptr->band_priority_list_len = 5;
  ptr->band_priority_list[0] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_1_V01;
  ptr->band_priority_list[1] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_2_V01;
  ptr->band_priority_list[2] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_3_V01;
  ptr->band_priority_list[3] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_4_V01;
  ptr->band_priority_list[4] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_127_V01;
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_LTE_BAND_PRIORITY_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_lte_band_priority_resp();
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_LTE_BAND_PREF_RESP
  RIL_node.update_default_ril_request_set_lte_band_pref_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_LTE_BAND_PREF_REQ
  int data2[6] = {
    5,
    E_UTRA_Operating_Band_1,
    E_UTRA_Operating_Band_2,
    E_UTRA_Operating_Band_3,
    E_UTRA_Operating_Band_126,
    E_UTRA_Operating_Band_127,
  };
  RIL_node.update_default_ril_request_set_lte_band_pref_req(data2);
  t.inject(RIL_node);

  // Expect: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_get_lte_band_priority_list_req();
  t.expect(QMI_node);

  // Inject: QMI_NAS_GET_LTE_BAND_PRIORITY_LIST_RESP_MSG_V01
  nas_get_lte_band_priority_list_resp_msg_v01* ptr2 = QMI_node.update_default_qmi_nas_get_lte_band_priority_list_resp();
  ptr2->configured_band_priority_list_valid = TRUE;
  ptr2->configured_band_priority_list_len = 5;
  ptr2->configured_band_priority_list[0] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_1_V01;
  ptr2->configured_band_priority_list[1] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_2_V01;
  ptr2->configured_band_priority_list[2] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_3_V01;
  ptr2->configured_band_priority_list[3] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_4_V01;
  ptr2->configured_band_priority_list[4] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_127_V01;
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_LTE_BAND_PRIORITY_REQ_MSG_V01
  ptr = QMI_node.update_default_qmi_nas_set_lte_band_priority_req();
  ptr->band_priority_list_len = 5;
  ptr->band_priority_list[0] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_1_V01;
  ptr->band_priority_list[1] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_2_V01;
  ptr->band_priority_list[2] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_3_V01;
  ptr->band_priority_list[3] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_126_V01;
  ptr->band_priority_list[4] = NAS_ACTIVE_BAND_E_UTRA_OPERATING_BAND_127_V01;
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_LTE_BAND_PRIORITY_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_lte_band_priority_resp();
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_LTE_BAND_PREF_RESP
  RIL_node.update_default_ril_request_set_lte_band_pref_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_send_ussd_008
@description:
Send USSD; Do not Answer USSD; Time out from Network, Send USSD, Answer USSD
==**/
test_result ril_utf_test_send_ussd_008(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send USSD - Do not send Answer -Timeout - Send and Answer USSD");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("#111#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_USSD_IND_V02
  QMI_node.update_default_qmi_voice_ussd_ind_msg(FURTHER_USER_ACTION_REQUIRED_V02);
  voice_uss_info_type_v02 *uss_info = QMI_node.set_qmi_voice_voice_uss_info();
  uss_info->uss_dcs = USS_DCS_ASCII_V02;
  char *uss_data_text = "-- Telstra  --\n1. MyAccount\n2. Credit Me2U\n3. Caller Tones\n4. Games\n5. Help\n00. Home";
  uss_info->uss_data_len = strlen(uss_data_text);
  strlcpy((char *)uss_info->uss_data, uss_data_text, QMI_VOICE_USS_DATA_MAX_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('1', NULL, 0);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  // Simulate Timeout when user not responding with action for USSD.
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_SUPS_FAILURE_CAUSE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  // Again initiate a USSD session. This time success
  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req2 = RIL_node.update_default_ril_request_send_ussd("*234#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss2 = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('2', NULL, 0);
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_test_send_ussd_007
@description:
Send USSD Cancel
==**/
test_result ril_utf_test_send_ussd_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Unsol USSD with uss_info_utf16 TLV");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("#111#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_USSD_IND_V02
  QMI_node.update_default_qmi_voice_ussd_ind_msg(FURTHER_USER_ACTION_REQUIRED_V02);
  voice_uss_info_type_v02 *uss_info = QMI_node.set_qmi_voice_voice_uss_info();
  uint16_t* uss_info_utf16 = QMI_node.set_qmi_voice_uss_info_utf16(147);
  uint16_t temp_text[] = { 49, 46, 63, 63, 63, 232, 63, 63,
                        228, 191, 161, 63, 63, 63, 10, 50,
                        46, 233, 63, 63, 230, 63, 63, 230,
                        63, 165, 233, 167, 63, 233, 63, 63,
                        232, 63, 63, 10, 51, 46, 232, 63,
                        63, 229, 63, 63, 230, 63, 165, 232,
                        63, 63, 10, 52, 46, 230, 63, 63,
                        233, 63, 63, 230, 63, 63, 229, 63,
                        63, 10, 53, 46, 229, 63, 63, 63,
                        63, 63, 63, 63, 63, 232, 63, 63,
                        63, 63, 63, 63, 63, 63, 10, 10,
                        42, 228, 63, 63, 228, 63, 63, 233,
                        32, 63, 10, 10, 232, 63, 63, 63,
                        63, 63, 230, 63, 164, 230, 63, 63,
                        229, 63, 63, 229, 63, 63, 233, 63,
                        63, 51, 71, 230, 63, 63, 232, 63,
                        63, 232, 63, 63, 229, 63, 63, 63,
                        63, 63, 230, 63, 63, 228, 63, 191,
                        63, 63, 63, 0 };
  memcpy(uss_info_utf16, temp_text, sizeof(temp_text));
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('1', NULL, 0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_CANCEL_USSD
  RIL_node.update_default_ril_request_cancel_ussd();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_CANCEL_USSD_REQ_V02
  QMI_node.update_default_qmi_voice_cancel_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_ABORTED_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_cancel_ussd_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CANCEL_USSD (resp)
  RIL_node.update_default_ril_request_cancel_ussd_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_USSD_RELEASE_IND_V02
  QMI_node.update_default_qmi_voice_ussd_release_ind_msg();
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('0', NULL, 0);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_send_ussd_006
@description:
Send USSD; Answer USSD; Cancel
==**/
test_result ril_utf_test_send_ussd_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send USSD cancel");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("#111#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_USSD_IND_V02
  QMI_node.update_default_qmi_voice_ussd_ind_msg(FURTHER_USER_ACTION_REQUIRED_V02);
  voice_uss_info_type_v02 *uss_info = QMI_node.set_qmi_voice_voice_uss_info();
  uss_info->uss_dcs = USS_DCS_ASCII_V02;
  char *uss_data_text = "-- Telstra  --\n1. MyAccount\n2. Credit Me2U\n3. Caller Tones\n4. Games\n5. Help\n00. Home";
  uss_info->uss_data_len = strlen(uss_data_text);
  strlcpy((char *)uss_info->uss_data, uss_data_text, QMI_VOICE_USS_DATA_MAX_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('1', NULL, 0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SEND_USSD
  send_ussd_req = RIL_node.update_default_ril_request_send_ussd("5");
  t.inject(RIL_node);

  voice_uss_info_type_v02* answer_uss = QMI_node.update_default_qmi_voice_answer_ussd_req_msg();
  answer_uss->uss_dcs = USS_DCS_ASCII_V02;
  answer_uss->uss_data_len = 1;
  strlcpy((char *)answer_uss->uss_data, "5", QMI_VOICE_USS_DATA_MAX_V02);
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_USSD_IND_V02
  QMI_node.update_default_qmi_voice_ussd_ind_msg(FURTHER_USER_ACTION_REQUIRED_V02);
  uss_info = QMI_node.set_qmi_voice_voice_uss_info();
  uss_info->uss_dcs = USS_DCS_ASCII_V02;
  uss_data_text = "CreditMe2U is not currently available on your service:\n"
                  " Postpaid service is barred from Credit Me2U\n 00. Home";
  uss_info->uss_data_len = strlen(uss_data_text);
  strlcpy((char *)uss_info->uss_data, uss_data_text, QMI_VOICE_USS_DATA_MAX_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('1', NULL, 0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_CANCEL_USSD
  RIL_node.update_default_ril_request_cancel_ussd();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_CANCEL_USSD_REQ_V02
  QMI_node.update_default_qmi_voice_cancel_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_ABORTED_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_cancel_ussd_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CANCEL_USSD (resp)
  RIL_node.update_default_ril_request_cancel_ussd_resp();
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_send_ussd_005
@description:
Send USSD Cancel
==**/
test_result ril_utf_test_send_ussd_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send USSD cancel");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("#111#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_USSD_IND_V02
  QMI_node.update_default_qmi_voice_ussd_ind_msg(FURTHER_USER_ACTION_REQUIRED_V02);
  voice_uss_info_type_v02 *uss_info = QMI_node.set_qmi_voice_voice_uss_info();
  uss_info->uss_dcs = USS_DCS_ASCII_V02;
  char *uss_data_text = "-- Telstra  --\n1. MyAccount\n2. Credit Me2U\n3. Caller Tones\n4. Games\n5. Help\n00. Home";
  uss_info->uss_data_len = strlen(uss_data_text);
  strlcpy((char *)uss_info->uss_data, uss_data_text, QMI_VOICE_USS_DATA_MAX_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('1', NULL, 0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_CANCEL_USSD
  RIL_node.update_default_ril_request_cancel_ussd();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_CANCEL_USSD_REQ_V02
  QMI_node.update_default_qmi_voice_cancel_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_ABORTED_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_cancel_ussd_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CANCEL_USSD (resp)
  RIL_node.update_default_ril_request_cancel_ussd_resp();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_USSD_RELEASE_IND_V02
  QMI_node.update_default_qmi_voice_ussd_release_ind_msg();
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('0', NULL, 0);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_test_send_ussd_004
@description:
Send USSD - Failure with QMI_ERR_CARD_CALL_CONTROL_FAILED
==**/
test_result ril_utf_test_send_ussd_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send USSD - Failure with QMI_ERR_CARD_CALL_CONTROL_FAILED");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("*234#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_FAILURE_V01,
          QMI_ERR_CARD_CALL_CONTROL_FAILED_V01);
  uint8_t alpha_text[] = {80, 101, 116, 105, 99, 105, 111, 110, 32, 116, 114, 97, 109, 105, 116, 97, 100, 97, 0};
  QMI_node.set_qmi_voice_orig_ussd_resp_alpha_id(ALPHA_DCS_GSM_V02, 18, alpha_text);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_STK_CC_ALPHA_NOTIFY
  uint8_t *data = RIL_node.update_default_ril_unsol_stk_cc_alpha_notify();
  strlcpy((char *)data, "Peticion tramitada", 257);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('3', NULL, 0);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_send_ussd_003
@description:
Send USSD - FDN check failure case
==**/
test_result ril_utf_test_send_ussd_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send USSD - FDN check failure case");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("*234#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_FDN_RESTRICT_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  RIL_node.set_ril_error_value(RIL_E_FDN_CHECK_FAILURE);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_send_ussd_002
@description:
Send USSD - Generic failure case
==**/
test_result ril_utf_test_send_ussd_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send USSD - Generic failure case");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("*234#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_send_ussd_001
@description:
Send USSD - Success case
==**/
test_result ril_utf_test_send_ussd_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send USSD - Success case");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("*234#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('2', NULL, 0);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_001
@description:
 - Telephony changes IMS reg state
==**/
test_result ril_utf_ims_reg_state_change_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_NOT_REGISTERED);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ims_service_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_002
@description:
 - Telephony enables IMS reg state
==**/
test_result ril_utf_ims_reg_state_change_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_REGISTERED);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ims_service_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_003
@description:
 - Telephony changes IMS reg state - failure
==**/
test_result ril_utf_ims_reg_state_change_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "0");

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_NOT_REGISTERED);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ims_service_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_004
@description:
 - Enable feature to set voice domain preference on IMS capability change
 - Telephony disables IMS reg
==**/
test_result ril_utf_ims_reg_state_change_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "1");

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_NOT_REGISTERED);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ims_service_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

#else
  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_CS_ONLY_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_005
@description:
 - Enable feature to set voice domain preference on IMS capability change
 - Telephony enable IMS reg
==**/
test_result ril_utf_ims_reg_state_change_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "1");

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_REGISTERED);
  t.inject(IMS_node);


#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ims_service_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

#else
  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_PS_PREF_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_006
@description:
 - Enable feature to set voice domain preference on IMS capability change
 - Telephony disables IMS reg state.
   set ims test mode (TRUE) success
   set voice domain pref failure
   revert voice domain pref (set to FALSE)
==**/
test_result ril_utf_ims_reg_state_change_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "1");

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_NOT_REGISTERED);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ims_service_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

#else
  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_CS_ONLY_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

#if 0
  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif
#endif

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_007
@description:
 - Enable feature to set voice domain preference on IMS capability change
 - Telephony disables IMS reg state.
   set ims test mode failure
==**/
test_result ril_utf_ims_reg_state_change_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "1");

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_NOT_REGISTERED);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ims_service_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

#else
  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_008
@description:
 - Enable feature to set voice domain preference on IMS capability change
 - Telephony enables IMS reg state.
   set voice domain pref
   set ims test mode failure
==**/
test_result ril_utf_ims_reg_state_change_008(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "1");

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_REGISTERED);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ims_service_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

#else

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_PS_PREF_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_req();
  QMI_node.set_qmi_ims_settings_set_reg_mgr_config_req_ims_test_mode_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_REG_MGR_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_reg_mgr_config_rsp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_CS_ONLY_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_reg_state_change_009
@description:
 - Telephony changes IMS reg state
==**/
test_result ril_utf_ims_reg_state_change_009(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.disable_modem_cfg", "true");

  // Inject: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE
  IMS_node.update_default_ims_request_ims_reg_state_change();
  IMS_node.set_ims_request_ims_reg_state_change_state(ims_Registration_RegState_NOT_REGISTERED);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_IMS_REG_STATE_CHANGE (Resp)
  IMS_node.update_default_ims_request_ims_reg_state_change_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_001
@description:
==**/
test_result ril_utf_ims_set_service_status_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(true);
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(true);
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(true);
  IMS_node.set_ims_request_set_service_status_ut_enabled(true);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(TRUE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(TRUE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(TRUE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ut_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_QIPCALL_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_qipcall_config_req_v01();
  QMI_node.set_qmi_ims_settings_set_qipcall_config_req_v01_volte_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_QIPCALL_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_qipcall_config_rsp_v01(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(false);
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(false);
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(false);
  IMS_node.set_ims_request_set_service_status_ut_enabled(false);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(FALSE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(FALSE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(FALSE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ut_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_QIPCALL_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_qipcall_config_req_v01();
  QMI_node.set_qmi_ims_settings_set_qipcall_config_req_v01_volte_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_QIPCALL_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_qipcall_config_rsp_v01(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_002
@description:
==**/
test_result ril_utf_ims_set_service_status_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_003
@description:
==**/
test_result ril_utf_ims_set_service_status_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.disable_modem_cfg", "true");

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(true);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_set_service_status_004
@description:
==**/
test_result ril_utf_ims_set_service_status_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(true);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_QIPCALL_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_qipcall_config_req_v01();
  QMI_node.set_qmi_ims_settings_set_qipcall_config_req_v01_vt_calling_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_QIPCALL_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_qipcall_config_rsp_v01(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(false);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_QIPCALL_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_qipcall_config_req_v01();
  QMI_node.set_qmi_ims_settings_set_qipcall_config_req_v01_vt_calling_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_QIPCALL_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_qipcall_config_rsp_v01(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_005
@description:
==**/
test_result ril_utf_ims_set_service_status_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_set_service_status_006
@description:
==**/
test_result ril_utf_ims_set_service_status_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.disable_modem_cfg", "true");

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(true);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_set_service_status_007
@description:
==**/
test_result ril_utf_ims_set_service_status_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(true);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_CLIENT_PROVISIONING_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_client_provisioning_config_req_v01();
  QMI_node.set_qmi_ims_settings_set_client_provisioning_config_req_v01_wifi_call(IMS_SETTINGS_WFC_STATUS_ON_V01);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_CLIENT_PROVISIONING_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_client_provisioning_config_rsp_v01(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);



  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(false);
  t.inject(IMS_node);

#if 1
  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#else
  // OLD IMSS APIs

  // Expect: QMI_IMS_SETTINGS_SET_CLIENT_PROVISIONING_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_client_provisioning_config_req_v01();
  QMI_node.set_qmi_ims_settings_set_client_provisioning_config_req_v01_wifi_call(IMS_SETTINGS_WFC_STATUS_OFF_V01);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_CLIENT_PROVISIONING_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_client_provisioning_config_rsp_v01(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_set_service_status_008
@description:
==**/
test_result ril_utf_ims_set_service_status_008(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);



  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_set_service_status_009
@description:
==**/
test_result ril_utf_ims_set_service_status_009(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.disable_modem_cfg", "true");

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(true);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_010
@description:
==**/
test_result ril_utf_ims_set_service_status_010(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_011
@description:
==**/
test_result ril_utf_ims_set_service_status_011(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "true");

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(true);
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(true);
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(true);
  IMS_node.set_ims_request_set_service_status_ut_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_PS_PREF_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(TRUE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(TRUE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(TRUE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ut_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(false);
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(false);
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(false);
  IMS_node.set_ims_request_set_service_status_ut_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(FALSE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(FALSE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(FALSE);
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ut_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_CS_ONLY_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_012
@description:
==**/
test_result ril_utf_ims_set_service_status_012(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "true");

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_PS_PREF_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_CS_ONLY_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_013
@description:
==**/
test_result ril_utf_ims_set_service_status_013(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "true");

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_PS_PREF_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  QMI_node.set_qmi_nas_system_selection_preference_req_voice_domain_pref(NAS_VOICE_DOMAIN_PREF_CS_ONLY_V01);
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_volte_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_volte_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_014
@description:
==**/
test_result ril_utf_ims_set_service_status_014(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "true");

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_video_telephony_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_videotelephony_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_015
@description:
==**/
test_result ril_utf_ims_set_service_status_015(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.vdp_on_ims_cap", "true");

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);



  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_wifi_calling_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_wifi_calling_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_service_status_016
@description:
==**/
test_result ril_utf_ims_set_service_status_016(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_ut_enabled(true);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ut_enabled(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SET_SERVICE_STATUS
  IMS_node.update_default_ims_request_set_service_status();
  IMS_node.set_ims_request_set_service_status_ut_enabled(false);
  t.inject(IMS_node);

  // Expect: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_REQ_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_req();
  QMI_node.set_qmi_ims_settings_set_ims_service_enable_config_req_ut_enabled(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_IMS_SETTINGS_SET_IMS_SERVICE_ENABLE_CONFIG_RSP_V01
  QMI_node.update_default_qmi_ims_settings_set_ims_service_enable_config_resp(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SERVICE_STATUS (resp)
  IMS_node.update_default_ims_request_set_service_status_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_test_nv_reset_config_001
@description:
==**/
test_result ril_utf_test_nv_reset_config_001(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("NV");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_NV_RESET_CONFIG
  RIL_node.update_default_ril_request_nv_reset_config();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_NV_RESET_CONFIG (resp)
  RIL_node.update_default_ril_request_nv_reset_config_resp();
  RIL_node.set_ril_error_value(RIL_E_REQUEST_NOT_SUPPORTED);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_shutdown_003
@description:
  SHUTDOWN request while the IMSA PDP not in connected state
==**/
test_result ril_utf_test_shutdown_001(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SHUTDOWN
  RIL_node.update_default_ril_request_shutdown();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_SHUTDOWN (resp)
  RIL_node.update_default_ril_request_shutdown_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_shutdown_003
@description:
  SHUTDOWN request while the IMSA PDP in connected state
==**/
test_result ril_utf_test_shutdown_002(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_IMSA_PDP_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_pdp_status_ind(true);
  t.inject(QMI_node);

  // Delay for processing the PDP status ind
  t.sleep(100);

  // Inject: RIL_REQUEST_SHUTDOWN
  RIL_node.update_default_ril_request_shutdown();
  t.inject(RIL_node);

  // Inject: QMI_IMSA_PDP_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_pdp_status_ind(false);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SHUTDOWN (resp)
  RIL_node.update_default_ril_request_shutdown_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_shutdown_003
@description:
  IMSA PDP in connected state
  Force shutdown after 6 seconds timeout
==**/
test_result ril_utf_test_shutdown_003(user_specified_attrib_t attr)
{
  Testcase t;
  AndroidTelTestnode RIL_node;
  QMIRILTestnode QMI_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_IMSA_PDP_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_pdp_status_ind(true);
  t.inject(QMI_node);

  // Delay for processing the PDP status ind
  t.sleep(100);

  // Inject: RIL_REQUEST_SHUTDOWN
  RIL_node.update_default_ril_request_shutdown();
  t.inject(RIL_node);

// PASS after 6 second timeout for PDP Disconnect

  // Expect: RIL_REQUEST_SHUTDOWN (resp)
  RIL_node.update_default_ril_request_shutdown_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_test_query_network_selection_mode_1(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_net_sel_pref(NAS_NET_SEL_PREF_AUTOMATIC_V01);
  t.inject(QMI_node);

  // To make sure indication is handled
  t.sleep(2);

  // Inject: RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE
  RIL_node.update_default_ril_request_query_network_selection_mode();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE (resp)
  ril_request_query_network_selection_mode_resp_t *exp_mode =
      RIL_node.update_default_ril_request_query_network_selection_mode_resp();
  exp_mode->network_selection_mode = AUTOMATIC_SELECTION;
  t.expect(RIL_node);

  // Execute the test case
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_test_query_network_selection_mode_2(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_NAS_SYSTEM_SELECTION_PREFERENCE_IND_MSG_V01
  QMI_node.update_default_qmi_nas_system_selection_preference_ind_msg();
  QMI_node.set_qmi_nas_system_selection_preference_ind_net_sel_pref(NAS_NET_SEL_PREF_MANUAL_V01);
  t.inject(QMI_node);

  // To make sure indication is handled
  t.sleep(2);

  // Inject: RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE
  RIL_node.update_default_ril_request_query_network_selection_mode();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE (resp)
  ril_request_query_network_selection_mode_resp_t *exp_mode =
      RIL_node.update_default_ril_request_query_network_selection_mode_resp();
  exp_mode->network_selection_mode = MANUAL_SELECTION;
  t.expect(RIL_node);

  // Execute the test case
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_test_set_band_mode(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_BAND_MODE
  ril_request_set_band_mode_t *ptr = RIL_node.update_default_ril_request_set_band_mode();
  ptr->band_mode = unspecified;
  t.inject(RIL_node);

  // Expect: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_REQ_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_req_msg();
  nas_band_pref_mask_type_v01 *qmi_band = QMI_node.set_qmi_nas_system_selection_preference_req_band_pref();
  *qmi_band = BAND_PREF_COMB_ANY;
  t.expect(QMI_node);

  // Inject: QMI_NAS_SET_SYSTEM_SELECTION_PREFERENCE_RESP_MSG_V01
  QMI_node.update_default_qmi_nas_set_system_selection_preference_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_BAND_MODE (resp)
  RIL_node.update_default_ril_request_set_band_mode_resp();
  t.expect(RIL_node);

  // Execute the test case
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_test_get_available_band_modes(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE
  RIL_node.update_default_ril_request_query_available_band_mode();
  t.inject(RIL_node);

  // Expect: QMI_DMS_GET_BAND_CAPABILITY_REQ_V01
  QMI_node.update_default_qmi_dms_get_band_capability_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_DMS_GET_BAND_CAPABILITY_REQ_V01
  QMI_node.update_default_qmi_dms_get_band_capability_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01,
          BAND_PREF_COMB_ANY);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE (resp)
  int *ptr =
      RIL_node.update_Default_ril_request_query_available_band_mode_resp();
  ptr[0] = 19;
  ptr[1] = unspecified;
  ptr[2] = EURO_band;
  ptr[3] = US_band;
  ptr[4] = JPN_band;
  ptr[5] = AUS_band;
  ptr[6] = AUS_band_2;
  ptr[7] = Cellular;
  ptr[8] = PCS;
  ptr[9] = Band_Class_3;
  ptr[10] = Band_Class_4;
  ptr[11] = Band_Class_5;
  ptr[12] = Band_Class_6;
  ptr[13] = Band_Class_7;
  ptr[14] = Band_Class_8;
  ptr[15] = Band_Class_9;
  ptr[16] = Band_Class_10;
  ptr[17] = Band_Class_11;
  ptr[18] = Band_Class_15;
  ptr[19] = Band_Class_16;

  t.expect(RIL_node);

  // Execute the test case
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_test_device_identity(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DEVICE_IDENTITY
  RIL_node.update_default_ril_request_device_identity_req();
  t.inject(RIL_node);

  // Expect: QMI_DMS_GET_DEVICE_SERIAL_NUMBERS_REQ_V01
  QMI_node.update_default_qmi_dms_get_device_serial_numbers_req();
  t.expect(QMI_node);

  // Inject: QMI_DMS_GET_DEVICE_SERIAL_NUMBERS_RESP_V01
  QMI_node.update_deafult_qmi_dms_get_device_serial_numbers_resp_msg(
          QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  char *esn    = QMI_node.set_qmi_dms_get_device_serial_numbers_resp_esn();
  char *imei   = QMI_node.set_qmi_dms_get_device_serial_numbers_resp_imei();
  char *imeid  = QMI_node.set_qmi_dms_get_device_serial_numbers_resp_meid();
  char *imeisv = QMI_node.set_qmi_dms_get_device_serial_numbers_resp_imeisv_svn();
  strlcpy(esn,"12345678", QMI_DMS_ESN_MAX_V01);
  strlcpy(imei,"00000123456789", QMI_DMS_IMEI_MAX_V01);
  strlcpy(imeid,"98765432100000", QMI_DMS_MEID_MAX_V01);
  strlcpy(imeisv,"01", QMI_DMS_IMEISV_MAX_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DEVICE_IDENTITY (resp)
  ril_request_device_identity_type_t *ptr = RIL_node.update_default_ril_request_device_identity_resp();
  strlcpy(ptr->imei,"00000123456789",IMEI_MAX_STR_SIZE);
  strlcpy(ptr->imeisv,"01", IMEI_MAX_STR_SIZE);
  strlcpy(ptr->esn,"12345678", IMEI_MAX_STR_SIZE);
  strlcpy(ptr->meid,"98765432100000", IMEI_MAX_STR_SIZE);
  t.expect(RIL_node);

  // Execute the test case
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_test_get_base_band_version(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_BASEBAND_VERSION
  RIL_node.update_default_ril_request_baseband_version_req();
  t.inject(RIL_node);

  // Expect: QMI_DMS_GET_SW_VERSION_REQ_V01
  QMI_node.update_default_qmi_dms_get_sw_version_req_v01();
  t.expect(QMI_node);

  // Inject: QMI_DMS_GET_SW_VERSION_RESP_V01
  char *ptr = QMI_node.update_default_qmi_dms_get_sw_version_resp_msg(
          QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  strlcpy(ptr,"HE.1.1", QMI_DMS_SW_VERSION_MAX_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_BASEBAND_VERSION (resp)
  ril_request_get_baseband_version_type_t *resp = RIL_node.update_default_ril_request_baseband_version_resp();
  strlcpy(resp->swver, "HE.1.1", SW_VERSION_MAX);
  t.expect(RIL_node);

  // Execute the test case
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_test_emergency_list_unsol_1(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  const char *nw_ecc = "911";
  const char *hard_coded_ecc = "112";
  const char *card_ecc = "113";
  const char *nv_ecc = "114";
  const char *mcc_ecc = "115";
  uint32_t   hlos_all_categories = RIL_EMERGENCY_CATEGORY_UNSPECIFIED |
      RIL_EMERGENCY_CATEGORY_POLICE |
      RIL_EMERGENCY_CATEGORY_AMBULANCE |
      RIL_EMERGENCY_CATEGORY_FIRE_BRIGADE |
      RIL_EMERGENCY_CATEGORY_MARINE_GUARD |
      RIL_EMERGENCY_CATEGORY_MOUNTAIN_RESCUE |
      RIL_EMERGENCY_CATEGORY_MIEC |
      RIL_EMERGENCY_CATEGORY_AIEC;

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_PBM_EMERGENCY_LIST_IND_V01
  QMI_node.update_default_qmi_pbm_list_ind_msg();
  QMI_node.update_nw_from_qmi_pbm_list_ind_msg(nw_ecc);
  QMI_node.update_nv_ecc_from_qmi_pbm_list_ind_msg(nv_ecc);
  QMI_node.update_card_ecc_from_qmi_pbm_list_ind_msg(card_ecc);
  QMI_node.update_hardcoded_ecc_from_qmi_pbm_list_ind_msg(hard_coded_ecc);
  QMI_node.update_mcc_ecc_from_qmi_pbm_list_ind_msg(mcc_ecc);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_EMERGENCY_NUMBERS_LIST (resp)
  // As we are injecting QMI_PBM_EMERGENCY_LIST_IND_V01 with 5 emergency numbers, 5 numbers are
  // expected in unsol.
  ril_unsol_emergency_list_t *payload = RIL_node.update_default_ril_unsol_emergency_number_list(5);

  // 1st entry
  payload->ecc_list.emergency_numbers[0].category = hlos_all_categories; // All categories
  payload->ecc_list.emergency_numbers[0].sources = RIL_EMERGENCY_NUMBER_SOURCE_NETWORK_SIGNALING;
  strlcpy(payload->ecc_list.emergency_numbers[0].number, nw_ecc, MAX_EMERGENCY_NUMBER_LENGTH);
  strlcpy(payload->ecc_list.emergency_numbers[0].mcc, "", MAX_RIL_MCC_MNC_SIZE);
  strlcpy(payload->ecc_list.emergency_numbers[0].mnc, "", MAX_RIL_MCC_MNC_SIZE);

  // 2nd entry
  // For NV item ecc, QMI will not send category info.
  payload->ecc_list.emergency_numbers[1].category = RIL_EMERGENCY_CATEGORY_UNSPECIFIED;
  payload->ecc_list.emergency_numbers[1].sources = RIL_EMERGENCY_NUMBER_SOURCE_MODEM_CONFIG;
  strlcpy(payload->ecc_list.emergency_numbers[1].number, nv_ecc, MAX_EMERGENCY_NUMBER_LENGTH);
  strlcpy(payload->ecc_list.emergency_numbers[1].mcc, "", MAX_RIL_MCC_MNC_SIZE);
  strlcpy(payload->ecc_list.emergency_numbers[1].mnc, "", MAX_RIL_MCC_MNC_SIZE);

  // 3rd entry
  payload->ecc_list.emergency_numbers[2].category = hlos_all_categories; // All categories
  payload->ecc_list.emergency_numbers[2].sources = RIL_EMERGENCY_NUMBER_SOURCE_SIM;
  strlcpy(payload->ecc_list.emergency_numbers[2].number, card_ecc, MAX_EMERGENCY_NUMBER_LENGTH);
  strlcpy(payload->ecc_list.emergency_numbers[2].mcc, "", MAX_RIL_MCC_MNC_SIZE);
  strlcpy(payload->ecc_list.emergency_numbers[2].mnc, "", MAX_RIL_MCC_MNC_SIZE);

  // 4th entry
  payload->ecc_list.emergency_numbers[3].category = RIL_EMERGENCY_CATEGORY_UNSPECIFIED;
  payload->ecc_list.emergency_numbers[3].sources = RIL_EMERGENCY_NUMBER_SOURCE_MODEM_CONFIG;
  strlcpy(payload->ecc_list.emergency_numbers[3].number, mcc_ecc, MAX_EMERGENCY_NUMBER_LENGTH);
  strlcpy(payload->ecc_list.emergency_numbers[3].mcc, "", MAX_RIL_MCC_MNC_SIZE);
  strlcpy(payload->ecc_list.emergency_numbers[3].mnc, "", MAX_RIL_MCC_MNC_SIZE);

  // 5th entry
  payload->ecc_list.emergency_numbers[4].category = RIL_EMERGENCY_CATEGORY_UNSPECIFIED; // All categories
  payload->ecc_list.emergency_numbers[4].sources = RIL_EMERGENCY_NUMBER_SOURCE_DEFAULT;
  strlcpy(payload->ecc_list.emergency_numbers[4].number, hard_coded_ecc, MAX_EMERGENCY_NUMBER_LENGTH);
  strlcpy(payload->ecc_list.emergency_numbers[4].mcc, "", MAX_RIL_MCC_MNC_SIZE);
  strlcpy(payload->ecc_list.emergency_numbers[4].mnc, "", MAX_RIL_MCC_MNC_SIZE);

  t.expect(RIL_node);

  // Execute the test case
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

test_result ril_utf_test_emergency_list_unsol_2(user_specified_attrib_t attr)
{
  test_result ret;

  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  const char *number = "911";
  const char *urn = "urn:service:sos.police.municipal";

  t.set_test_id(__func__);
  t.set_test_attribute("NAS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_PBM_EMERGENCY_LIST_IND_V01
  QMI_node.update_default_qmi_pbm_list_ind_msg();
  QMI_node.update_elenl_from_qmi_pbm_list_ind_msg(number, urn);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_EMERGENCY_NUMBERS_LIST (resp)
  ril_unsol_emergency_list_t *payload = RIL_node.update_default_ril_unsol_emergency_number_list(1);
  payload->ecc_list.emergency_numbers[0].sources = RIL_EMERGENCY_NUMBER_SOURCE_NETWORK_SIGNALING;
  strlcpy(payload->ecc_list.emergency_numbers[0].number, number, MAX_EMERGENCY_NUMBER_LENGTH);
  strlcpy(payload->ecc_list.emergency_numbers[0].mcc, "", MAX_RIL_MCC_MNC_SIZE);
  strlcpy(payload->ecc_list.emergency_numbers[0].mnc, "", MAX_RIL_MCC_MNC_SIZE);
  strlcpy(payload->ecc_list.emergency_numbers[0].urn[0], urn, MAX_URN_LENGTH);
  t.expect(RIL_node);

  // Execute the test case
  t.execute();

  t.print_summary();

  return t.get_test_result();
}

//==================================================
//  ril_utf_test_carrier_aggregation_ind_001
//  Description:
//   Carrier aggregation indications
//==================================================
test_result ril_utf_test_carrier_aggregation_ind_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;
  DBTestnode DB_node;

  t.set_test_description("Carrier aggregation indications");
  t.set_test_attribute("NAS");
  t.set_test_id(__func__);

  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  nas_rf_band_info_type_v01* rf_band_info = QMI_node.update_default_qmi_nas_rf_band_info_ind_msg();
  rf_band_info->radio_if = NAS_RADIO_IF_UMTS_V01;
  rf_band_info->active_band = NAS_ACTIVE_BAND_WCDMA_2100_V01;
  rf_band_info->active_channel = 10657;
  t.inject(QMI_node);

  util_ril_utf_physical_channel_configuration_query_sequence(t, QMI_node);

  QMI_node.update_default_qmi_nas_lte_cphy_ca_ind(nas_lte_cphy_ca_indicator_type_v01{
      292, 39050, NAS_LTE_CPHY_SCELL_STATE_CONFIGURED_ACTIVATED_V01 });
  t.inject(QMI_node);

  QMI_node.update_default_qmi_nas_lte_cphy_ca_ind(nas_lte_cphy_ca_indicator_type_v01{
      292, 39050, NAS_LTE_CPHY_SCELL_STATE_CONFIGURED_DEACTIVATED_V01 });
  t.inject(QMI_node);

  QMI_node.update_default_qmi_nas_lte_cphy_ca_ind(nas_lte_cphy_ca_indicator_type_v01{
      292, 39050, NAS_LTE_CPHY_SCELL_STATE_CONFIGURED_ACTIVATED_V01 });
  t.inject(QMI_node);

  QMI_node.update_default_qmi_nas_lte_cphy_ca_ind(nas_lte_cphy_ca_indicator_type_v01{
      292, 39050, NAS_LTE_CPHY_SCELL_STATE_CONFIGURED_DEACTIVATED_V01 });
  t.inject(QMI_node);

  util_ril_utf_physical_channel_configuration_query_sequence(t, QMI_node);

  util_ril_utf_physical_channel_configuration_query_sequence(t, QMI_node);


  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_BAOC);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg(VOICE_REASON_BARR_ALLOUTGOING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_SS_service_type(
      VOICE_CC_SUPS_RESULT_REASON_BARR_ALLOUTGOING_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status(ims_ServiceClassStatus_DISABLED,
                                                             ims_SuppSvcFacilityType_FACILITY_BAOC);

  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
