/* s5k3m3sm_lib.h
 *
 * Copyright (c) 2016-2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc
 */

#ifndef __S5K3M3SM_LIB_H__
#define __S5K3M3SM_LIB_H__

#include "sensor_lib.h"
#include "eeprom_lib.h"
#include "pdaf_api.h"
#include "pdaf_camif_api.h"
#define SENSOR_MODEL "s5k3m3sm"

/* S5K3M3SM Regs */
#define S5K3M3SM_DIG_GAIN_GR_ADDR       0x020E /* 0x4000020E */
#define S5K3M3SM_DIG_GAIN_R_ADDR        0x0210 /* 0x40000210 */
#define S5K3M3SM_DIG_GAIN_B_ADDR        0x0212 /* 0x40000212 */
#define S5K3M3SM_DIG_GAIN_GB_ADDR       0x0214 /* 0x40000214 */

/* S5K3M3SM CONSTANTS */
#define S5K3M3SM_MAX_INTEGRATION_MARGIN   8

#define S5K3M3SM_DATA_PEDESTAL            0x40 /* 10bit */

#define S5K3M3SM_MIN_AGAIN_REG_VAL        32 /* 1.0x */
#define S5K3M3SM_MAX_AGAIN_REG_VAL        512 /* 16.0x */

#define S5K3M3SM_MIN_DGAIN_REG_VAL        256 /* 1.0x */
#define S5K3M3SM_MAX_DGAIN_REG_VAL        256 /* 1.0x */
/* Based on application note the maximum valid value of digital gain is 0xFFFF */

/* S5K3M3SM FORMULAS */
#define S5K3M3SM_MIN_AGAIN    (1.0)
#define S5K3M3SM_MAX_AGAIN    (S5K3M3SM_MAX_AGAIN_REG_VAL / 32)

#define S5K3M3SM_MIN_DGAIN    (S5K3M3SM_MIN_DGAIN_REG_VAL / 256)
#define S5K3M3SM_MAX_DGAIN    (S5K3M3SM_MAX_DGAIN_REG_VAL / 256)

#define S5K3M3SM_MIN_GAIN     S5K3M3SM_MIN_AGAIN * S5K3M3SM_MIN_DGAIN
#define S5K3M3SM_MAX_GAIN     S5K3M3SM_MAX_AGAIN * S5K3M3SM_MAX_DGAIN

/* uncomment FLIP_MIRROR macro to
   enable flip and mirror in sensor readout
   change bayer pattern
   load pdaf flip and mirror header
*/
//#define FLIP_MIRROR

int32_t s5k3m3sm_calculate_exposure(float real_gain,
  uint32_t line_count, sensor_exposure_info_t *exp_info, float s_real_gain);

int32_t s5k3m3sm_fill_exposure_array(uint32_t gain,
  __attribute__((unused)) uint32_t digital_gain, uint32_t line,
  uint32_t fl_lines,  __attribute__((unused)) int32_t luma_avg,
  __attribute__((unused)) uint32_t hdr_param,
  struct camera_i2c_reg_setting* reg_setting,
  __attribute__((unused)) unsigned int s_gain,
  __attribute__((unused)) int s_linecount,
  __attribute__((unused)) int is_hdr_enabled);

#ifndef FLIP_MIRROR
#define START_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x602A, 0x0100, 0x00}, \
  {0x6F12, 0x0100, 0x00}, \
}
#else
#define START_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x602A, 0x0100, 0x00}, \
  {0x6F12, 0x0103, 0X00}, \
}
#endif

#define STOP_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x602A, 0x0100, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
}

#define GROUPON_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x602A, 0x0104, 0x00}, \
  {0x6F12, 0x0001, 0x00}, \
}

#define GROUPOFF_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x602A, 0x0104, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
}

#define DUAL_CAM_MASTER_SETTINGS \
{ \
  {0x30D4, 0x0300, 0x00}, \
  {0x30D2, 0x0004, 0x00}, \
  {0x30D6, 0x0000, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x2F40, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x602A, 0x2F54, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x602A, 0x2F48, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6028, 0x4000, 0x00}, \
  {0x30DA, 0x0200, 0x00}, \
  {0x30DC, 0x0200, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x2F52, 0x00}, \
  {0x6F12, 0x0200, 0x00}, \
  {0x602A, 0x2F34, 0x00}, \
  {0x6F12, 0x0100, 0x00}, \
  {0x602A, 0x2F60, 0x00}, \
  {0x6F12, 0x0101, 0x00}, \
  {0x6F12, 0x0100, 0x00}, \
  {0x6028, 0x4000, 0x00}, \
  {0x30D8, 0x0100, 0x00}, \
  {0x3EFA, 0x0000, 0x00}, \
  {0x3EF8, 0x0000, 0x00}, \
}

#define DUAL_CAM_SLAVE_SETTINGS \
{ \
  {0x30D4, 0x0000, 0x00}, \
  {0x30D2, 0x0004, 0x00}, \
  {0x30D6, 0x0100, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x2F40, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0044, 0x00}, \
  {0x602A, 0x2F54, 0x00}, \
  {0x6F12, 0x0034, 0x00}, \
  {0x602A, 0x2F48, 0x00}, \
  {0x6F12, 0xFFF8, 0x00}, \
  {0x6028, 0x4000, 0x00}, \
  {0x30DA, 0x0004, 0x00}, \
  {0x30DC, 0x0004, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x2F52, 0x00}, \
  {0x6F12, 0x0200, 0x00}, \
  {0x602A, 0x2F34, 0x00}, \
  {0x6F12, 0x0100, 0x00}, \
  {0x602A, 0x2F60, 0x00}, \
  {0x6F12, 0x0101, 0x00}, \
  {0x6F12, 0x0100, 0x00}, \
  {0x6028, 0x4000, 0x00}, \
  {0x30D8, 0x0100, 0x00}, \
  {0x3EFA, 0x0000, 0x00}, \
  {0x3EF8, 0x0000, 0x00}, \
}

#define INIT0_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x6010, 0x0001, 0x03}, \
  {0x6214, 0x7971, 0x00}, \
  {0x6218, 0x7150, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x30EC, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0449, 0x00}, \
  {0x6F12, 0x0348, 0x00}, \
  {0x6F12, 0x044A, 0x00}, \
  {0x6F12, 0x0860, 0x00}, \
  {0x6F12, 0x101A, 0x00}, \
  {0x6F12, 0x8880, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x4EB8, 0x00}, \
  {0x6F12, 0x2000, 0x00}, \
  {0x6F12, 0x3280, 0x00}, \
  {0x6F12, 0x2000, 0x00}, \
  {0x6F12, 0x1E80, 0x00}, \
  {0x6F12, 0x2000, 0x00}, \
  {0x6F12, 0x4C00, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x2DE9, 0x00}, \
  {0x6F12, 0xF041, 0x00}, \
  {0x6F12, 0x344D, 0x00}, \
  {0x6F12, 0x0646, 0x00}, \
  {0x6F12, 0x0022, 0x00}, \
  {0x6F12, 0x6968, 0x00}, \
  {0x6F12, 0x0C0C, 0x00}, \
  {0x6F12, 0x8FB2, 0x00}, \
  {0x6F12, 0x3946, 0x00}, \
  {0x6F12, 0x2046, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x72F8, 0x00}, \
  {0x6F12, 0x3046, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x74F8, 0x00}, \
  {0x6F12, 0x0122, 0x00}, \
  {0x6F12, 0x3946, 0x00}, \
  {0x6F12, 0x2046, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x6AF8, 0x00}, \
  {0x6F12, 0x2C48, 0x00}, \
  {0x6F12, 0xB0F8, 0x00}, \
  {0x6F12, 0x5800, 0x00}, \
  {0x6F12, 0x2860, 0x00}, \
  {0x6F12, 0xBDE8, 0x00}, \
  {0x6F12, 0xF081, 0x00}, \
  {0x6F12, 0x2DE9, 0x00}, \
  {0x6F12, 0xF041, 0x00}, \
  {0x6F12, 0x274E, 0x00}, \
  {0x6F12, 0x8846, 0x00}, \
  {0x6F12, 0x0446, 0x00}, \
  {0x6F12, 0xB168, 0x00}, \
  {0x6F12, 0x0022, 0x00}, \
  {0x6F12, 0x0D0C, 0x00}, \
  {0x6F12, 0x8FB2, 0x00}, \
  {0x6F12, 0x3946, 0x00}, \
  {0x6F12, 0x2846, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x57F8, 0x00}, \
  {0x6F12, 0x7088, 0x00}, \
  {0x6F12, 0x2080, 0x00}, \
  {0x6F12, 0x4146, 0x00}, \
  {0x6F12, 0x2046, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x5BF8, 0x00}, \
  {0x6F12, 0x3946, 0x00}, \
  {0x6F12, 0x2846, 0x00}, \
  {0x6F12, 0xBDE8, 0x00}, \
  {0x6F12, 0xF041, 0x00}, \
  {0x6F12, 0x0122, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x4AB8, 0x00}, \
  {0x6F12, 0x0179, 0x00}, \
  {0x6F12, 0x8079, 0x00}, \
  {0x6F12, 0x01B9, 0x00}, \
  {0x6F12, 0x48B1, 0x00}, \
  {0x6F12, 0x0121, 0x00}, \
  {0x6F12, 0x401E, 0x00}, \
  {0x6F12, 0x8140, 0x00}, \
  {0x6F12, 0x1F23, 0x00}, \
  {0x6F12, 0x8B43, 0x00}, \
  {0x6F12, 0x0422, 0x00}, \
  {0x6F12, 0x1849, 0x00}, \
  {0x6F12, 0x0220, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x4BB8, 0x00}, \
  {0x6F12, 0x1F21, 0x00}, \
  {0x6F12, 0x0220, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x4CB8, 0x00}, \
  {0x6F12, 0x10B5, 0x00}, \
  {0x6F12, 0x0022, 0x00}, \
  {0x6F12, 0xAFF2, 0x00}, \
  {0x6F12, 0x5F01, 0x00}, \
  {0x6F12, 0x1348, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x4AF8, 0x00}, \
  {0x6F12, 0x0F4C, 0x00}, \
  {0x6F12, 0x0022, 0x00}, \
  {0x6F12, 0xAFF2, 0x00}, \
  {0x6F12, 0x9F01, 0x00}, \
  {0x6F12, 0xA060, 0x00}, \
  {0x6F12, 0x1048, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x42F8, 0x00}, \
  {0x6F12, 0x0022, 0x00}, \
  {0x6F12, 0xAFF2, 0x00}, \
  {0x6F12, 0x4701, 0x00}, \
  {0x6F12, 0x6060, 0x00}, \
  {0x6F12, 0x0E48, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x3BF8, 0x00}, \
  {0x6F12, 0xE060, 0x00}, \
  {0x6F12, 0x0E48, 0x00}, \
  {0x6F12, 0x0E4B, 0x00}, \
  {0x6F12, 0x0C4A, 0x00}, \
  {0x6F12, 0xC18C, 0x00}, \
  {0x6F12, 0x43F8, 0x00}, \
  {0x6F12, 0x2120, 0x00}, \
  {0x6F12, 0x4A1C, 0x00}, \
  {0x6F12, 0xC284, 0x00}, \
  {0x6F12, 0xBDE8, 0x00}, \
  {0x6F12, 0x1040, 0x00}, \
  {0x6F12, 0x45F2, 0x00}, \
  {0x6F12, 0xCC40, 0x00}, \
  {0x6F12, 0x00F0, 0x00}, \
  {0x6F12, 0x31B8, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x2000, 0x00}, \
  {0x6F12, 0x3270, 0x00}, \
  {0x6F12, 0x2000, 0x00}, \
  {0x6F12, 0x1CC0, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x5553, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x75C7, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x71B1, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0635, 0x00}, \
  {0x6F12, 0x3A70, 0x00}, \
  {0x6F12, 0x0120, 0x00}, \
  {0x6F12, 0x2000, 0x00}, \
  {0x6F12, 0x1E80, 0x00}, \
  {0x6F12, 0x2000, 0x00}, \
  {0x6F12, 0x2E10, 0x00}, \
  {0x6F12, 0x40F6, 0x00}, \
  {0x6F12, 0x4F0C, 0x00}, \
  {0x6F12, 0xC0F2, 0x00}, \
  {0x6F12, 0x000C, 0x00}, \
  {0x6F12, 0x6047, 0x00}, \
  {0x6F12, 0x47F2, 0x00}, \
  {0x6F12, 0xB11C, 0x00}, \
  {0x6F12, 0xC0F2, 0x00}, \
  {0x6F12, 0x000C, 0x00}, \
  {0x6F12, 0x6047, 0x00}, \
  {0x6F12, 0x47F2, 0x00}, \
  {0x6F12, 0xC75C, 0x00}, \
  {0x6F12, 0xC0F2, 0x00}, \
  {0x6F12, 0x000C, 0x00}, \
  {0x6F12, 0x6047, 0x00}, \
  {0x6F12, 0x40F2, 0x00}, \
  {0x6F12, 0xCD2C, 0x00}, \
  {0x6F12, 0xC0F2, 0x00}, \
  {0x6F12, 0x000C, 0x00}, \
  {0x6F12, 0x6047, 0x00}, \
  {0x6F12, 0x40F2, 0x00}, \
  {0x6F12, 0x473C, 0x00}, \
  {0x6F12, 0xC0F2, 0x00}, \
  {0x6F12, 0x000C, 0x00}, \
  {0x6F12, 0x6047, 0x00}, \
  {0x6F12, 0x4DF6, 0x00}, \
  {0x6F12, 0x4B2C, 0x00}, \
  {0x6F12, 0xC0F2, 0x00}, \
  {0x6F12, 0x000C, 0x00}, \
  {0x6F12, 0x6047, 0x00}, \
  {0x6F12, 0x4DF6, 0x00}, \
  {0x6F12, 0xEB1C, 0x00}, \
  {0x6F12, 0xC0F2, 0x00}, \
  {0x6F12, 0x000C, 0x00}, \
  {0x6F12, 0x6047, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x30D3, 0x00}, \
  {0x6F12, 0x02AF, 0x00}, \
  {0x6F12, 0x0000, 0x00}, \
  {0x6F12, 0x0001, 0x00}, \
}

#define INIT1_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x0216, 0x0000, 0x00}, \
  {0x3D70, 0x0002, 0x00}, \
  {0x3D6A, 0x0001, 0x00}, \
  {0x3D66, 0x0105, 0x00}, \
  {0x3D64, 0x0105, 0x00}, \
  {0x3D6C, 0x0080, 0x00}, \
  {0xF496, 0x0048, 0x00}, \
  {0xF470, 0x0008, 0x00}, \
  {0xF43A, 0x0015, 0x00}, \
  {0x3676, 0x0008, 0x00}, \
  {0x3678, 0x0008, 0x00}, \
  {0x32A8, 0x000C, 0x00}, \
  {0x3238, 0x000B, 0x00}, \
  {0x3230, 0x000C, 0x00}, \
  {0x3AC8, 0x0A04, 0x00}, \
  {0x322E, 0x000C, 0x00}, \
  {0x3236, 0x000B, 0x00}, \
  {0x32A6, 0x000C, 0x00}, \
  {0x362A, 0x0303, 0x00}, \
  {0xF442, 0x44C6, 0x00}, \
  {0xF408, 0xFFF7, 0x00}, \
  {0x3666, 0x030B, 0x00}, \
  {0x3664, 0x0019, 0x00}, \
  {0x32F8, 0x0003, 0x00}, \
  {0x32F0, 0x0001, 0x00}, \
  {0x3616, 0x0707, 0x00}, \
  {0x3622, 0x0808, 0x00}, \
  {0x3626, 0x0808, 0x00}, \
  {0x32EE, 0x0001, 0x00}, \
  {0x32F6, 0x0003, 0x00}, \
  {0x361E, 0x3030, 0x00}, \
  {0x3670, 0x0001, 0x00}, \
  {0x31B6, 0x0008, 0x00}, \
  {0xF4D0, 0x0034, 0x00}, \
  {0xF4D8, 0x0034, 0x00}, \
  {0xF636, 0x00D6, 0x00}, \
  {0xF638, 0x00DE, 0x00}, \
  {0xF63A, 0x00EE, 0x00}, \
  {0xF63C, 0x00F6, 0x00}, \
  {0xF63E, 0x0106, 0x00}, \
  {0xF640, 0x010E, 0x00}, \
  {0x3D34, 0x0010, 0x00}, \
  {0x0200, 0x0618, 0x00}, \
  {0x021E, 0x0400, 0x00}, \
  {0x021C, 0x0000, 0x00}, \
  {0x30A0, 0x0008, 0x00}, \
  {0x0112, 0x0A0A, 0x00}, \
  {0x3606, 0x0104, 0x00}, \
  {0x0B00, 0x0080, 0x00}, \
  {0x3070, 0x0100, 0x00}, \
  {0x3090, 0x0904, 0x00}, \
  {0x3058, 0x0001, 0x00}, \
  {0x3150, 0x1838, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x157C, 0x00}, \
  {0x6F12, 0x0100, 0x00}, \
  {0x602A, 0x15F0, 0x00}, \
  {0x6F12, 0x0101, 0x00}, \
  {0x602A, 0x1898, 0x00}, \
  {0x6F12, 0x0101, 0x00}, \
}

/* Full size 4:3 30fps */
#define RES0_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x6214, 0x7971, 0x00}, \
  {0x6218, 0x7150, 0x00}, \
  {0x0344, 0x0008, 0x00}, \
  {0x0346, 0x0008, 0x00}, \
  {0x0348, 0x1077, 0x00}, \
  {0x034A, 0x0C37, 0x00}, \
  {0x034C, 0x1070, 0x00}, \
  {0x034E, 0x0C30, 0x00}, \
  {0x0340, 0x0D49, 0x00}, \
  {0x0342, 0x1260, 0x00}, \
  {0x3000, 0x0001, 0x00}, \
  {0x0900, 0x0011, 0x00}, \
  {0x0380, 0x0001, 0x00}, \
  {0x0382, 0x0001, 0x00}, \
  {0x0384, 0x0001, 0x00}, \
  {0x0386, 0x0001, 0x00}, \
  {0x0400, 0x0000, 0x00}, \
  {0x0404, 0x0010, 0x00}, \
  {0x3002, 0x0001, 0x00}, \
  {0x0136, 0x1800, 0x00}, \
  {0x0300, 0x0004, 0x00}, \
  {0x0302, 0x0001, 0x00}, \
  {0x0304, 0x0006, 0x00}, \
  {0x0306, 0x0078, 0x00}, \
  {0x0308, 0x0008, 0x00}, \
  {0x030A, 0x0001, 0x00}, \
  {0x030C, 0x0004, 0x00}, \
  {0x030E, 0x0062, 0x00}, \
  {0x0202, 0x0D1F, 0x00}, \
  {0x0204, 0x0020, 0x00}, \
  {0x0206, 0x0020, 0x00}, \
  {0x0B04, 0x0101, 0x00}, \
  {0x0B08, 0x0000, 0x00}, \
  {0x0B0E, 0x0000, 0x00}, \
  {0x3D06, 0x0010, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x19E0, 0x00}, \
  {0x6F12, 0x0001, 0x00}, \
  {0x6028, 0x4000, 0x00}, \
  {0x30E2, 0x0000, 0x00}, \
  {0x317A, 0x0007, 0x00}, \
  {0x0114, 0x0300, 0x00}, \
  {0x0110, 0x1002, 0x00}, \
  {0xF440, 0x002F, 0x00}, \
  {0xF494, 0x0030, 0x00}, \
  {0xF4CC, 0x0029, 0x00}, \
  {0xF4CE, 0x002C, 0x00}, \
  {0xF4D2, 0x0035, 0x00}, \
  {0xF4D4, 0x0038, 0x00}, \
  {0xF4D6, 0x0039, 0x00}, \
  {0xF4DA, 0x0035, 0x00}, \
  {0xF4DC, 0x0038, 0x00}, \
  {0xF4DE, 0x0039, 0x00}, \
  {0x3604, 0x0000, 0x00}, \
}

/* 4K 16:9 30fps */
#define RES1_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x6214, 0x7971, 0x00}, \
  {0x6218, 0x7150, 0x00}, \
  {0x0344, 0x00C0, 0x00}, \
  {0x0346, 0x01E8, 0x00}, \
  {0x0348, 0x0FBF, 0x00}, \
  {0x034A, 0x0A57, 0x00}, \
  {0x034C, 0x0F00, 0x00}, \
  {0x034E, 0x0870, 0x00}, \
  {0x0340, 0x0D49, 0x00}, \
  {0x0342, 0x1260, 0x00}, \
  {0x3000, 0x0001, 0x00}, \
  {0x0900, 0x0011, 0x00}, \
  {0x0380, 0x0001, 0x00}, \
  {0x0382, 0x0001, 0x00}, \
  {0x0384, 0x0001, 0x00}, \
  {0x0386, 0x0001, 0x00}, \
  {0x0400, 0x0000, 0x00}, \
  {0x0404, 0x0010, 0x00}, \
  {0x3002, 0x0001, 0x00}, \
  {0x0136, 0x1800, 0x00}, \
  {0x0300, 0x0004, 0x00}, \
  {0x0302, 0x0001, 0x00}, \
  {0x0304, 0x0006, 0x00}, \
  {0x0306, 0x0078, 0x00}, \
  {0x0308, 0x0008, 0x00}, \
  {0x030A, 0x0001, 0x00}, \
  {0x030C, 0x0004, 0x00}, \
  {0x030E, 0x0062, 0x00}, \
  {0x0202, 0x0D1F, 0x00}, \
  {0x0204, 0x0020, 0x00}, \
  {0x0206, 0x0020, 0x00}, \
  {0x0B04, 0x0101, 0x00}, \
  {0x0B08, 0x0000, 0x00}, \
  {0x0B0E, 0x0000, 0x00}, \
  {0x3D06, 0x0010, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x19E0, 0x00}, \
  {0x6F12, 0x0001, 0x00}, \
  {0x6028, 0x4000, 0x00}, \
  {0x30E2, 0x0000, 0x00}, \
  {0x317A, 0x0007, 0x00}, \
  {0x0114, 0x0300, 0x00}, \
  {0x0110, 0x1002, 0x00}, \
  {0xF440, 0x002F, 0x00}, \
  {0xF494, 0x0030, 0x00}, \
  {0xF4CC, 0x0029, 0x00}, \
  {0xF4CE, 0x002C, 0x00}, \
  {0xF4D2, 0x0035, 0x00}, \
  {0xF4D4, 0x0038, 0x00}, \
  {0xF4D6, 0x0039, 0x00}, \
  {0xF4DA, 0x0035, 0x00}, \
  {0xF4DC, 0x0038, 0x00}, \
  {0xF4DE, 0x0039, 0x00}, \
  {0x3604, 0x0000, 0x00}, \
}

/* QTR size 4:3 30fps */
#define RES2_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x6214, 0x7971, 0x00}, \
  {0x6218, 0x7150, 0x00}, \
  {0x0344, 0x0008, 0x00}, \
  {0x0346, 0x0008, 0x00}, \
  {0x0348, 0x1077, 0x00}, \
  {0x034A, 0x0C37, 0x00}, \
  {0x034C, 0x0838, 0x00}, \
  {0x034E, 0x0618, 0x00}, \
  {0x0340, 0x0D49, 0x00}, \
  {0x0342, 0x1260, 0x00}, \
  {0x3000, 0x0001, 0x00}, \
  {0x0900, 0x0112, 0x00}, \
  {0x0380, 0x0001, 0x00}, \
  {0x0382, 0x0001, 0x00}, \
  {0x0384, 0x0001, 0x00}, \
  {0x0386, 0x0003, 0x00}, \
  {0x0400, 0x0001, 0x00}, \
  {0x0404, 0x0020, 0x00}, \
  {0x3002, 0x0001, 0x00}, \
  {0x0136, 0x1800, 0x00}, \
  {0x0300, 0x0004, 0x00}, \
  {0x0302, 0x0001, 0x00}, \
  {0x0304, 0x0006, 0x00}, \
  {0x0306, 0x0078, 0x00}, \
  {0x0308, 0x0008, 0x00}, \
  {0x030A, 0x0001, 0x00}, \
  {0x030C, 0x0004, 0x00}, \
  {0x030E, 0x0062, 0x00}, \
  {0x0202, 0x0D1F, 0x00}, \
  {0x0204, 0x0020, 0x00}, \
  {0x0206, 0x0020, 0x00}, \
  {0x0B04, 0x0101, 0x00}, \
  {0x0B08, 0x0000, 0x00}, \
  {0x0B0E, 0x0000, 0x00}, \
  {0x3D06, 0x0010, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x19E0, 0x00}, \
  {0x6F12, 0x0001, 0x00}, \
  {0x6028, 0x4000, 0x00}, \
  {0x30E2, 0x0000, 0x00}, \
  {0x317A, 0x0007, 0x00}, \
  {0x0114, 0x0300, 0x00}, \
  {0x0110, 0x1002, 0x00}, \
  {0xF440, 0x006F, 0x00}, \
  {0xF494, 0x0020, 0x00}, \
  {0xF4CC, 0x0029, 0x00}, \
  {0xF4CE, 0x002C, 0x00}, \
  {0xF4D2, 0x0035, 0x00}, \
  {0xF4D4, 0x0038, 0x00}, \
  {0xF4D6, 0x0039, 0x00}, \
  {0xF4DA, 0x0035, 0x00}, \
  {0xF4DC, 0x0038, 0x00}, \
  {0xF4DE, 0x0039, 0x00}, \
  {0x3604, 0x0000, 0x00}, \
}

/* 1080p 16:9 60fps */
#define RES3_REG_ARRAY \
{ \
  {0x6028, 0x4000, 0x00}, \
  {0x6214, 0x7971, 0x00}, \
  {0x6218, 0x7150, 0x00}, \
  {0x0344, 0x0008, 0x00}, \
  {0x0346, 0x0180, 0x00}, \
  {0x0348, 0x1077, 0x00}, \
  {0x034A, 0x0ABF, 0x00}, \
  {0x034C, 0x0838, 0x00}, \
  {0x034E, 0x04A0, 0x00}, \
  {0x0340, 0x06A4, 0x00}, \
  {0x0342, 0x1260, 0x00}, \
  {0x3000, 0x0001, 0x00}, \
  {0x0900, 0x0112, 0x00}, \
  {0x0380, 0x0001, 0x00}, \
  {0x0382, 0x0001, 0x00}, \
  {0x0384, 0x0001, 0x00}, \
  {0x0386, 0x0003, 0x00}, \
  {0x0400, 0x0001, 0x00}, \
  {0x0404, 0x0020, 0x00}, \
  {0x3002, 0x0001, 0x00}, \
  {0x0136, 0x1800, 0x00}, \
  {0x0300, 0x0004, 0x00}, \
  {0x0302, 0x0001, 0x00}, \
  {0x0304, 0x0006, 0x00}, \
  {0x0306, 0x0078, 0x00}, \
  {0x0308, 0x0008, 0x00}, \
  {0x030A, 0x0001, 0x00}, \
  {0x030C, 0x0004, 0x00}, \
  {0x030E, 0x0062, 0x00}, \
  {0x0202, 0x059D, 0x00}, \
  {0x0204, 0x0020, 0x00}, \
  {0x0206, 0x0020, 0x00}, \
  {0x0B04, 0x0101, 0x00}, \
  {0x0B08, 0x0000, 0x00}, \
  {0x0B0E, 0x0000, 0x00}, \
  {0x3D06, 0x0010, 0x00}, \
  {0x6028, 0x2000, 0x00}, \
  {0x602A, 0x19E0, 0x00}, \
  {0x6F12, 0x0001, 0x00}, \
  {0x6028, 0x4000, 0x00}, \
  {0x30E2, 0x0000, 0x00}, \
  {0x317A, 0x0007, 0x00}, \
  {0x0114, 0x0300, 0x00}, \
  {0x0110, 0x1002, 0x00}, \
  {0xF440, 0x006F, 0x00}, \
  {0xF494, 0x0020, 0x00}, \
  {0xF4CC, 0x0029, 0x00}, \
  {0xF4CE, 0x002C, 0x00}, \
  {0xF4D2, 0x0035, 0x00}, \
  {0xF4D4, 0x0038, 0x00}, \
  {0xF4D6, 0x0039, 0x00}, \
  {0xF4DA, 0x0035, 0x00}, \
  {0xF4DC, 0x0038, 0x00}, \
  {0xF4DE, 0x0039, 0x00}, \
  {0x3604, 0x0000, 0x00}, \
}

/* Sensor Handler */
static sensor_lib_t sensor_lib_ptr =
{
  .sensor_slave_info =
  {
    .sensor_name = SENSOR_MODEL,
    .slave_addr = 0x20,
    .i2c_freq_mode = SENSOR_I2C_MODE_FAST,
    .addr_type = CAMERA_I2C_WORD_ADDR,
    .sensor_id_info =
    {
      .sensor_id_reg_addr = 0x0000,
      .sensor_id = 0x30D3,
    },
    .power_setting_array =
    {
      .power_setting_a =
      {
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_RESET,
          .config_val = GPIO_OUT_LOW,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_STANDBY,
          .config_val = GPIO_OUT_LOW,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_VREG,
          .seq_val = CAMERA_VANA,
          .config_val = 0,
          .delay = 0,
        },
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_VANA,
          .config_val = GPIO_OUT_HIGH,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_VREG,
          .seq_val = CAMERA_VDIG,
          .config_val = 0,
          .delay = 0,
        },
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_VDIG,
          .config_val = GPIO_OUT_HIGH,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_VREG,
          .seq_val = CAMERA_VIO,
          .config_val = 0,
          .delay = 0,
        },
        {
          .seq_type = CAMERA_POW_SEQ_CLK,
          .seq_val = CAMERA_MCLK,
          .config_val = 24000000,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_RESET,
          .config_val = GPIO_OUT_HIGH,
          .delay = 10,
        },
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_STANDBY,
          .config_val = GPIO_OUT_HIGH,
          .delay = 100,
        },
      },
      .size = 10,
      .power_down_setting_a =
      {
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_STANDBY,
          .config_val = GPIO_OUT_LOW,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_RESET,
          .config_val = GPIO_OUT_LOW,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_CLK,
          .seq_val = CAMERA_MCLK,
          .config_val = 0,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_VREG,
          .seq_val = CAMERA_VIO,
          .config_val = 0,
          .delay = 0,
        },
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_VDIG,
          .config_val = GPIO_OUT_LOW,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_VREG,
          .seq_val = CAMERA_VDIG,
          .config_val = 0,
          .delay = 0,
        },
        {
          .seq_type = CAMERA_POW_SEQ_GPIO,
          .seq_val = CAMERA_GPIO_VANA,
          .config_val = GPIO_OUT_LOW,
          .delay = 1,
        },
        {
          .seq_type = CAMERA_POW_SEQ_VREG,
          .seq_val = CAMERA_VANA,
          .config_val = 0,
          .delay = 0,
        },
      },
      .size_down = 8,
    },
  },
  .sensor_output =
  {
    .output_format = SENSOR_BAYER,
    .connection_mode = SENSOR_MIPI_CSI,
    .raw_output = SENSOR_10_BIT_DIRECT,
#ifndef FLIP_MIRROR
    .filter_arrangement = SENSOR_GRBG,
#else
    .filter_arrangement = SENSOR_GBRG,
#endif
  },
  .output_reg_addr =
  {
    .x_output = 0x034C,
    .y_output = 0x034E,
    .line_length_pclk = 0x0342,
    .frame_length_lines = 0x0340,
  },
  .exp_gain_info =
  {
    .coarse_int_time_addr = 0x0202,
    .global_gain_addr = 0x0204,
    .vert_offset = S5K3M3SM_MAX_INTEGRATION_MARGIN,
  },
  .aec_info =
  {
    .min_gain = S5K3M3SM_MIN_GAIN,
    .max_gain = S5K3M3SM_MAX_GAIN,
    .max_analog_gain = S5K3M3SM_MAX_GAIN,
    .max_linecount = 65535 - S5K3M3SM_MAX_INTEGRATION_MARGIN,
  },
  .sensor_num_frame_skip = 2,
  .sensor_num_HDR_frame_skip = 2,
  .sensor_max_pipeline_frame_delay = 2,
  .sensor_property =
  {
    .pix_size = 1.0,
    .sensing_method = SENSOR_SMETHOD_ONE_CHIP_COLOR_AREA_SENSOR,
    .crop_factor = 1.33,
  },
  .pixel_array_size_info =
  {
    .active_array_size =
    {
      .width = 4224,
      .height = 3136,
    },
    .left_dummy = 8,
    .right_dummy = 8,
    .top_dummy = 8,
    .bottom_dummy = 8,
  },
  .color_level_info =
  {
    .white_level = 1023,
    .r_pedestal = S5K3M3SM_DATA_PEDESTAL,
    .gr_pedestal = S5K3M3SM_DATA_PEDESTAL,
    .gb_pedestal = S5K3M3SM_DATA_PEDESTAL,
    .b_pedestal = S5K3M3SM_DATA_PEDESTAL,
  },
  .sensor_stream_info_array =
  {
    .sensor_stream_info =
    {
      {
        .vc_cfg_size = 1,
        .vc_cfg =
        {
          {
            .cid = 0,
            .dt = CSI_RAW10,
            .decode_format = CSI_DECODE_10BIT
          },
        },
        .pix_data_fmt =
        {
          SENSOR_BAYER,
        },
      },
    },
    .size = 1,
  },
  .start_settings =
  {
    .reg_setting_a = START_REG_ARRAY,
    .addr_type = CAMERA_I2C_WORD_ADDR,
    .data_type = CAMERA_I2C_WORD_DATA,
    .delay = 0,
  },
  .stop_settings =
  {
    .reg_setting_a = STOP_REG_ARRAY,
    .addr_type = CAMERA_I2C_WORD_ADDR,
    .data_type = CAMERA_I2C_WORD_DATA,
    .delay = 0,
  },
  .groupon_settings =
  {
    .reg_setting_a = GROUPON_REG_ARRAY,
    .addr_type = CAMERA_I2C_WORD_ADDR,
    .data_type = CAMERA_I2C_WORD_DATA,
    .delay = 0,
  },
  .groupoff_settings =
  {
    .reg_setting_a = GROUPOFF_REG_ARRAY,
    .addr_type = CAMERA_I2C_WORD_ADDR,
    .data_type = CAMERA_I2C_WORD_DATA,
    .delay = 0,
  },
  .dualcam_slave_settings =
  {
    .reg_setting_a = DUAL_CAM_SLAVE_SETTINGS,
    .addr_type = CAMERA_I2C_WORD_ADDR,
    .data_type = CAMERA_I2C_WORD_DATA,
    .delay = 0,
    .size = 26,
  },
  .dualcam_master_settings =
  {
    .reg_setting_a = DUAL_CAM_MASTER_SETTINGS,
    .addr_type = CAMERA_I2C_WORD_ADDR,
    .data_type = CAMERA_I2C_WORD_DATA,
    .delay = 0,
    .size = 25,
  },
  .test_pattern_info =
  {
    .test_pattern_settings =
    {
      {
        .mode = SENSOR_TEST_PATTERN_OFF,
        .settings =
        {
          .reg_setting_a =
          {
            {0x6028, 0x4000, 0x00},
            {0x602A, 0x0600, 0x00},
            {0x6F12, 0x0000, 0x00},
          },
          .addr_type = CAMERA_I2C_WORD_ADDR,
          .data_type = CAMERA_I2C_WORD_DATA,
          .delay = 0,
        }
      },
      {
        .mode = SENSOR_TEST_PATTERN_SOLID_COLOR,
        .settings =
        {
          .reg_setting_a =
          {
            {0x6028, 0x4000, 0x0000},
            {0x602A, 0x0600, 0x0000},
            {0x6F12, 0x0001, 0x0000},
          },
          .addr_type = CAMERA_I2C_WORD_ADDR,
          .data_type = CAMERA_I2C_WORD_DATA,
          .delay = 0,
        },
      },
      {
        .mode = SENSOR_TEST_PATTERN_COLOR_BARS,
        .settings =
        {
          .reg_setting_a =
          {
            {0x6028, 0x4000, 0x0000},
            {0x602A, 0x0600, 0x0000},
            {0x6F12, 0x0002, 0x0000},
          },
          .addr_type = CAMERA_I2C_WORD_ADDR,
          .data_type = CAMERA_I2C_WORD_DATA,
          .delay = 0,
        },
      },
      {
        .mode = SENSOR_TEST_PATTERN_COLOR_BARS_FADE_TO_GRAY,
        .settings =
        {
          .reg_setting_a =
          {
            {0x6028, 0x4000, 0x0000},
            {0x602A, 0x0600, 0x0000},
            {0x6F12, 0x0003, 0x0000},
          },
          .addr_type = CAMERA_I2C_WORD_ADDR,
          .data_type = CAMERA_I2C_WORD_DATA,
          .delay = 0,
        },
      },
      {
        .mode = SENSOR_TEST_PATTERN_PN9,
        .settings =
        {
          .reg_setting_a =
          {
            {0x6028, 0x4000, 0x0000},
            {0x602A, 0x0600, 0x0000},
            {0x6F12, 0x0004, 0x0000},
          },
          .addr_type = CAMERA_I2C_WORD_ADDR,
          .data_type = CAMERA_I2C_WORD_DATA,
          .delay = 0,
        },
      },
      {
        .mode = SENSOR_TEST_PATTERN_CUSTOM1, /* Macbeth */
        .settings =
        {
          .reg_setting_a =
          {
            {0x6028, 0x4000, 0x0000},
            {0x602A, 0x0600, 0x0000},
            {0x6F12, 0x0100, 0x0000},
          },
          .addr_type = CAMERA_I2C_WORD_ADDR,
          .data_type = CAMERA_I2C_WORD_DATA,
          .delay = 0,
        },
      },
    },
    .size = 6,
    .solid_mode_addr =
    {
      .r_addr = 0x0602,
      .gr_addr = 0x0604,
      .gb_addr = 0x0606,
      .b_addr = 0x0608,
    },
  },
  .init_settings_array =
  {
    .reg_settings =
    {
      {
        .reg_setting_a = INIT0_REG_ARRAY,
        .addr_type = CAMERA_I2C_WORD_ADDR,
        .data_type = CAMERA_I2C_WORD_DATA,
        .delay = 0,
      },
      {
        .reg_setting_a = INIT1_REG_ARRAY,
        .addr_type = CAMERA_I2C_WORD_ADDR,
        .data_type = CAMERA_I2C_WORD_DATA,
        .delay = 0,
      },
    },
    .size = 2,
  },
  .res_settings_array =
  {
    .reg_settings =
    {
      /* Res 0 */
      {
        .reg_setting_a = RES0_REG_ARRAY,
        .addr_type = CAMERA_I2C_WORD_ADDR,
        .data_type = CAMERA_I2C_WORD_DATA,
        .delay = 0,
      },
      /* Res 1 */
      {
        .reg_setting_a = RES1_REG_ARRAY,
        .addr_type = CAMERA_I2C_WORD_ADDR,
        .data_type = CAMERA_I2C_WORD_DATA,
        .delay = 0,
      },
      /* Res 2 */
      {
        .reg_setting_a = RES2_REG_ARRAY,
        .addr_type = CAMERA_I2C_WORD_ADDR,
        .data_type = CAMERA_I2C_WORD_DATA,
        .delay = 0,
      },
      /* Res 3 */
      {
        .reg_setting_a = RES3_REG_ARRAY,
        .addr_type = CAMERA_I2C_WORD_ADDR,
        .data_type = CAMERA_I2C_WORD_DATA,
        .delay = 0,
      },
    },
    .size = 4,
  },
  .out_info_array =
  {
    .out_info =
    {
      /* Res 0 */
      {
        .x_output = 4208,
        .y_output = 3120,
        .line_length_pclk = 4704,
        .frame_length_lines = 3401,
        .op_pixel_clk = 480000000,
        .binning_factor = 1,
        .min_fps = 7.500,
        .max_fps = 30.0,
        .mode = SENSOR_DEFAULT_MODE,
        .offset_x = 0,
        .offset_y = 0,
        .scale_factor = 1.000,
        .is_pdaf_supported = 0,  /* marking zero during initial sensor bring up */
        .min_hbi = 271,
      },
      /* Res 1 */
      {
        .x_output = 3840,
        .y_output = 2160,
        .line_length_pclk = 4704,
        .frame_length_lines = 3401,
        .op_pixel_clk = 480000000,
        .binning_factor = 1,
        .min_fps = 7.500,
        .max_fps = 30.0,
        .mode = SENSOR_DEFAULT_MODE,
        .offset_x = 0,
        .offset_y = 0,
        .scale_factor = 1.000,
        .is_pdaf_supported = 0,  /* marking zero during initial sensor bring up */
        .min_hbi = 647,
      },
      /* Res 2 */
      {
        .x_output = 2104,
        .y_output = 1560,
        .line_length_pclk = 4704,
        .frame_length_lines = 3401,
        .op_pixel_clk = 480000000,
        .binning_factor = 2,
        .min_fps = 7.500,
        .max_fps = 30.0,
        .mode = SENSOR_DEFAULT_MODE,
        .offset_x = 0,
        .offset_y = 0,
        .scale_factor = 1.000,
        .is_pdaf_supported = 0,  /* marking zero during initial sensor bring up */
        .min_hbi = 2542,
      },
      /* Res 3 */
      {
        .x_output = 2104,
        .y_output = 1184,
        .line_length_pclk = 4704,
        .frame_length_lines = 1694,
        .op_pixel_clk = 480000000,
        .binning_factor = 2,
        .min_fps = 7.500,
        .max_fps = 60.0,
        .mode = SENSOR_HFR_MODE,
        .offset_x = 0,
        .offset_y = 0,
        .scale_factor = 1.000,
        .is_pdaf_supported = 0,  /* marking zero during initial sensor bring up */
        .min_hbi = 2542,
      },
    },
    .size = 4,
  },
  .csi_params =
  {
    .lane_cnt = 4,
    .settle_cnt = 0x1B,
    .is_csi_3phase = 0,
  },
  .csid_lut_params_array =
  {
    .lut_params =
    {
      /* Res 0 */
      {
        .num_cid = 1,
        .vc_cfg_a =
        {
          {
            .cid = 0,
            .dt = CSI_RAW10,
            .decode_format = CSI_DECODE_10BIT
          },
        },
      },
      /* Res 1 */
      {
        .num_cid = 1,
        .vc_cfg_a =
        {
          {
            .cid = 0,
            .dt = CSI_RAW10,
            .decode_format = CSI_DECODE_10BIT
          },
        },
      },
      /* Res 2 */
      {
        .num_cid = 1,
        .vc_cfg_a =
        {
          {
            .cid = 0,
            .dt = CSI_RAW10,
            .decode_format = CSI_DECODE_10BIT
          },
        },
      },
      /* Res 3 */
      {
        .num_cid = 1,
        .vc_cfg_a =
        {
          {
            .cid = 0,
            .dt = CSI_RAW10,
            .decode_format = CSI_DECODE_10BIT
          },
        },
      },
    },
    .size = 4,
  },
  .crop_params_array =
  {
    .crop_params =
    {
      /* Res 0 */
      {
        .top_crop = 0,
        .bottom_crop = 0,
        .left_crop = 0,
        .right_crop = 0,
      },
      /* Res 1 */
      {
        .top_crop = 0,
        .bottom_crop = 0,
        .left_crop = 0,
        .right_crop = 0,
      },
      /* Res 2 */
      {
        .top_crop = 0,
        .bottom_crop = 0,
        .left_crop = 0,
        .right_crop = 0,
      },
      /* Res 3 */
      {
        .top_crop = 0,
        .bottom_crop = 0,
        .left_crop = 0,
        .right_crop = 0,
      },
    },
    .size = 4,
  },
  .exposure_func_table =
  {
    .sensor_calculate_exposure = s5k3m3sm_calculate_exposure,
    .sensor_fill_exposure_array = s5k3m3sm_fill_exposure_array,
  },
  .meta_data_out_info_array =
  {
    .meta_data_out_info =
    {
      {
        .width = 0,
        .height = 0,
        .stats_type = 0,
      },
    },
    .size = 0,
  },
  .sensor_capability = 0,
  .awb_func_table =
  {
    .sensor_fill_awb_array = 0,
    .awb_table_size = 0,
  },
  .rolloff_config =
  {
    .enable = FALSE,
    .full_size_info =
    {
      .full_size_width = 0,
      .full_size_height = 0,
      .full_size_left_crop = 0,
      .full_size_top_crop = 0,
    },
  },
  .adc_readout_time = 0,
  .sensor_num_fast_aec_frame_skip = 0,
  .noise_coeff = {
    .gradient_S = 3.738032e-06,
    .offset_S = 3.651935e-04,
    .gradient_O = 4.499952e-07,
    .offset_O = -2.968624e-04,
  },
  .sensor_orientation = SENSOR_ORIENTATION_NORMAL,
};

#endif /* __S5K3M3SM_LIB_H__ */
