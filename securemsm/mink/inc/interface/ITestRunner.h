// ============================================================================
// Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// ============================================================================
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

/*===================================================================================
  FILE:  ITestRunner.idl

  DESCRIPTION:  This file contains interface for running the PFM test cases

  EDIT HISTORY FOR FILE:

  This section contains comments describing changes made to the module.
  Notice that changes are listed in reverse chronological order.

  when               who               what, where, why
  --------           ----              ---------------------------------------------------
 05/16/2018        Pavithra Balaji      Initial Version


 =====================================================================================*/

#define ITestRunner_FAIL INT32_C(10)
#define ITestRunner_NO_MORE_TESTS INT32_C(11)
#define ITestRunner_NOT_FOUND INT32_C(12)

#define ITestRunner_OP_runFirstTest 0
#define ITestRunner_OP_runNextTest 1
#define ITestRunner_OP_runTestByName 2

static inline int32_t
ITestRunner_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ITestRunner_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ITestRunner_runFirstTest(Object self, Object appObject_val, uint8_t *testName_ptr, size_t testName_len, size_t *testName_lenout, int32_t *testStatus_ptr)
{
  ObjectArg a[3];
  a[2].o = appObject_val;
  a[0].b = (ObjectBuf) { testName_ptr, testName_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { testStatus_ptr, sizeof(int32_t) };

  int32_t result = Object_invoke(self, ITestRunner_OP_runFirstTest, a, ObjectCounts_pack(0, 2, 1, 0));

  *testName_lenout = a[0].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
ITestRunner_runNextTest(Object self, Object appObject_val, uint8_t *testName_ptr, size_t testName_len, size_t *testName_lenout, int32_t *testStatus_ptr)
{
  ObjectArg a[3];
  a[2].o = appObject_val;
  a[0].b = (ObjectBuf) { testName_ptr, testName_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { testStatus_ptr, sizeof(int32_t) };

  int32_t result = Object_invoke(self, ITestRunner_OP_runNextTest, a, ObjectCounts_pack(0, 2, 1, 0));

  *testName_lenout = a[0].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
ITestRunner_runTestByName(Object self, Object appObject_val, const uint8_t *testName_ptr, size_t testName_len, int32_t *testStatus_ptr)
{
  ObjectArg a[3];
  a[2].o = appObject_val;
  a[0].bi = (ObjectBufIn) { testName_ptr, testName_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { testStatus_ptr, sizeof(int32_t) };

  return Object_invoke(self, ITestRunner_OP_runTestByName, a, ObjectCounts_pack(1, 1, 1, 0));
}



