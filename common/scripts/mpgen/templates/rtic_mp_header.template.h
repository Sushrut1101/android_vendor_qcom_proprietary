{# Copyright (c) 2017 Qualcomm Technologies, Inc.
	All Rights Reserved.
	Confidential and Proprietary - Qualcomm Technologies, Inc. #}
	
#ifndef _RTIC_MP__H_
#define _RTIC_MP__H_

/*
 * alex_dummy_rtic_mp.c
 *
 *  Created on: Mar 22, 2017
 *      Author: amavrin
 *
 *   Note: this file has to contain only explicit basic types, that can not be misinterpreted on other platform
 *   I.g. uintptr_t should not be used - use unsigned long long int - this will cover both 32 and 64 bit targets
 *
 */
// we can't use <stdint.h> as this is not available in the kernel build

// =========================================================
// =========================================================
// Basic static data structures (not changed dynamically)
// Generated by mpgen on {{datetime.datetime.now()}}
// =========================================================
// =========================================================

#define RTIC_MPGEN_INTERFACE_VERSION		(/*!!!*/ 27 /*!!!*/) /* Should be incremented every time the interface has changed */
#define RTIC_MPGEN_INTERFACE_VERSION_MINOR	(/*!!!*/ 0 /*!!!*/) /* Should be incremented every time this file has changed in a minor way */

#define RTIC_MPGEN_VERSION /*!!!*/"{{VERSION}}"/*!!!*/ /* MPGEN version string - 8 bytes */
#define RTIC_MP_MARKER_STRING "--==!!!RTIC MP!!!==--"
#define RTIC_MP_MAX_SIZE (4096) // maximum possible RTIC size
#define RTIC_MP_MAX_WRITERS (2) // maximum size of the writers list for the Black Listed memory feature
#define RTIC_MP_ALIGNMENT (0x100000 /* 1Mb */ ) // should be multiple to KASLR

/**
 * Version macros - assume 32bit unit
 */
#define RTIC_MPGEN_INTERFACE_VERSION_GEN(MAJ, MIN) (MAJ | (MIN << 16))
#define RTIC_MPGEN_INTERFACE_VERSION_GET_MINOR(X) (X >> 16)
#define RTIC_MPGEN_INTERFACE_VERSION_GET_MAJOR(X) ((0xffffffffu >> 16) & X)

/**
 * Enum automation macros
 * Allow preprocessor to help us with feature names
 */
#ifndef ENUM_ITEM
#define ENUM_ITEM(X) X,
#endif /* ENUM_ITEM */
#ifndef ENUM_STRING_ITEM
#define ENUM_STRING_ITEM(X) #X,
#endif /* ENUM_STRING_ITEM */

/**
 * Enum, id of all existing attestation features
 * DELCARE NEW ATTESTATION FEATURES IN MACRO BELOW
 */
#define MP_ATTESTATION_FEATURES(X) \
	X(MP_ATTESTATION_OU) /* oem unlock */ \
	X(MP_ATTESTATION_QR) /* QHEE Report */ \
	X(MP_ATTESTATION_KV) /* read only sections; have item in feature locator, that is not used though */ \
	X(MP_ATTESTATION_RO) /* read only sections */ \
	X(MP_ATTESTATION_WK) /* write once known */ \
	X(MP_ATTESTATION_WU) /* write once unknown  */ \
	X(MP_ATTESTATION_AW) /* regions with authorized callers - authorized writer */ \
	
// Declare the enum
typedef enum {
	MP_ATTESTATION_FEATURES(ENUM_ITEM)
	MP_NUM_ATTESTATION_FEATURES
} mp_attestation_feature_t;

/**
 * Generic structure for pointing to particular feature array
 */
typedef struct {
	unsigned int const offset; // offset from MP base
	unsigned int const size; // whole size of given structure block
}__attribute__((__packed__)) mp_feature_locator_t;

/**
 * Section attribute flags
 */
#define MP_SECTION_ATTRIBUTE_CODE              (1 << 4) /* used by QHEE*/
#define MP_SECTION_ATTRIBUTE_ENFORCE           (1 << 5) /* used by QHEE*/
#define MP_SECTION_ATTRIBUTE_NQHEE             (1 << 6) /* section is ignored by QHEE */
#define MP_SECTION_ATTRIBUTE_NRTIC             (1 << 7) /* section is ignored by RTIC TA */
#define MP_SECTION_ATTRIBUTE_NONSTRICT         (1 << 10) /* non strict section attestation used by RTIC TA */

/**
 * Generic structure describing single memory region/ section
 * This includes memory type attributes
 */
typedef struct {
	unsigned char const name[24]; // symbolic identifier/ comment
	unsigned long long int const start_addr;
	unsigned int const length;
	unsigned int const attributes; // memory types, etc, used by QHEE and RTIC TA
}__attribute__ ((packed)) mp_section_t;

/**
 * Generic structure describing authorized writers.
 * Used by QHEE. RTIC 3.0 supports single writer region.
 */
typedef struct {
	unsigned long long int const start_addr;
	unsigned long long int const length;
}__attribute__ ((packed)) mp_authorized_writers_t;

// ============== Feature types ==============================

/**
 * Single item of Read-only memory (execute only or read-only data)
 * MP_ATTESTATION_RO single item
 */
typedef struct {
	mp_section_t const section;
	unsigned char const sha256[32];
}__attribute__ ((packed)) mp_attestation_ro_section_t;

/**
 * Single item of Write Once memory
 * MP_ATTESTATION_WK and MP_ATTESTATION_WU single item
 */
typedef struct {
	mp_section_t const section;
	unsigned char sha256[32]; // for MP_FEATURE_WO_UNKNOWN this field may be modified by the clients - TA/ Tools.
	mp_authorized_writers_t const writers[RTIC_MP_MAX_WRITERS];
}__attribute__ ((packed)) mp_attestation_write_once_t;

/**
 * Single item of Black Listed feature
 * MP_ATTESTATION_AW single item
 */
typedef struct {
	mp_section_t const section;
	mp_authorized_writers_t const writers[RTIC_MP_MAX_WRITERS];
}__attribute__ ((packed)) mp_attestation_black_listed_t;

/**
 * Generic policy structure
 * MP_ATTESTATION_OU feature (this is not an array feature)
 * MP_ATTESTATION_QR feature (this is not an array feature)
 */
typedef struct {
	unsigned long long int const attributes; // control attributes e.g. MP_SECTION_ATTRIBUTE_NRTIC
}__attribute__ ((packed)) mp_attestation_feature_policy_t;

// ============== MP Header types ============================

/**
 * Kernel info
 * Note: the structures are reused in RTIC TA, therefore using packed attribute to avoid differences due to optimizations
 */
typedef struct {
	char const linux_banner_content[256]; // content of the kernel version string
	unsigned long long int const linux_banner_el1_va; // el1 VA address of the kernel banner
	unsigned long long int const linux_banner_size;
	unsigned long long int const linux_kernel_module_base_va; // base virtual address of the kernel's modules section
	unsigned long long int const linux_kernel_module_size; // size of the kernel's module section
	unsigned long long int const vectors_el1_va; // el1 VA address of HLOS exception table
	unsigned long long int const kernel_offset_le;
	unsigned long long int const kernel_size_le;
	unsigned char const is_checkable_kernel; // false if mpgen detects error/ unsupported kernel features
	unsigned char const mpgen_message[239];    // readable mpgen error/warning
	unsigned long long int const linux_entry_task_va; // __entry_task
	unsigned long long int const linux_per_cpu_offset_va; // __per_cpu_offset
}__attribute__((__packed__)) mp_hlos_kernel_specs_t;

/**
 *  RTIC MP container header/ the top level RTIC MP structure
 */
typedef struct {
	unsigned char const marker_str[24]; // Magic RTIC header string
	unsigned int const mpgen_interface_ver; // MPGen interface version. !!! Can't be 0 as can be used as flag that MP is not initialized on TA/HP side
	unsigned char const mpgen_ver[8]; // MPGen tool version.
	unsigned int const whole_rtic_size; // The size of the whole dynamic MP structure
	unsigned long long int const created_tmstmp; // 64bit time stamp from the beginning of epoch
	mp_hlos_kernel_specs_t const hks; // kernel specifications

	// Offset table
	mp_feature_locator_t features[MP_NUM_ATTESTATION_FEATURES]; // locations of all the features

}__attribute__((__packed__)) mp_rtic_header_t;

#endif /* _RTIC_MP__H_ */ //
// ============== End of header portion =======================
