/* Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.hardware.fingerprint@1.0;

import IQfpAndroidServices;
import IQtiExtendedFingerprintCallback;

interface IQtiExtendedFingerprint {
    /**
     * Initialize calib and test framework.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    testInit() generates (Status status);

    /**
     * Deinitialize calib and test framework.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    testDeinit() generates (Status status);

    /**
     * Get calib and test parameter.
     *
     * @param  name  name of parameter.
     * @return value string value of parameter.
     */
    testParamGet(int32_t name) generates (string value);

    /**
     * Set calib and test parameter.
     *
     * @param  name  name of parameter.
     * @param  value value of parameter.
     */
    testParamSet(int32_t name, string value);

    /**
     * Run image quality test.
     *
     * @return result test result structure.
     */
    testImageQuality() generates (ImageQualityTestResult result);

    /**
     * Run PSF Calibration.
     *
     * @return result calibration result.
     */
    psfCalibraton() generates (PsfCalibrationResult result);

    /**
     * Run PSF setting test.
     *
     * @return result psf setting test result structure.
     */
    calibratePsfSettings() generates (PsfSettingFormat result);

    /**
     * Run PSF verification.
     *
     * @return result test result structure.
     */
    runPsfVerification() generates (PsfVerificationResult result);

    /**
     * Run digital test.
     *
     * @return result test result structure.
     */
    testDigital() generates (DigitalTestResult result);

    /**
     * Run BGE calibration.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    bgeCalibration() generates (Status status);

    /**
     * Run temperature test.
     *
     * @return result test result structure.
     */
    testTemperature() generates (TemperatureTestResult result);

    /**
     * Run contact resistance test.
     *
     * @return result test result structure.
     */
    testContactResistance() generates (ContactResistanceTestResult result);

    /**
     * Run captouch calibration.
     *
     * @return result calibration result.
     */
    captouchCalibration() generates (CaptouchCalibrationResult result);

    /**
     * Run boost regulation test.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    runBoostRegulation() generates (Status status);

    /**
     * Run TFT test.
     *
     * @return result test result structure.
     */
    testTft() generates (BiasTestResult result);

    /**
     * Run Receiver test.
     *
     * @return result test result structure.
     */
    testRx() generates (BiasTestResult result);

    /**
     * Run Transmitter test.
     *
     * @return result test result structure.
     */
    testTx() generates (TxTestResult result);

    /**
     * Expire BGE bins.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    bgeBinsExpiration(int32_t bgeNumRangesToExpire) generates (Status status);

    /**
     * Run Dbias Calibration.
     *
     * @return result calibration result.
     */
    dbiasCalibration() generates (DbiasCalibrationResult result);

    /**
     * Run Noise test.
     *
     * @return result test result structure.
     */
    testNoise() generates (NoiseTestResult result);

    /**
     * Run ASIC info.
     *
     * @return result asic information.
     */
    readInfo() generates (ReadInfoResult result);

    /**
     * Check if IPC interrupt received from Erie M0.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    getPingResult() generates (Status status);

    /**
     * Send IPC ping to Erie M0.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    sendPingCmd() generates (Status status);

    /**
     * Write calibration data.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    writeCalibration() generates (Status status);

    /**
     * Get calibrated value of parameter.
     *
     * @param  name parameter name.
     * @return value value of parameter.
     */
    calibrationGet(string name) generates (string value);

    /**
     * Set value of calibration parameter.
     *
     * @param  name parameter name.
     * @param value value of parameter.
     */
    calibrationSet(string name, string value);

    /**
     * Enable or disable data dump feature.
     *
     * @param  onOrOff set to 1 to enable and 0 to disable.
     * @return status  SUCCESS on success or FAILURE on failure.
     */
    toggleDumpStream(int32_t onOrOff) generates (Status status);

    /**
     * Set fingerprint ASIC in different power modes.
     *
     * @param  mode   power mode to set.
     * @return status SUCCESS on success or FAILURE on failure.
     */
    powerTest() generates (Status status);

    /**
     * Get parameter value from OTP memory.
     *
     * @return result OTP values.
     */
    getOtpValue() generates (OtpTestResult result);

    /**
     * Check if fingerprint is enabled.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    isFingerprintEnabled() generates (Status status);

    /**
     * Notify underlying daemon about device power state.
     *
     * @param  powerState 0 for shutdown, 1 for sleep and 2 for awake.
     * @return status     SUCCESS on success or FAILURE on failure.
     */
    notifyPowerState(int32_t powerState) generates (Status status);

    /**
     * Post fingerprint event.
     *
     * @param  payload payload data associated with the event.
     * @return status  SUCCESS on success or FAILURE on failure.
     */
    postEvent(vec<uint8_t> payload) generates (Status status);

    /**
     * Notify underlying daemon about alarm broadcast.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    notifyAlarm() generates (Status status);

    /**
     * Register android services with underlying daemon.
     *
     * @param  androidServices handle to android services.
     * @return status          SUCCESS on success or FAILURE on failure.
     */
    registerAndroidServices(IQfpAndroidServices androidServices) generates (Status status);

    /**
     * Initiate fingerprint authentication.
     *
     * @param  cb         asynchronous callback to fire.
     * @param  timeoutMs  abort timeout in milliseconds.
     * @param  user       name of authenticating user.
     * @param  nonce      parameter used by FIDO apps.
     * @param  secAppName name of secondary app.
     * @param  option     additional options for matching.
     * @return status     SUCCESS on success or FAILURE on failure.
     */
    match(IQtiExtendedFingerprintCallback cb, int32_t timeoutMs, string user, vec<uint8_t> nonce,
            string secAppName, int32_t option) generates (Status status);

    /**
     * Cancel ongoing operation.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    cancel() generates (Status status);

    /**
     * Retrieve enrollee id from user id.
     *
     * @param  userId     user id.
     * @return enrolleeId enrollee id.
     */
    retrieveUser(uint64_t userId) generates (string enrolleeId);

    /**
     * Enable various key events relevant to fingerprint.
     *
     * @param  eventKeyCode key code.
     * @return status       SUCCESS on success or FAILURE on failure.
     */
    enableFingerEvent(int32_t eventKeyCode) generates (Status status);

    /**
     * Disable all key events.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    disableFingerEvent() generates (Status status);

    /**
     * Enable or disable liveness feature.
     *
     * @param  hat     authentication token.
     * @param  enabled 1 to enable or 0 to disable.
     * @return status  SUCCESS on success or FAILURE on failure.
     */
    setLivenessEnabled(vec<uint8_t> hat, uint8_t enabled) generates (Status status);

    /**
     * Check if liveness feature is enabled.
     *
     * @param   hat       authentication token.
     * @return  isEnabled 1 for enabled or 0 for disabled.
     */
    getLivenessEnabled(vec<uint8_t> hat) generates (uint8_t isEnabled);

    /**
     * Start capture of fingerprint images for streaming.
     *
     * @param  cb     asynchronous callback to fire.
     * @param  mode   capture mode.
     * @return status SUCCESS on success or FAILURE on failure.
     */
    startCapture(IQtiExtendedFingerprintCallback cb, int32_t mode) generates (Status status);

    /**
     * Get information about fingerprint framework.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    getFrameworkInfo() generates (FrameworkInfo info);

    /**
     * Get information about fingerprint framework.
     *
     * @return enrollees list of enrollee id for each enrollee.
     */
    enumEnrollments() generates (vec<string> enrollees);

    /**
     * Get complete enrollment record from enrollee id.
     *
     * Each client is expected to call init interface and acquire a context
     * handle before exercising any other interface.
     *
     * @param  enrolleeId enrollee id.
     * @return record     enrollment record.
     */
    getEnrollRecord(string enrolleeId) generates (EnrollRecord record);

    /**
     * Get debug data from property string.
     *
     * @param  property debug property.
     * @return data     debug data.
     */
    getDebugData(string property) generates (vec<uint8_t> data);

    /**
     * Check if IVV feature is enabled.
     *
     * @return enabled 1 for enabled or 0 for disabled.
     */
    isIvvEnabled() generates (int8_t enabled);

    /**
     * Enable IVV feature.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    enableIvv() generates (Status status);

    /**
     * Disable IVV feature.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    disableIvv() generates (Status status);

    /**
     * Generic interface to process request.
     *
     * @param  request  request as byte array.
     * @return response response as byte array.
     */
    processRequest(vec<uint8_t> request) generates (vec<uint8_t> response);

    /**
     * Get mfg value.
     *
     * @param  id  id of mfg field.
     * @return result result contains status and value of mfg id.
     */
    getMfgValue(uint16_t id) generates (FieldMfgFormat result);

    /**
     * Get the Debug Data for captured image.
     *
     * @param  cb     asynchronous callback to fire.
     * @return status SUCCESS on success or FAILURE on failure.
     */
    retrieveDebugData(IQtiExtendedFingerprintCallback cb) generates (Status status);

    /**
     * Pause ongoing enrollment
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    pauseEnrollment() generates (Status status);

    /**
     * Resume paused enrollment
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    resumeEnrollment() generates (Status status);

    /**
     * Set configuration parameters - wake up display behavior and
     * duplicate enrollment template accept/reject
     *
     * @param  name   name of configuration parameter to set.
     * @param  value value of configuration parameter to set.
     */
    setConfigValue(string name, string value);

    /**
     * Get configuration parameters - wake up display behavior and
     * duplicate enrollment template accept/reject
     *
     * @param  name   name of configuration parameter to set.
     * @return value value of configuration parameter to set.
     */
    getConfigValue(string name) generates (string value);

    /**
     * Enable finger detect dynamically.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    enableFingerDetect() generates (Status status);

    /**
     * Disable finger detect dynamically.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    disableFingerDetect() generates (Status status);

    /**
     * Skip finger detect before match dynamically.
     *
     * @return status SUCCESS on success or FAILURE on failure.
     */
    skipFingerDetect() generates (Status status);
};
