/*
 * Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.gnss@1.0;

@export(name="", value_prefix="LOC_HIDL_SUBSCRIPTION_")
enum LocHidlSubscriptionDataItemId : int32_t {

    INVALID_DATA_ITEM_ID                    = -1,
    // 0 - 4
    AIRPLANEMODE_DATA_ITEM_ID               = 0,
    ENH_DATA_ITEM_ID                        = 1,
    GPSSTATE_DATA_ITEM_ID                   = 2,
    NLPSTATUS_DATA_ITEM_ID                  = 3,
    WIFIHARDWARESTATE_DATA_ITEM_ID          = 4,
    // 5 - 9
    NETWORKINFO_DATA_ITEM_ID                = 5,
    RILVERSION_DATA_ITEM_ID                 = 6,
    RILSERVICEINFO_DATA_ITEM_ID             = 7,
    RILCELLINFO_DATA_ITEM_ID                = 8,
    SERVICESTATUS_DATA_ITEM_ID              = 9,
    // 10 - 14
    MODEL_DATA_ITEM_ID                      = 10,
    MANUFACTURER_DATA_ITEM_ID               = 11,
    VOICECALL_DATA_ITEM                     = 12,
    ASSISTED_GPS_DATA_ITEM_ID               = 13,
    SCREEN_STATE_DATA_ITEM_ID               = 14,
    // 15 - 19
    POWER_CONNECTED_STATE_DATA_ITEM_ID      = 15,
    TIMEZONE_CHANGE_DATA_ITEM_ID            = 16,
    TIME_CHANGE_DATA_ITEM_ID                = 17,
    WIFI_SUPPLICANT_STATUS_DATA_ITEM_ID     = 18,
    SHUTDOWN_STATE_DATA_ITEM_ID             = 19,
    // 20 -
    TAC_DATA_ITEM_ID                        = 20,
    MCCMNC_DATA_ITEM_ID                     = 21,
    BTLE_SCAN_DATA_ITEM_ID                  = 22,
    BT_SCAN_DATA_ITEM_ID                    = 23,
    MAX_DATA_ITEM_ID                        = 24
};


@export(name="", value_prefix="LOC_HIDL_IZAT_STREAM_")
enum LocHidlIzatStreamType : uint32_t {
    FUSED       = 0x1,
    NETWORK     = 0x2,
    GNSS        = 0x4,
    NMEA        = 0x8,
    DR          = 0x10,
    GNSS_SVINFO = 0x20,
    DR_SVINFO   = 0x40,
    ALL         = 0x7f
};

@export(name="", value_prefix="LOC_HIDL_IZAT_LOCATION_STATUS_")
enum LocHidlIzatLocationStatus : uint32_t {
    FINAL           = 0x0,
    INTERMEDIATE    = 0x1
};

@export(name="", value_prefix="LOC_HIDL_IZAT_PROVIDER_")
enum LocHidlIzatProviderStatus : uint32_t {
    OUT_OF_SERVICE              = 0,
    TEMPORARILY_UNAVAILABLE     = 1,
    AVAILABLE                   = 2,
    GNSS_STATUS_NONE            = 3,
    GNSS_STATUS_SESSION_BEGIN   = 4,
    GNSS_STATUS_SESSION_END     = 5,
    GNSS_STATUS_ENGINE_ON       = 6,
    GNSS_STATUS_ENGINE_OFF      = 7,
};

@export(name="", value_prefix="LOC_HIDL_IZAT_HORIZONTAL_")
enum LocHidlIzatHorizontalAccuracy : uint32_t {
    FINE    = 0,
    BLOCK   = 1,
    CITY    = 2,
    NONE    = 3
};

@export(name="", value_prefix="LOC_HIDL_IZAT_OTHER_")
enum LocHidlIzatOtherAccuracy : uint32_t {
    HIGH    = 0,
    LOW     = 1,
    NONE    = 2
};

@export(name="", value_prefix="LOC_HIDL_IZAT_NETWORK_POSITION_FROM_")
enum LocHidlNetworkPositionSourceType : uint32_t {
    CELL = 0,
    WIFI = 1
};

struct LocHidlIzatRequest {
    LocHidlIzatStreamType          provider;
    int32_t                        numUpdates;
    int64_t                        suggestedResponseTimeForFirstFix;
    int64_t                        timeIntervalBetweenFixes;
    float                          smallestDistanceBetweenFixes;
    LocHidlIzatHorizontalAccuracy  suggestedHorizontalAccuracy;
    LocHidlIzatOtherAccuracy       suggestedAltitudeAccuracy;
    LocHidlIzatOtherAccuracy       suggestedBearingAccuracy;
};

// Gnss Location used from IZAT API
struct LocHidlIzatLocation {
    bool        hasUtcTimestampInMsec;
    int64_t     utcTimestampInMsec;
    bool        hasElapsedRealTimeInNanoSecs;
    int64_t     elapsedRealTimeInNanoSecs;
    bool        hasLatitude;
    double      latitude;
    bool        hasLongitude;
    double      longitude;
    bool        hasHorizontalAccuracy;
    float       horizontalAccuracy;
    bool        hasAltitudeWrtEllipsoid;
    double      altitudeWrtEllipsoid;
    bool        hasAltitudeWrtMeanSeaLevel;
    double      altitudeWrtMeanSeaLevel;
    bool        hasBearing;
    float       bearing;
    bool        hasSpeed;
    float       speed;
    uint16_t    position_source;
    bool        hasAltitudeMeanSeaLevel;
    float       altitudeMeanSeaLevel;
    bool        hasDop;
    float       pDop;
    float       hDop;
    float       vDop;
    bool        hasMagneticDeviation;
    float       magneticDeviation;
    bool        hasVertUnc;
    float       vertUnc;
    bool        hasSpeedUnc;
    float       speedUnc;
    bool        hasBearingUnc;
    float       bearingUnc;
    bool        hasHorizontalReliability;
    uint16_t    horizontalReliability;
    bool        hasVerticalReliability;
    uint16_t    verticalReliability;
    bool        hasHorUncEllipseSemiMajor;
    float       horUncEllipseSemiMajor;
    bool        hasHorUncEllipseSemiMinor;
    float       horUncEllipseSemiMinor;
    bool        hasHorUncEllipseOrientAzimuth;
    float       horUncEllipseOrientAzimuth;
    bool        hasNetworkPositionSource;
    LocHidlNetworkPositionSourceType networkPositionSource;
    bool        hasNavSolutionMask;
    uint32_t    navSolutionMask;
    bool        hasPositionTechMask;
    uint32_t    positionTechMask;
};

@export(name="", value_prefix="LOC_HIDL_LOCATION_HAS_")
enum LocHidlLocationFlagsBits : uint16_t {
    LAT_LONG_BIT          = (1<<0), // location has valid latitude and longitude
    ALTITUDE_BIT          = (1<<1), // location has valid altitude
    SPEED_BIT             = (1<<2), // location has valid speed
    BEARING_BIT           = (1<<3), // location has valid bearing
    ACCURACY_BIT          = (1<<4), // location has valid accuracy
    VERTICAL_ACCURACY_BIT = (1<<5), // location has valid vertical accuracy
    SPEED_ACCURACY_BIT    = (1<<6), // location has valid speed accuracy
    BEARING_ACCURACY_BIT  = (1<<7), // location has valid bearing accuracy
};

@export(name="", value_prefix="LOC_HIDL_LOCATION_TECHNOLOGY_")
enum LocHidlLocationTechnologyBits : uint16_t {
    GNSS_BIT     = (1<<0), // location was calculated using GNSS
    CELL_BIT     = (1<<1), // location was calculated using Cell
    WIFI_BIT     = (1<<2), // location was calculated using WiFi
    SENSORS_BIT  = (1<<3), // location was calculated using Sensors
};

// Gnss Location used from Location API
struct LocHidlLocation {
    uint16_t    locationFlagsMask;
    uint64_t    timestamp;
    double      latitude;
    double      longitude;
    double      altitude;
    float       speed;
    float       bearing;
    float       accuracy;
    float       verticalAccuracy;
    float       speedAccuracy;
    float       bearingAccuracy;
    uint16_t    locationTechnologyMask;
};

@export(name="", value_prefix="LOC_HIDL_LOCATION_ERROR_")
enum LocHidlLocationError : int32_t {
    SUCCESS = 0,
    GENERAL_FAILURE,
    CALLBACK_MISSING,
    INVALID_PARAMETER,
    ID_EXISTS,
    ID_UNKNOWN,
    ALREADY_STARTED,
    GEOFENCES_AT_MAX,
    NOT_SUPPORTED
};

@export(name="", value_prefix="LOC_HIDL_GEOFENCE_BREACH_")
enum LocHidlGeofenceBreachType : int32_t {
    ENTER      = 0,
    EXIT       = 1,
    DWELL_IN   = 2,
    DWELL_OUT  = 3,
    UNKNOWN    = 4,
};

@export(name="", value_prefix="LOC_HIDL_GEOFENCE_STATUS_")
enum LocHidlGeofenceStatus : int32_t {
    UNAVAILABILE  = 0,
    AVAILABILE    = 1,
};

@export(name="", value_prefix="LOC_HIDL_BATCH_MODE_")
enum LocHidlBatchMode : int32_t {
    BATCH_MODE_ROUTINE  = 0,
    BATCH_MODE_TRIP     = 1,
    BATCH_MODE_NONE     = 2,
};

@export(name="", value_prefix="LOC_HIDL_BATCH_STATUS_")
enum LocHidlBatchStatus : int32_t {
    BATCH_STATUS_TRIP_COMPLETED       = 0,
    BATCH_STATUS_POSITION_AVAILABLE   = 1,
    BATCH_STATUS_POSITION_UNAVAILABLE = 2,
};

struct LocHidlBatchOptions {
    LocHidlBatchMode batchMode;
};

struct LocHidlBatchStatusInfo {
    LocHidlBatchStatus batchStatus;
};
