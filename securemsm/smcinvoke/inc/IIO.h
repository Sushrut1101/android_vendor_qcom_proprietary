// =======================================================================
// Copyright (c) 2015-2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// =======================================================================
/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define IIO_ERROR_OFFSET_OUT_OF_BOUNDS INT32_C(10)
#define IIO_ERROR_SOURCE_BUFFER_TOO_LARGE INT32_C(11)
#define IIO_ERROR_INVALID_BUFFER_AND_OFFSET INT32_C(12)

#define IIO_OP_getLength 0
#define IIO_OP_readAtOffset 1
#define IIO_OP_writeAtOffset 2

static inline int32_t
IIO_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IIO_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IIO_getLength(Object self, uint64_t *len_ptr)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { len_ptr, sizeof(uint64_t) };

  return Object_invoke(self, IIO_OP_getLength, a, ObjectCounts_pack(0, 1, 0, 0));
}

static inline int32_t
IIO_readAtOffset(Object self, uint64_t offset_val, void *data_ptr, size_t data_len, size_t *data_lenout)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &offset_val, sizeof(uint64_t) };
  a[1].b = (ObjectBuf) { data_ptr, data_len * 1 };

  int32_t result = Object_invoke(self, IIO_OP_readAtOffset, a, ObjectCounts_pack(1, 1, 0, 0));

  *data_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
IIO_writeAtOffset(Object self, uint64_t offset_val, const void *data_ptr, size_t data_len)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &offset_val, sizeof(uint64_t) };
  a[1].bi = (ObjectBufIn) { data_ptr, data_len * 1 };

  return Object_invoke(self, IIO_OP_writeAtOffset, a, ObjectCounts_pack(2, 0, 0, 0));
}



