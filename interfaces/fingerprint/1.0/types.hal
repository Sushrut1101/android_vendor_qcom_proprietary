/* Copyright (c) 2017 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */

package vendor.qti.hardware.fingerprint@1.0;

/**
 * @brief: Holds the return code
 */
enum Status : int32_t {
    SUCCESS,
    FAILURE
};

/**
 * @brief: Holds the result of digital test
 */
struct DigitalTestResult {
    Status status;
    int32_t asicId;
    int32_t asicSerialNo;
};

/**
 * @brief: Holds the result of temperature test
 */
struct TemperatureTestResult {
    Status status;
    double temperature;
};

/**
 * @brief: Holds the result of contact resistance test
 */
struct ContactResistanceTestResult {
    Status status;
    double rsenseOhm;
};

/**
 * @brief: Holds the result of captouch calibration
 */
struct CaptouchCalibrationResult {
    Status status;
    int32_t tempOffset;
    int32_t capOffset;
    double tempForCalibration;
};

/**
 * @brief: Holds the result of TFT and Rx tests
 */
struct BiasTestResult {
    Status status;
    int32_t bias;
    int32_t median;
    int32_t stddev;
    int32_t q5;
    int32_t q95;
};

/**
 * @brief: Holds the result of Tx test
 */
struct TxTestResult {
    Status status;
    int32_t median;
    int32_t stddev;
    int32_t q5;
    int32_t q95;
};

/**
 * @brief: Holds the result of Dbias claibration
 */
struct DbiasCalibrationResult {
    Status status;
    int32_t optimalDbias;
};

/**
 * @brief: Holds the result of Noise test
 */
struct NoiseTestResult {
    Status status;
    int32_t stddevTbOn;
    int32_t stddevTbOff;
};

/**
 * @brief: Holds the result of Image Quality test
 */
struct ImageQualityTestResult {
    Status status;
    int32_t SNR1;
    int32_t delta1;
};

/**
 * @brief: Holds the result of PSF calibration
 */
struct PsfCalibrationResult {
    Status status;
    int32_t phase;
    int32_t initialDelay;
    int32_t phaseCosinus;
};

/**
 * @brief: Holds the result of PSF verification
 */
struct PsfVerificationResult {
    Status status;
    int32_t residualPhase;
};

/**
 * @brief: Structure for debug data
 */
struct CaptureDebugData {
    string key;
    vec<uint8_t> data;
    uint32_t dataSize;
};

/**
 * @brief: Holds the result of OTP Read
 */
struct OtpTestResult {
    Status status;
    double otpVal;
};

/**
 * @brief: Holds info regarding framework
 */
struct FrameworkInfo {
    Status status;
    vec<int32_t> version;
    string capabilities;
};

/**
 * @brief: Structure for enrollment record
 */
struct EnrollRecord {
    Status status;
    string enrolleeId;
    uint64_t enrollmentDate;
    vec<string> fingers;
    uint32_t dbStatus;
};

/**
 * @brief: Holds the result of Read Info test
 */
struct ReadInfoResult {
    Status status;
    uint32_t fwVersion;
    uint32_t chipId;
    uint32_t chipSn;
    vec<uint8_t> lotId;
    vec<uint8_t> waferId;
    uint32_t sensorWidth;
    uint32_t sensorHeight;
    uint8_t livenessSupport;
    vec<uint8_t> tftId;
};

/**
 * @brief: Holds the result of get field MFG test
 */
struct FieldMfgFormat {
    Status status;
    string mfgValue;
};

/**
 * @brief: Holds the result of psf setting test
 */
struct PsfSettingFormat {
    Status status;
    double rmax;
    double speedOfSound;
};
