/******************************************************************************
  @file    ril_utf_test_qmi_ril.cpp
  @brief   RIL UTF test case definitions

  DESCRIPTION
  All test case definitions should be in this file
  ---------------------------------------------------------------------------

  Copyright (c) 2018-2019 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
  ---------------------------------------------------------------------------
******************************************************************************/

#include "ril_utf_test_qmi_ril.h"

void util_mo_call_active(Testcase &t, AndroidTelTestnode &RIL_node, QMIRILTestnode &QMI_node)
{
  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
#ifdef RIL_UTF_L_MASTER
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
#else
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_GSM_WCDMA_TDSCDMA_V02);
#endif
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);
}

void *util_allocate_call_details_extra(char **extra)
{
  int length = 0;
  while (extra[length] != nullptr)
  {
    length++;
  }
  char **e = new char*[length+1];
  for(int i=0; extra[i] != nullptr; i++) {
    int extra_len = strlen(extra[i])+1;
    e[i] = new char[extra_len];
    strlcpy(e[i], extra[i], extra_len);
  }
  e[length] = 0;
  return e;
}

/**==
 * util_mo_ims_call_hold_indication
==**/
void util_mo_ims_call_hold_indication(Testcase &t, call_mode_enum_v02 call_mode, call_type_enum_v02 call_type)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_HOLDING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = (call_type == CALL_TYPE_VT_V02 ? ims_CallType_CALL_TYPE_VT : ims_CallType_CALL_TYPE_VOICE);
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);
}

/**==
 * util_mo_volte_call_active_indication
==**/
void util_mo_volte_call_active_indication(Testcase &t, IMSTestnode &IMS_node, QMIRILTestnode &QMI_node)
{
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);
}

/**==
 * util_ims_mo_call_hold
==**/
void util_ims_mo_call_hold(Testcase &t, call_mode_enum_v02 call_mode, call_type_enum_v02 call_type)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;

  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  t.expect(IMS_node);

  util_mo_ims_call_hold_indication(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
}


/**==
 * util_ims_add_second_mo_call_to_held_mo_call
==**/
void util_ims_add_second_mo_call_to_held_mo_call (Testcase &t, const call_mode_enum_v02 &call_mode,
    const ims_CallType &call_type_first_call, const ims_CallType &call_type_second_call)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;

  call_type_enum_v02 modem_call_type_first_call = ((call_type_first_call == ims_CallType_CALL_TYPE_VT) ? CALL_TYPE_VT_V02 : CALL_TYPE_VOICE_IP_V02);
  call_type_enum_v02 modem_call_type_second_call = ((call_type_second_call == ims_CallType_CALL_TYPE_VT) ? CALL_TYPE_VT_V02 : CALL_TYPE_VOICE_IP_V02);

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial *ptr = IMS_node.update_default_ims_request_dial("2428536961");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = call_type_second_call;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536961");
  QMI_node.set_qmi_voice_dial_call_req_call_type(modem_call_type_second_call);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(((call_type_second_call == ims_CallType_CALL_TYPE_VT) ?  VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02 : 0));
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = modem_call_type_first_call;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = modem_call_type_second_call;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = call_mode;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type_second_call;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = call_type_first_call;
  calls[1]->callDetails.has_mediaId = TRUE;
  calls[1]->callDetails.mediaId = 2;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[1]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = modem_call_type_first_call;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = modem_call_type_second_call;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type_second_call;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = call_type_first_call;
  calls[1]->callDetails.has_mediaId = TRUE;
  calls[1]->callDetails.mediaId = 2;
  calls[1]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = modem_call_type_first_call;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = modem_call_type_second_call;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type_second_call;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = call_type_first_call;
  calls[1]->callDetails.has_mediaId = TRUE;
  calls[1]->callDetails.mediaId = 2;
  calls[1]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);
}

/**==
 * util_ims_conference_mo_active_call_and_held_call
==**/
void util_ims_conference_mo_active_call_and_held_call (Testcase &t, const call_mode_enum_v02 &call_mode, const ims_CallType &call_type)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;

  call_type_enum_v02 modem_call_type = ((call_type == ims_CallType_CALL_TYPE_VT) ? CALL_TYPE_VT_V02 : CALL_TYPE_VOICE_IP_V02);

  // Inject: ims_MsgId_REQUEST_CONFERENCE
  IMS_node.update_default_ims_request_conference();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[2].call_id = 1;
  call_info[2].call_state = CALL_STATE_HOLD_V02;
  call_info[2].call_type = modem_call_type;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = call_mode;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = modem_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = call_mode;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = call_mode;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(3);
  number_list[2].call_id = 1;
  number_list[2].number_len = strlen("2428536960");
  strlcpy(number_list[2].number, "2428536960", strlen("2428536960")+1);
  number_list[2].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(3);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ((call_type == ims_CallType_CALL_TYPE_VT) ? ims_CallDomain_CALL_DOMAIN_PS : ims_CallDomain_CALL_DOMAIN_AUTOMATIC);
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 2;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 0;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 2;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = call_type;
  calls[2]->has_index = TRUE;
  calls[2]->index = 1;
  calls[2]->has_state = TRUE;
  calls[2]->state = ims_CallState_CALL_HOLDING;
  calls[2]->has_toa = TRUE;
  calls[2]->toa = 129;
  calls[2]->has_isMpty = TRUE;
  calls[2]->has_isMT = TRUE;
  calls[2]->has_als = TRUE;
  calls[2]->has_isVoice = TRUE;
  calls[2]->isVoice     = 1;
  calls[2]->has_isVoicePrivacy = TRUE;
  calls[2]->isVoicePrivacy     = 0;
  calls[2]->has_numberPresentation = TRUE;
  calls[2]->numberPresentation     = 0;
  calls[2]->has_namePresentation = TRUE;
  calls[2]->namePresentation     = 2;
  calls[2]->callDetails.has_callDomain = TRUE;
  calls[2]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[2]->callDetails.has_callType = TRUE;
  calls[2]->callDetails.callType = call_type;
  calls[2]->callDetails.has_mediaId = TRUE;
  calls[2]->callDetails.mediaId = 2;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[2]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[2].call_id = 1;
  call_info[2].call_state = CALL_STATE_HOLD_V02;
  call_info[2].call_type = modem_call_type;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = call_mode;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = modem_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = call_mode;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(3);
  number_list[2].call_id = 1;
  number_list[2].number_len = strlen("2428536960");
  strlcpy(number_list[2].number, "2428536960", strlen("2428536960")+1);
  number_list[2].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(3);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ((call_type == ims_CallType_CALL_TYPE_VT) ? ims_CallDomain_CALL_DOMAIN_PS : ims_CallDomain_CALL_DOMAIN_AUTOMATIC);
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 2;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 0;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 2;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = call_type;
  calls[2]->has_index = TRUE;
  calls[2]->index = 1;
  calls[2]->has_state = TRUE;
  calls[2]->state = ims_CallState_CALL_HOLDING;
  calls[2]->has_toa = TRUE;
  calls[2]->toa = 129;
  calls[2]->has_isMpty = TRUE;
  calls[2]->has_isMT = TRUE;
  calls[2]->has_als = TRUE;
  calls[2]->has_isVoice = TRUE;
  calls[2]->isVoice     = 1;
  calls[2]->has_isVoicePrivacy = TRUE;
  calls[2]->isVoicePrivacy     = 0;
  calls[2]->has_numberPresentation = TRUE;
  calls[2]->numberPresentation     = 0;
  calls[2]->has_namePresentation = TRUE;
  calls[2]->namePresentation     = 2;
  calls[2]->callDetails.has_callDomain = TRUE;
  calls[2]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[2]->callDetails.has_callType = TRUE;
  calls[2]->callDetails.callType = call_type;
  calls[2]->callDetails.has_mediaId = TRUE;
  calls[2]->callDetails.mediaId = 2;
  calls[2]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[2].call_id = 1;
  call_info[2].call_state = CALL_STATE_HOLD_V02;
  call_info[2].call_type = modem_call_type;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = call_mode;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = modem_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = call_mode;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(3);
  number_list[2].call_id = 1;
  number_list[2].number_len = strlen("2428536960");
  strlcpy(number_list[2].number, "2428536960", strlen("2428536960")+1);
  number_list[2].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(3);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 2;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 0;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 2;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = call_type;
  calls[2]->has_index = TRUE;
  calls[2]->index = 1;
  calls[2]->has_state = TRUE;
  calls[2]->state = ims_CallState_CALL_HOLDING;
  calls[2]->has_toa = TRUE;
  calls[2]->toa = 129;
  calls[2]->has_isMpty = TRUE;
  calls[2]->has_isMT = TRUE;
  calls[2]->has_als = TRUE;
  calls[2]->has_isVoice = TRUE;
  calls[2]->isVoice     = 1;
  calls[2]->has_isVoicePrivacy = TRUE;
  calls[2]->isVoicePrivacy     = 0;
  calls[2]->has_numberPresentation = TRUE;
  calls[2]->numberPresentation     = 0;
  calls[2]->has_namePresentation = TRUE;
  calls[2]->namePresentation     = 2;
  calls[2]->callDetails.has_callDomain = TRUE;
  calls[2]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[2]->callDetails.has_callType = TRUE;
  calls[2]->callDetails.callType = call_type;
  calls[2]->callDetails.has_mediaId = TRUE;
  calls[2]->callDetails.mediaId = 2;
  calls[2]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(3);
  call_info[2].call_id = 1;
  call_info[2].call_state = CALL_STATE_END_V02;
  call_info[2].call_type = modem_call_type;
  call_info[2].direction = CALL_DIRECTION_MO_V02;
  call_info[2].is_mpty = 0;
  call_info[2].mode = call_mode;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = modem_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = call_mode;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(3);
  number_list[2].call_id = 1;
  number_list[2].number_len = strlen("2428536960");
  strlcpy(number_list[2].number, "2428536960", strlen("2428536960")+1);
  number_list[2].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(3);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 2;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 0;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 2;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = call_type;
  calls[2]->has_index = TRUE;
  calls[2]->index = 1;
  calls[2]->has_state = TRUE;
  calls[2]->state = ims_CallState_CALL_END;
  calls[2]->has_toa = TRUE;
  calls[2]->toa = 129;
  calls[2]->has_isMpty = TRUE;
  calls[2]->has_isMT = TRUE;
  calls[2]->has_als = TRUE;
  calls[2]->has_isVoice = TRUE;
  calls[2]->isVoice     = 1;
  calls[2]->has_isVoicePrivacy = TRUE;
  calls[2]->isVoicePrivacy     = 0;
  calls[2]->has_numberPresentation = TRUE;
  calls[2]->numberPresentation     = 0;
  calls[2]->has_namePresentation = TRUE;
  calls[2]->namePresentation     = 2;
  calls[2]->callDetails.has_callDomain = TRUE;
  calls[2]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[2]->callDetails.has_callType = TRUE;
  calls[2]->callDetails.callType = call_type;
  calls[2]->callDetails.has_mediaId = TRUE;
  calls[2]->callDetails.mediaId = 2;
  calls[2]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = modem_call_type;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = call_mode;
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type;
  calls[1]->has_index = TRUE;
  calls[1]->index = 2;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_END;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice     = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy     = 0;
  calls[1]->has_numberPresentation = TRUE;
  calls[1]->numberPresentation     = 0;
  calls[1]->has_namePresentation = TRUE;
  calls[1]->namePresentation     = 2;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = call_type;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_CONFERENCE (resp)
  IMS_node.update_default_ims_request_conference_resp();
  t.expect(IMS_node);
}

/**==
util_hangup_mo_volte_call
==**/
void util_hangup_mo_volte_call(Testcase &t, const call_mode_enum_v02 &call_mode)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  // End Reason Text "No RTCP Packets" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {0x4e, 0x6f, 0x20, 0x52, 0x54, 0x43, 0x50, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 100;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 100;
  t.expect(IMS_node);
}

/**==
util_hangup_mo_volte_rtt_call
==**/
void util_hangup_mo_volte_rtt_call(Testcase &t, IMSTestnode &IMS_node, QMIRILTestnode &QMI_node)
{
  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Rtt mode
  voice_call_rtt_mode_status_type_v02* rtt_mode = QMI_node.set_qmi_voice_all_call_status_ind_rtt_mode(1);
  rtt_mode[0].call_id = 1;
  rtt_mode[0].rtt_mode = RTT_MODE_FULL_V02;
  // End reason text
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  // End Reason Text "No RTCP Packets" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {0x4e, 0x6f, 0x20, 0x52, 0x54, 0x43, 0x50, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 100;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.has_rttMode = TRUE;
  calls[0]->callDetails.rttMode = ims_RttMode_RTT_MODE_FULL;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 100;
  t.expect(IMS_node);
}

/**==
 * util_ims_mo_call_active
==**/
void util_ims_mo_call_active(Testcase &t, const call_mode_enum_v02 &call_mode,
                             const ims_CallType &initiate_as_call_type,
                             const ims_CallType &connect_as_call_type, bool connected_suspended)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;

  call_type_enum_v02 initiate_modem_call_type =
        (call_mode == CALL_MODE_WLAN_V02 ?  CALL_TYPE_VOICE_IP_V02 : CALL_TYPE_VOICE_V02);
  call_type_enum_v02 connect_modem_call_type = CALL_TYPE_VOICE_IP_V02;
  voice_call_attribute_type_mask_v02 initiate_video_attributes = (voice_call_attribute_type_mask_v02)0;
  voice_call_attribute_type_mask_v02 connect_video_attributes = (voice_call_attribute_type_mask_v02)0;
  ims_CallDomain initiate_call_domain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;

  if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT)
  {
    initiate_call_domain = ims_CallDomain_CALL_DOMAIN_PS;
    initiate_modem_call_type = CALL_TYPE_VT_V02;
    initiate_video_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT_TX)
  {
    initiate_call_domain = ims_CallDomain_CALL_DOMAIN_PS;
    initiate_modem_call_type = CALL_TYPE_VT_V02;
    initiate_video_attributes = VOICE_CALL_ATTRIB_TX_V02;
  }
  else if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT_RX)
  {
    initiate_call_domain = ims_CallDomain_CALL_DOMAIN_PS;
    initiate_modem_call_type = CALL_TYPE_VT_V02;
    initiate_video_attributes = VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT_NODIR)
  {
    initiate_call_domain = ims_CallDomain_CALL_DOMAIN_PS;
    initiate_modem_call_type = CALL_TYPE_VT_V02;
  }

  if (connect_as_call_type == ims_CallType_CALL_TYPE_VT)
  {
    connect_modem_call_type = CALL_TYPE_VT_V02;
    connect_video_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (connect_as_call_type == ims_CallType_CALL_TYPE_VT_TX)
  {
    connect_modem_call_type = CALL_TYPE_VT_V02;
    connect_video_attributes = VOICE_CALL_ATTRIB_TX_V02;
  }
  else if (connect_as_call_type == ims_CallType_CALL_TYPE_VT_RX)
  {
    connect_modem_call_type = CALL_TYPE_VT_V02;
    connect_video_attributes = VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (connect_as_call_type == ims_CallType_CALL_TYPE_VT_NODIR)
  {
    connect_modem_call_type = CALL_TYPE_VT_V02;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = initiate_as_call_type;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(
      initiate_as_call_type == ims_CallType_CALL_TYPE_VOICE ? CALL_TYPE_VOICE_V02
                                                            : initiate_modem_call_type);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(initiate_video_attributes);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = initiate_modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  if (initiate_modem_call_type == CALL_TYPE_VT_V02) {
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id = 1;
    video_attrib[0].call_attributes = initiate_video_attributes;
  }
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = initiate_call_domain;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = initiate_as_call_type;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = initiate_modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  if (initiate_modem_call_type == CALL_TYPE_VT_V02) {
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id = 1;
    video_attrib[0].call_attributes = initiate_video_attributes;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = initiate_call_domain;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = initiate_as_call_type;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = initiate_modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  if (initiate_modem_call_type == CALL_TYPE_VT_V02) {
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id = 1;
    video_attrib[0].call_attributes = initiate_video_attributes;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = initiate_call_domain;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = initiate_as_call_type;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = initiate_call_domain;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = initiate_as_call_type;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = connect_modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = call_mode;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id = 1;
  audio_attrib[0].call_attributes =
      (connected_suspended ? 0 : (VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02));
  // Video attributes
  if (connect_modem_call_type == CALL_TYPE_VT_V02) {
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id = 1;
    video_attrib[0].call_attributes = (connected_suspended ? 0 : connect_video_attributes);
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType =
      (connected_suspended ? initiate_as_call_type : connect_as_call_type);
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  if (connected_suspended) {
    calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_AUDIO_CONNECTED_SUSPENDED;
    if (initiate_modem_call_type == CALL_TYPE_VT_V02) {
      calls[0]->callDetails.callSubstate =
          (ims_CallSubstate)(ims_CallSubstate_CALL_SUBSTATE_AUDIO_CONNECTED_SUSPENDED |
                             ims_CallSubstate_CALL_SUBSTATE_VIDEO_CONNECTED_SUSPENDED);
    }
  }
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  if (connected_suspended) {
    // Inject QMI_VOICE_MODIFIED_IND_V02
    QMI_node.update_default_qmi_voice_modified_ind_msg(1);
    QMI_node.set_qmi_voice_modified_ind_call_type(connect_modem_call_type);
    QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 |
                                                     VOICE_CALL_ATTRIB_RX_V02);
    QMI_node.set_qmi_voice_modified_ind_video_attrib(connect_video_attributes);
    t.inject(QMI_node);

    // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
    calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
    calls[0]->has_index = TRUE;
    calls[0]->index = 1;
    calls[0]->has_state = TRUE;
    calls[0]->state = ims_CallState_CALL_ACTIVE;
    calls[0]->has_toa = TRUE;
    calls[0]->toa = 129;
    calls[0]->has_isMpty = TRUE;
    calls[0]->has_isMT = TRUE;
    calls[0]->has_als = TRUE;
    calls[0]->has_isVoice = TRUE;
    calls[0]->isVoice = 1;
    calls[0]->has_isVoicePrivacy = TRUE;
    calls[0]->isVoicePrivacy = 0;
    calls[0]->callDetails.has_callDomain = TRUE;
    calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
    calls[0]->callDetails.has_callType = TRUE;
    calls[0]->callDetails.callType = connect_as_call_type;
    calls[0]->callDetails.has_mediaId = TRUE;
    calls[0]->callDetails.mediaId = 2;
    calls[0]->callDetails.has_callSubstate = TRUE;
    calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
    calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
    t.expect(IMS_node);
  }
}

/**==
 * util_mo_vt_call_active
==**/
void util_mo_vt_call_active(Testcase &t, IMSTestnode &IMS_node, QMIRILTestnode &QMI_node)
{
  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);
}

/**==
util_hangup_mo_vt_call
==**/
void util_hangup_mo_vt_call(Testcase &t, IMSTestnode &IMS_node, QMIRILTestnode &QMI_node)
{
  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id         = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Call End reason
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  // End Reason Text "No RTCP Packets" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {0x4e, 0x6f, 0x20, 0x52, 0x54, 0x43, 0x50, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 100;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 100;
  t.expect(IMS_node);
}

/**==
util_make_two_volte_calls_hold_active
==**/
void util_make_two_volte_calls_hold_active(Testcase &t, IMSTestnode &IMS_node, QMIRILTestnode &QMI_node)
{
  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
}

/**==
 * util_mt_ims_call_incoming_indication
==**/
void util_mt_ims_call_incoming_indication(Testcase &t, IMSTestnode &IMS_node, QMIRILTestnode &QMI_node,
                                           const ims_CallType &initiate_as_call_type)
{
  call_type_enum_v02 initiate_modem_call_type = CALL_TYPE_VOICE_IP_V02;
  voice_call_attribute_type_mask_v02 video_attributes = (voice_call_attribute_type_mask_v02)0;

  if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT)
  {
    initiate_modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT_TX)
  {
    initiate_modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_TX_V02;
  }
  else if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT_RX)
  {
    initiate_modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT_NODIR)
  {
    initiate_modem_call_type = CALL_TYPE_VT_V02;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = initiate_modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  if (initiate_modem_call_type == CALL_TYPE_VT_V02)
  {
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = video_attributes;
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = initiate_as_call_type;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);
}

/**==
 * util_mt_ims_call_end_indication
==**/
void util_mt_ims_call_end_indication(Testcase &t, IMSTestnode &IMS_node, QMIRILTestnode &QMI_node,
                                           const ims_CallType &call_type)
{
  call_type_enum_v02 modem_call_type = CALL_TYPE_VOICE_IP_V02;
  voice_call_attribute_type_mask_v02 video_attributes = (voice_call_attribute_type_mask_v02)0;

  if (call_type == ims_CallType_CALL_TYPE_VT)
  {
    modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (call_type == ims_CallType_CALL_TYPE_VT_TX)
  {
    modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_TX_V02;
  }
  else if (call_type == ims_CallType_CALL_TYPE_VT_RX)
  {
    modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (call_type == ims_CallType_CALL_TYPE_VT_NODIR)
  {
    modem_call_type = CALL_TYPE_VT_V02;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  if (modem_call_type == CALL_TYPE_VT_V02) {
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = video_attributes;
  }
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);
}

/**==
 * util_mt_ims_call_answer
==**/
void util_mt_ims_call_answer(Testcase & t, IMSTestnode & IMS_node, QMIRILTestnode & QMI_node,
                             const ims_CallType &initiate_as_call_type,
                             const ims_CallType &connect_as_call_type, bool connected_suspended)
{
  util_mt_ims_call_incoming_indication(t, IMS_node, QMI_node, initiate_as_call_type);

  call_type_enum_v02 connect_modem_call_type = CALL_TYPE_VOICE_IP_V02;
  voice_call_attribute_type_mask_v02 video_attributes = (voice_call_attribute_type_mask_v02)0;

  if (connect_as_call_type == ims_CallType_CALL_TYPE_VT)
  {
    connect_modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (connect_as_call_type == ims_CallType_CALL_TYPE_VT_TX)
  {
    connect_modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_TX_V02;
  }
  else if (connect_as_call_type == ims_CallType_CALL_TYPE_VT_RX)
  {
    connect_modem_call_type = CALL_TYPE_VT_V02;
    video_attributes = VOICE_CALL_ATTRIB_RX_V02;
  }
  else if (connect_as_call_type == ims_CallType_CALL_TYPE_VT_NODIR)
  {
    connect_modem_call_type = CALL_TYPE_VT_V02;
  }

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  IMS_node.set_ims_request_answer_call_type(connect_as_call_type);
  IMS_node.set_ims_request_answer_presentation(ims_IpPresentation_IP_PRESENTATION_NUM_DEFAULT);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  if (initiate_as_call_type == ims_CallType_CALL_TYPE_VT ||
      initiate_as_call_type == ims_CallType_CALL_TYPE_VT_RX ||
      initiate_as_call_type == ims_CallType_CALL_TYPE_VT_TX) {
    QMI_node.set_qmi_voice_answer_call_req_call_type(connect_modem_call_type);
  }
  if (connect_modem_call_type == CALL_TYPE_VT_V02)
  {
    QMI_node.set_qmi_voice_answer_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
    QMI_node.set_qmi_voice_answer_call_req_video_attrib(video_attributes);
  }
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = connect_modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes =
      (connected_suspended ? 0 : (VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02));
  // Video attributes
  if (connect_modem_call_type == CALL_TYPE_VT_V02)
  {
    voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
    video_attrib[0].call_id         = 1;
    video_attrib[0].call_attributes = (connected_suspended ? 0 : video_attributes);
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType =
      (connect_as_call_type == ims_CallType_CALL_TYPE_UNKNOWN ? ims_CallType_CALL_TYPE_VOICE
                                                              : connect_as_call_type);
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  if (connected_suspended) {
    calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_AUDIO_CONNECTED_SUSPENDED;
    if (connect_modem_call_type == CALL_TYPE_VT_V02) {
      calls[0]->callDetails.callSubstate =
          (ims_CallSubstate)(ims_CallSubstate_CALL_SUBSTATE_AUDIO_CONNECTED_SUSPENDED |
                             ims_CallSubstate_CALL_SUBSTATE_VIDEO_CONNECTED_SUSPENDED);
    }
  }
  t.expect(IMS_node);

  if (connected_suspended) {
    // Inject QMI_VOICE_MODIFIED_IND_V02
    QMI_node.update_default_qmi_voice_modified_ind_msg(1);
    QMI_node.set_qmi_voice_modified_ind_call_type(connect_modem_call_type);
    QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 |
                                                     VOICE_CALL_ATTRIB_RX_V02);
    QMI_node.set_qmi_voice_modified_ind_video_attrib(video_attributes);
    t.inject(QMI_node);

    // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
    calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
    calls[0]->has_index = TRUE;
    calls[0]->index = 1;
    calls[0]->has_state = TRUE;
    calls[0]->state = ims_CallState_CALL_ACTIVE;
    calls[0]->has_toa = TRUE;
    calls[0]->toa = 129;
    calls[0]->has_isMpty = TRUE;
    calls[0]->has_isMT = TRUE;
    calls[0]->isMT = TRUE;
    calls[0]->has_als = TRUE;
    calls[0]->has_isVoice = TRUE;
    calls[0]->isVoice = 1;
    calls[0]->has_isVoicePrivacy = TRUE;
    calls[0]->isVoicePrivacy = 0;
    calls[0]->callDetails.has_callDomain = TRUE;
    calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
    calls[0]->callDetails.has_callType = TRUE;
    calls[0]->callDetails.callType =
        (connect_as_call_type == ims_CallType_CALL_TYPE_UNKNOWN ? ims_CallType_CALL_TYPE_VOICE
                                                                : connect_as_call_type);
    calls[0]->callDetails.has_mediaId = TRUE;
    calls[0]->callDetails.mediaId = 0;
    calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
    t.expect(IMS_node);
  }
}

void util_voice_handover_ind(Testcase &t, voice_handover_type_enum_v02 ho_type,
    voice_handover_state_enum_v02 ho_state)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  // Get SRVCC_Start Indication
  // Inject: QMI_VOICE_HANDOVER_IND_V02
  QMI_node.update_qmi_voice_handover_ind_msg(VOICE_HANDOVER_START_V02, ho_type);
  t.inject(QMI_node);

  t.set_start();
  // Expect: RIL_UNSOL_SRVCC_STATE_NOTIFY
  RIL_node.update_default_ril_unsol_srvcc_state_notify(HANDOVER_STARTED);
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_HANDOVER
  IMS_node.update_default_ims_unsol_response_handover();
  IMS_node.set_ims_unsol_response_handover_type(ims_Handover_Msg_Type_START);
  t.expect(IMS_node);
  t.set_end();

  // Get SRVCC_Complete_Success Indication
  // Inject: QMI_VOICE_HANDOVER_IND_V02
  QMI_node.update_qmi_voice_handover_ind_msg(ho_state, ho_type);
  t.inject(QMI_node);

  t.set_start();
  RIL_SrvccState ril_srvcc_state = HANDOVER_COMPLETED;
  ims_Handover_Msg_Type ims_srvcc_state = ims_Handover_Msg_Type_COMPLETE_SUCCESS;
  if (ho_state == VOICE_HANDOVER_FAIL_V02) {
    ril_srvcc_state = HANDOVER_FAILED;
    ims_srvcc_state = ims_Handover_Msg_Type_COMPLETE_FAIL;
  } else if (ho_state == VOICE_HANDOVER_CANCEL_V02) {
    ril_srvcc_state = HANDOVER_CANCELED;
    ims_srvcc_state = ims_Handover_Msg_Type_CANCEL;
  } else if (ho_state == VOICE_HANDOVER_COMPLETE_V02) {
    ril_srvcc_state = HANDOVER_COMPLETED;
    ims_srvcc_state = ims_Handover_Msg_Type_COMPLETE_SUCCESS;
  }
  // Expect: RIL_UNSOL_SRVCC_STATE_NOTIFY
  RIL_node.update_default_ril_unsol_srvcc_state_notify(ril_srvcc_state);
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_HANDOVER
  IMS_node.update_default_ims_unsol_response_handover();
  IMS_node.set_ims_unsol_response_handover_type(ims_srvcc_state);
  t.expect(IMS_node);
  t.set_end();
}


void util_ims_hold_volte_conference_call(Testcase &t, const call_mode_enum_v02 &call_mode, const ims_CallType &call_type)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;

  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(3);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(3);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = call_mode;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_HOLDING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = call_type;
  t.expect(IMS_node);
}


/**==
@testname: ril_utf_test_dtmf_001
@description: MO call with DTMF requests
==**/
test_result ril_utf_test_dtmf_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("This test creates an MO call through an ATEL dial request and then ends the call with an ATEL hangup request");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mo_call_active(t, RIL_node, QMI_node);

  // Inject: RIL_REQUEST_DTMF_START
  ril_request_dtmf_t *dtmf = RIL_node.update_default_ril_request_dtmf_start();
  dtmf->dtmf = "1";
  RIL_node.set_token_id(400);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '1');
  t.expect(QMI_node);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_START (resp)
  RIL_node.update_default_ril_request_dtmf_start_resp();
  RIL_node.set_token_id(400);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_DTMF_STOP
  RIL_node.update_default_ril_request_dtmf_stop();
  RIL_node.set_token_id(401);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_STOP (resp)
  RIL_node.update_default_ril_request_dtmf_stop_resp();
  RIL_node.set_token_id(401);
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_dtmf_002
@description: MO call with DTMF requests
==**/
test_result ril_utf_test_dtmf_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("This test creates an MO call through an ATEL dial request and then ends the call with an ATEL hangup request");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mo_call_active(t, RIL_node, QMI_node);

  // Inject: RIL_REQUEST_DTMF_START
  ril_request_dtmf_t *dtmf = RIL_node.update_default_ril_request_dtmf_start();
  dtmf->dtmf = "1";
  RIL_node.set_token_id(400);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '1');
  t.expect(QMI_node);

  // Inject: RIL_REQUEST_DTMF_STOP
  RIL_node.update_default_ril_request_dtmf_stop();
  RIL_node.set_token_id(401);
  t.inject(RIL_node);

  // Inject: RIL_REQUEST_DTMF_START
  dtmf = RIL_node.update_default_ril_request_dtmf_start();
  dtmf->dtmf = "2";
  RIL_node.set_token_id(402);
  t.inject(RIL_node);

  // Inject: RIL_REQUEST_DTMF_STOP
  RIL_node.update_default_ril_request_dtmf_stop();
  RIL_node.set_token_id(403);
  t.inject(RIL_node);

  t.sleep(500);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_START (resp)
  RIL_node.update_default_ril_request_dtmf_start_resp();
  RIL_node.set_token_id(400);
  t.expect(RIL_node);

  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_DTMF_START (resp)
  RIL_node.update_default_ril_request_dtmf_start_resp();
  RIL_node.set_token_id(402);
  RIL_node.set_ril_error_value(RIL_E_CANCELLED);
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_DTMF_STOP (resp)
  RIL_node.update_default_ril_request_dtmf_stop_resp();
  RIL_node.set_token_id(403);
  RIL_node.set_ril_error_value(RIL_E_CANCELLED);
  t.expect(RIL_node);

#ifdef QMI_RIL_HAL_UTF
  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);
#endif

  // Expect: RIL_REQUEST_DTMF_STOP (resp)
  RIL_node.update_default_ril_request_dtmf_stop_resp();
  RIL_node.set_token_id(401);
#ifndef QMI_RIL_HAL_UTF
  RIL_node.set_ril_error_value(RIL_E_CANCELLED);
#endif
  t.expect(RIL_node);

  t.set_end();

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_dtmf_003
@description:
DTMF test case
==**/
test_result ril_utf_test_dtmf_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send DTMF");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DTMF_START
  ril_request_dtmf_t *dtmf = RIL_node.update_default_ril_request_dtmf_start();
  dtmf->dtmf = "1";
  RIL_node.set_token_id(400);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '1');
  t.expect(QMI_node);

  // Inject: RIL_REQUEST_DTMF_START
  dtmf = RIL_node.update_default_ril_request_dtmf_start();
  dtmf->dtmf = "2";
  RIL_node.set_token_id(401);
  t.inject(RIL_node);

  // Inject: RIL_REQUEST_DTMF_STOP
  RIL_node.update_default_ril_request_dtmf_stop();
  RIL_node.set_token_id(402);
  t.inject(RIL_node);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_START (resp)
  RIL_node.update_default_ril_request_dtmf_start_resp();
  RIL_node.set_token_id(400);
  t.expect(RIL_node);




  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_STOP (resp)
  RIL_node.update_default_ril_request_dtmf_stop_resp();
  RIL_node.set_token_id(402);
  t.expect(RIL_node);




  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '2');
  t.expect(QMI_node);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_START (resp)
  RIL_node.update_default_ril_request_dtmf_start_resp();
  RIL_node.set_token_id(401);
  t.expect(RIL_node);




  // Inject: RIL_REQUEST_DTMF_STOP
  RIL_node.update_default_ril_request_dtmf_stop();
  RIL_node.set_token_id(403);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_STOP (resp)
  RIL_node.update_default_ril_request_dtmf_stop_resp();
  RIL_node.set_token_id(403);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_dtmf_004
@description: MO call with DTMF requests
==**/
test_result ril_utf_test_dtmf_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("MO CS call with DTMF");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mo_call_active(t, RIL_node, QMI_node);

  // Inject: RIL_REQUEST_DTMF
  ril_request_dtmf_t *dtmf = RIL_node.update_default_ril_request_dtmf();
  dtmf->dtmf = "1";
  RIL_node.set_token_id(400);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '1');
  t.expect(QMI_node);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF (resp)
  RIL_node.update_default_ril_request_dtmf_resp();
  RIL_node.set_token_id(400);
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_dtmf_wo_flow_control_pair
@description:
DTMF test case
==**/
test_result ril_utf_test_dtmf_wo_flow_control_pair(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send DTMF");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DTMF_START
  ril_request_dtmf_t *dtmf = RIL_node.update_default_ril_request_dtmf_start();
  dtmf->dtmf = "1";
  t.inject(RIL_node);

  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '1');
  t.expect(QMI_node);

  // Inject: RIL_REQUEST_DTMF_START
  dtmf = RIL_node.update_default_ril_request_dtmf_start();
  dtmf->dtmf = "2";
  t.inject(RIL_node);

  // Inject: RIL_REQUEST_DTMF_STOP
  RIL_node.update_default_ril_request_dtmf_stop();
  t.inject(RIL_node);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_START (resp)
  RIL_node.update_default_ril_request_dtmf_start_resp();
  t.expect(RIL_node);




  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '2');
  t.expect(QMI_node);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_START (resp)
  RIL_node.update_default_ril_request_dtmf_start_resp();
  t.expect(RIL_node);







  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_STOP (resp)
  RIL_node.update_default_ril_request_dtmf_stop_resp();
  t.expect(RIL_node);






  // Inject: RIL_REQUEST_DTMF_STOP
  RIL_node.update_default_ril_request_dtmf_stop();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DTMF_STOP (resp)
  RIL_node.update_default_ril_request_dtmf_stop_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_supp_srv_notify_001
@description: MO call wth supp srv notify indication
==**/
test_result ril_utf_test_supp_srv_notify_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("MO CS call with DTMF");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mo_call_active(t, RIL_node, QMI_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_UNCOND_CALL_FORWARD_ACTIVE_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  RIL_SuppSvcNotification *suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;  // MO
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_UNCOND_FWD_ACTIVE;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_COND_CALL_FORWARD_ACTIVE_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;  // MO
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_COND_FWD_ACTIVE;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CALL_IS_FORWARDED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;  // MO
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_CALL_FORWARDED;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CALL_IS_WAITING_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;  // MO
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_CALL_WAITING;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CALLS_BARRED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;  // MO
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_OUTGOING_CALLS_BARRED;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALLS_BARRED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;  // MO
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_INCOMING_CALLS_BARRED;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CLIR_SUPPRSESION_REJECTED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;  // MO
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_CLIR_SUPPRESSION_REJ;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CALL_IS_DEFLECTED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;  // MO
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_CALL_DEFLECTED;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CUG_CALL_V02);
  QMI_node.set_qmi_voice_sups_notification_ind_index(1);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 0;
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSI_CUG_CALL;
  suppSvc->index = 1;
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_supp_srv_notify_002
@description: MT call wth supp srv notify indication
==**/
test_result ril_utf_test_supp_srv_notify_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_FORWARDED_CALL_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  RIL_SuppSvcNotification *suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_FORWARDED_CALL;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CUG_CALL_V02);
  QMI_node.set_qmi_voice_sups_notification_ind_index(10);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_CUG_CALL;
  suppSvc->index = 10;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CALL_IS_ON_HOLD_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_CALL_HOLD;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CALL_IS_RETRIEVED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_CALL_RETRIEVED;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALL_IS_FORWARDED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_ADDITIONAL_INCOM_CALL_FWD;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALL_IS_ECT_V02);
  voice_ect_number_type_v02* ect_number = QMI_node.set_qmi_voice_sups_notification_ind_ect_number();
  ect_number->ect_call_state = ECT_CALL_STATE_ALERTING_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_ECT_CALL_REMOTE_PTY_ALERT;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALL_IS_ECT_V02);
  ect_number = QMI_node.set_qmi_voice_sups_notification_ind_ect_number();
  ect_number->ect_call_state = ECT_CALL_STATE_ACTIVE_V02;
  ect_number->number_len = strlen("9876543210");
  strlcpy(ect_number->number, "9876543210", strlen("9876543210")+1);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_ECT_CALL_REMOTE_PTY_CONNECTED;
  suppSvc->number = strdup("9876543210");
  suppSvc->type = QCRIL_QMI_VOICE_SS_TA_UNKNOWN;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALL_IS_ECT_V02);
  ect_number = QMI_node.set_qmi_voice_sups_notification_ind_ect_number();
  ect_number->ect_call_state = ECT_CALL_STATE_ACTIVE_V02;
  ect_number->number_len = strlen("+919876543210");
  strlcpy(ect_number->number, "+919876543210", strlen("+919876543210")+1);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_ECT_CALL_REMOTE_PTY_CONNECTED;
  suppSvc->number = strdup("919876543210");
  suppSvc->type = QCRIL_QMI_VOICE_SS_TA_INTERNATIONAL;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_DEFLECTED_CALL_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_DEFLECTED_CALL;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CALL_IS_IN_MPTY_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_SUPP_SVC_NOTIFICATION
  suppSvc = RIL_node.update_default_ril_unsol_supp_svc_notification();
  suppSvc->notificationType = 1;  // MT
  suppSvc->code = QCRIL_QMI_VOICE_SS_CSSU_MPTY_CALL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_voice_privacy_001
@description: MT call wth voice privacy ind
==**/
test_result ril_utf_test_voice_privacy_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Inject: QMI_VOICE_PRIVACY_IND_V02
  QMI_node.update_default_qmi_voice_privacy_ind_msg(1, VOICE_PRIVACY_STANDARD_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isVoicePrivacy = 0;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_PRIVACY_IND_V02
  QMI_node.update_default_qmi_voice_privacy_ind_msg(1, VOICE_PRIVACY_ENHANCED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isVoicePrivacy = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_uus_info_ind_001
@description: MT call wth UUS INFO ind
==**/
test_result ril_utf_test_uus_info_ind_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Inject: QMI_VOICE_UUS_IND_V02
  voice_uus_info_type_v02 *uus_info = QMI_node.update_default_qmi_voice_uus_ind_msg();
  uus_info->call_id = 1;
  uus_info->uus_type = UUS_TYPE_DATA_V02;
  uus_info->uus_dcs = UUS_DCS_USP_V02;
  uus_info->uus_data_len = 5;
  uus_info->uus_data[0] = '1';
  uus_info->uus_data[1] = '2';
  uus_info->uus_data[2] = '3';
  uus_info->uus_data[3] = '3';
  uus_info->uus_data[4] = '5';
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isVoicePrivacy = 0;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_explicit_call_transfer_001
@description: explicit call transfer
==**/
test_result ril_utf_test_explicit_call_transfer_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Second call begins here


  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("4428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_ALERTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "4428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Failure case

  // Inject: RIL_REQUEST_EXPLICIT_CALL_TRANSFER
  RIL_node.update_default_ril_request_explicit_call_transfer();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_EXPLICIT_CALL_TRANSFER_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_EXPLICIT_CALL_TRANSFER (resp)
  RIL_node.update_default_ril_request_explicit_call_transfer_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);


  // Success case

  // Inject: RIL_REQUEST_EXPLICIT_CALL_TRANSFER
  RIL_node.update_default_ril_request_explicit_call_transfer();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_EXPLICIT_CALL_TRANSFER_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_EXPLICIT_CALL_TRANSFER (resp)
  RIL_node.update_default_ril_request_explicit_call_transfer_resp();
  t.expect(RIL_node);



  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("4428536960");
  strlcpy(number_list[1].number, "4428536960", strlen("4428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
util_voice_call_dial_and_end_ind
@description: Utility functions for DIAL request and call END indication.
==**/
void util_voice_call_dial_and_end_ind(Testcase &t, call_end_reason_enum_v02 qmi_end_reason,
    RIL_LastCallFailCause ril_end_reason, std::string vendor_cause)
{
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = qmi_end_reason;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = ril_end_reason;
  fail_cause->vendor_cause = (char *)malloc(vendor_cause.size()+1);
  strlcpy(fail_cause->vendor_cause, vendor_cause.c_str(), vendor_cause.size()+1);
  t.expect(RIL_node);
}

/**==
@testname: ril_utf_test_last_call_failcause
@description: Last call failcause with vendor_cause string
==**/
test_result ril_utf_test_last_call_failcause(user_specified_attrib_t attr)
{
  Testcase t;

  t.set_test_id(__func__);
  t.set_test_description("Last call failcause with vendor_cause string");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  std::unordered_map<call_end_reason_enum_v02, std::pair<RIL_LastCallFailCause, std::string>> callEndReasonMap = {
    { CALL_END_CAUSE_CLIENT_END_V02,
      std::make_pair(CALL_FAIL_NORMAL, "Normal call clearing; Client ended the call") },
    { CALL_END_CAUSE_REL_NORMAL_V02, std::make_pair(CALL_FAIL_NORMAL, "Normal call clearing") },
    { CALL_END_CAUSE_NETWORK_END_V02, std::make_pair(CALL_FAIL_NORMAL, "Normal call clearing") },
    { CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02,
      std::make_pair(CALL_FAIL_NORMAL, "Normal call clearing") },
    { CALL_END_CAUSE_RINGING_RINGBACK_TIMEOUT_V02,
      std::make_pair(CALL_FAIL_NORMAL, "Call terminated due to ringing/ringback timeout") },
    { CALL_END_CAUSE_IMSI_UNKNOWN_IN_VLR_V02,
      std::make_pair(CALL_FAIL_IMSI_UNKNOWN_IN_VLR, "IMSI unknown in VLR") },
    { CALL_END_CAUSE_IMEI_NOT_ACCEPTED_V02,
      std::make_pair(CALL_FAIL_IMEI_NOT_ACCEPTED, "IMEI not accepted") },
    { CALL_END_CAUSE_INCOM_REJ_V02,
      std::make_pair(CALL_FAIL_BUSY, "User busy; client rejected incoming call") },
    { CALL_END_CAUSE_SETUP_REJ_V02,
      std::make_pair(CALL_FAIL_BUSY, "User busy; client rejected setup indication") },
    { CALL_END_CAUSE_USER_BUSY_V02, std::make_pair(CALL_FAIL_BUSY, "User busy") },
    { CALL_END_CAUSE_USSD_BUSY_V02, std::make_pair(CALL_FAIL_BUSY, "User busy") },
    { CALL_END_CAUSE_REJECTED_BY_USER_V02, std::make_pair(CALL_FAIL_BUSY, "User busy") },
    { CALL_END_CAUSE_MAX_PS_CALLS_V02,
      std::make_pair(CALL_FAIL_ERROR_UNSPECIFIED,
                     "Resources are not available to handle new MO/MT PS call") },
    { CALL_END_CAUSE_HOLD_RESUME_FAILED_V02,
      std::make_pair(CALL_FAIL_ERROR_UNSPECIFIED, "Resume failed") },
    { CALL_END_CAUSE_HOLD_RESUME_CANCELED_V02,
      std::make_pair(CALL_FAIL_ERROR_UNSPECIFIED, "Resume canceled") },
    { CALL_END_CAUSE_REINVITE_COLLISION_V02,
      std::make_pair(CALL_FAIL_ERROR_UNSPECIFIED, "Re-invite collision") },
    { CALL_END_CAUSE_NETWORK_CONGESTION_V02,
      std::make_pair(CALL_FAIL_CONGESTION, "No circuit/channel available") },
    { CALL_END_CAUSE_RESOURCES_NOT_AVAILABLE_V02,
      std::make_pair(CALL_FAIL_CONGESTION, "No circuit/channel available") },
    { CALL_END_CAUSE_NO_RESOURCES_V02,
      std::make_pair(CALL_FAIL_CONGESTION, "No circuit/channel available") },
    { CALL_END_CAUSE_NO_CIRCUIT_OR_CHANNEL_AVAILABLE_V02,
      std::make_pair(CALL_FAIL_CONGESTION, "No circuit/channel available") },
    { CALL_END_CAUSE_NO_FUNDS_V02,
      std::make_pair(CALL_FAIL_ACM_LIMIT_EXCEEDED, "ACM limit exceeded, no funds") },
    { CALL_END_CAUSE_ACM_LIMIT_EXCEEDED_V02,
      std::make_pair(CALL_FAIL_ACM_LIMIT_EXCEEDED, "ACM equal to or greater than ACMmax") },
    { CALL_END_CAUSE_CDMA_LOCK_V02,
      std::make_pair(CALL_FAIL_CDMA_LOCKED_UNTIL_POWER_CYCLE, "CDMA locked") },
    { CALL_END_CAUSE_INTERCEPT_V02, std::make_pair(CALL_FAIL_CDMA_INTERCEPT, "CDMA intercept") },
    { CALL_END_CAUSE_1XCSFB_FAIL_CALL_REL_INTERCEPT_ORDER_V02,
      std::make_pair(CALL_FAIL_CDMA_INTERCEPT, "CDMA intercept") },
    { CALL_END_CAUSE_REORDER_V02, std::make_pair(CALL_FAIL_CDMA_REORDER, "CDMA reorder") },
    { CALL_END_CAUSE_1XCSFB_FAIL_CALL_REL_REORDER_V02,
      std::make_pair(CALL_FAIL_CDMA_REORDER, "CDMA reorder") },
    { CALL_END_CAUSE_REL_SO_REJ_V02, std::make_pair(CALL_FAIL_CDMA_SO_REJECT, "CDMA so reject") },
    { CALL_END_CAUSE_1XCSFB_FAIL_CALL_REL_SO_REJ_V02,
      std::make_pair(CALL_FAIL_CDMA_SO_REJECT, "CDMA so reject") },
    { CALL_END_CAUSE_RETRY_ORDER_V02,
      std::make_pair(CALL_FAIL_CDMA_RETRY_ORDER, "CDMA retry order") },
    { CALL_END_CAUSE_ACC_FAIL_V02,
      std::make_pair(CALL_FAIL_CDMA_ACCESS_FAILURE, "CDMA access failure") },
    { CALL_END_CAUSE_IS707B_MAX_ACC_V02,
      std::make_pair(CALL_FAIL_CDMA_ACCESS_FAILURE, "CDMA access failure") },
    { CALL_END_CAUSE_MAX_ACCESS_PROBE_V02,
      std::make_pair(CALL_FAIL_CDMA_ACCESS_FAILURE,
                     "CDMA access failure; Maximum access probes transmitted") },
    { CALL_END_CAUSE_INCOM_CALL_V02, std::make_pair(CALL_FAIL_CDMA_PREEMPTED, "CDMA preemted") },
    { CALL_END_CAUSE_EMERGENCY_FLASHED_V02,
      std::make_pair(CALL_FAIL_CDMA_NOT_EMERGENCY, "CDMA not emergency") },
    { CALL_END_CAUSE_ACCESS_BLOCK_ALL_V02,
      std::make_pair(CALL_FAIL_CDMA_ACCESS_BLOCKED, "CDMA access blocked") },
    { CALL_END_CAUSE_ACCESS_BLOCK_V02,
      std::make_pair(CALL_FAIL_CDMA_ACCESS_BLOCKED, "CDMA access blocked") },
    { CALL_END_CAUSE_PSIST_N_V02, std::make_pair(CALL_FAIL_CDMA_ACCESS_BLOCKED,
                                                 "CDMA access blocked; Persistence test failure") },
    { CALL_END_CAUSE_UNASSIGNED_NUMBER_V02,
      std::make_pair(CALL_FAIL_UNOBTAINABLE_NUMBER, "Unassigned (unallocated) number") },
    { CALL_END_CAUSE_PROTOCOL_Q850_ERROR_V02,
      std::make_pair(CALL_FAIL_ERROR_UNSPECIFIED, "Sip Q850 error") },
    { CALL_END_CAUSE_PEER_NOT_REACHABLE_V02,
      std::make_pair(CALL_FAIL_SUBSCRIBER_ABSENT, "Peer not reachable") },
    { CALL_END_CAUSE_NO_ROUTE_TO_DESTINATION_V02,
      std::make_pair(CALL_FAIL_NO_ROUTE_TO_DESTINATION, "No route to destination") },
    { CALL_END_CAUSE_CHANNEL_UNACCEPTABLE_V02,
      std::make_pair(CALL_FAIL_CHANNEL_UNACCEPTABLE, "Channel unacceptable") },
    { CALL_END_CAUSE_OPERATOR_DETERMINED_BARRING_V02,
      std::make_pair(CALL_FAIL_OPERATOR_DETERMINED_BARRING, "Operator determined Barring") },
    { CALL_END_CAUSE_NO_USER_RESPONDING_V02,
      std::make_pair(CALL_FAIL_NO_USER_RESPONDING, "No user responding") },
    { CALL_END_CAUSE_USER_ALERTING_NO_ANSWER_V02,
      std::make_pair(CALL_FAIL_NO_ANSWER_FROM_USER, "User alerting, no answer") },
    { CALL_END_CAUSE_CALL_REJECTED_V02, std::make_pair(CALL_FAIL_CALL_REJECTED, "Call rejected") },
    { CALL_END_CAUSE_NUMBER_CHANGED_V02,
      std::make_pair(CALL_FAIL_NUMBER_CHANGED, "Number changed") },
    { CALL_END_CAUSE_PREEMPTION_V02, std::make_pair(CALL_FAIL_PREEMPTION, "Pre-emption") },
    { CALL_END_CAUSE_DESTINATION_OUT_OF_ORDER_V02,
      std::make_pair(CALL_FAIL_DESTINATION_OUT_OF_ORDER, "Destination out of order") },
    { CALL_END_CAUSE_INVALID_NUMBER_FORMAT_V02,
      std::make_pair(CALL_FAIL_INVALID_NUMBER_FORMAT,
                     "Invalid number format (incomplete number)") },
    { CALL_END_CAUSE_FACILITY_REJECTED_V02,
      std::make_pair(CALL_FAIL_FACILITY_REJECTED, "Facility rejected") },
    { CALL_END_CAUSE_RESP_TO_STATUS_ENQUIRY_V02,
      std::make_pair(CALL_FAIL_RESP_TO_STATUS_ENQUIRY, "Response to STATUS ENQUIRY") },
    { CALL_END_CAUSE_NORMAL_UNSPECIFIED_V02,
      std::make_pair(CALL_FAIL_NORMAL_UNSPECIFIED, "Normal, unspecified") },
    { CALL_END_CAUSE_NETWORK_OUT_OF_ORDER_V02,
      std::make_pair(CALL_FAIL_NETWORK_OUT_OF_ORDER, "Network out of order") },
    { CALL_END_CAUSE_SERVICE_TEMPORARILY_OUT_OF_ORDER_V02,
      std::make_pair(CALL_FAIL_NETWORK_OUT_OF_ORDER, "Network out of order") },
    { CALL_END_CAUSE_TEMPORARY_FAILURE_V02,
      std::make_pair(CALL_FAIL_TEMPORARY_FAILURE, "Temporary failure") },
    { CALL_END_CAUSE_SWITCHING_EQUIPMENT_CONGESTION_V02,
      std::make_pair(CALL_FAIL_SWITCHING_EQUIPMENT_CONGESTION, "Switching equipment congestion") },
    { CALL_END_CAUSE_ACCESS_INFORMATION_DISCARDED_V02,
      std::make_pair(CALL_FAIL_ACCESS_INFORMATION_DISCARDED, "Access information discarded") },
    { CALL_END_CAUSE_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE_V02,
      std::make_pair(CALL_FAIL_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE,
                     "Requested circuit/channel not available") },
    { CALL_END_CAUSE_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED_V02,
      std::make_pair(CALL_FAIL_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED,
                     "Resource unavailable, unspecified") },
    { CALL_END_CAUSE_QOS_UNAVAILABLE_V02,
      std::make_pair(CALL_FAIL_QOS_UNAVAILABLE, "Quality of service unavailable") },
    { CALL_END_CAUSE_REQUESTED_FACILITY_NOT_SUBSCRIBED_V02,
      std::make_pair(CALL_FAIL_REQUESTED_FACILITY_NOT_SUBSCRIBED,
                     "Requested facility not subscribed") },
    { CALL_END_CAUSE_INCOMING_CALLS_BARRED_WITHIN_CUG_V02,
      std::make_pair(CALL_FAIL_INCOMING_CALLS_BARRED_WITHIN_CUG,
                     "Incoming calls barred within the CUG") },
    { CALL_END_CAUSE_BEARER_CAPABILITY_NOT_AUTH_V02,
      std::make_pair(CALL_FAIL_BEARER_CAPABILITY_NOT_AUTHORIZED,
                     "Bearer capability not authorized") },
    { CALL_END_CAUSE_BEARER_CAPABILITY_UNAVAILABLE_V02,
      std::make_pair(CALL_FAIL_BEARER_CAPABILITY_UNAVAILABLE,
                     "Bearer capability not presently available") },
    { CALL_END_CAUSE_SERVICE_OPTION_NOT_AVAILABLE_V02,
      std::make_pair(CALL_FAIL_SERVICE_OPTION_NOT_AVAILABLE,
                     "Service or option not available, unspecified") },
    { CALL_END_CAUSE_BEARER_SERVICE_NOT_IMPLEMENTED_V02,
      std::make_pair(CALL_FAIL_BEARER_SERVICE_NOT_IMPLEMENTED, "Bearer service not implemented") },
    { CALL_END_CAUSE_REQUESTED_FACILITY_NOT_IMPLEMENTED_V02,
      std::make_pair(CALL_FAIL_REQUESTED_FACILITY_NOT_IMPLEMENTED,
                     "Requested facility not implemented") },
    { CALL_END_CAUSE_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE_V02,
      std::make_pair(CALL_FAIL_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE,
                     "Only restricted digital information bearer capability is available") },
    { CALL_END_CAUSE_SERVICE_OR_OPTION_NOT_IMPLEMENTED_V02,
      std::make_pair(CALL_FAIL_SERVICE_OR_OPTION_NOT_IMPLEMENTED,
                     "Service or option not implemented, unspecified") },
    { CALL_END_CAUSE_INVALID_TRANSACTION_IDENTIFIER_V02,
      std::make_pair(CALL_FAIL_INVALID_TRANSACTION_IDENTIFIER,
                     "Invalid transaction identifier value") },
    { CALL_END_CAUSE_USER_NOT_MEMBER_OF_CUG_V02,
      std::make_pair(CALL_FAIL_USER_NOT_MEMBER_OF_CUG, "User not member of CUG") },
    { CALL_END_CAUSE_INCOMPATIBLE_DESTINATION_V02,
      std::make_pair(CALL_FAIL_INCOMPATIBLE_DESTINATION, "Incompatible destination") },
    { CALL_END_CAUSE_INVALID_TRANSIT_NW_SELECTION_V02,
      std::make_pair(CALL_FAIL_INVALID_TRANSIT_NW_SELECTION, "Invalid transit network selection") },
    { CALL_END_CAUSE_SEMANTICALLY_INCORRECT_MESSAGE_V02,
      std::make_pair(CALL_FAIL_SEMANTICALLY_INCORRECT_MESSAGE, "Semantically incorrect message") },
    { CALL_END_CAUSE_INVALID_MANDATORY_INFORMATION_V02,
      std::make_pair(CALL_FAIL_INVALID_MANDATORY_INFORMATION, "Invalid mandatory information") },
    { CALL_END_CAUSE_MESSAGE_TYPE_NON_IMPLEMENTED_V02,
      std::make_pair(CALL_FAIL_MESSAGE_TYPE_NON_IMPLEMENTED,
                     "Message type non-existent or not implemented") },
    { CALL_END_CAUSE_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE_V02,
      std::make_pair(CALL_FAIL_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE,
                     "Message type not compatible with protocol state") },
    { CALL_END_CAUSE_INFORMATION_ELEMENT_NON_EXISTENT_V02,
      std::make_pair(CALL_FAIL_INFORMATION_ELEMENT_NON_EXISTENT,
                     "Information element non-existent or not implemented") },
    { CALL_END_CAUSE_CONDITONAL_IE_ERROR_V02,
      std::make_pair(CALL_FAIL_CONDITIONAL_IE_ERROR, "Conditional IE error") },
    { CALL_END_CAUSE_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE_V02,
      std::make_pair(CALL_FAIL_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE,
                     "Message not compatible with protocol state") },
    { CALL_END_CAUSE_RECOVERY_ON_TIMER_EXPIRED_V02,
      std::make_pair(CALL_FAIL_RECOVERY_ON_TIMER_EXPIRED, "Recovery on timer expiry") },
    { CALL_END_CAUSE_PROTOCOL_ERROR_UNSPECIFIED_V02,
      std::make_pair(CALL_FAIL_PROTOCOL_ERROR_UNSPECIFIED, "Protocol error, unspecified") },
    { CALL_END_CAUSE_INTERWORKING_UNSPECIFIED_V02,
      std::make_pair(CALL_FAIL_INTERWORKING_UNSPECIFIED, "Interworking, unspecified") },
    { CALL_END_CAUSE_TEMP_REDIAL_ALLOWED_V02,
      std::make_pair(static_cast<RIL_LastCallFailCause>(325),
                     "Temp redial allowed") },  // EMERGENCY_TEMP_FAILURE = 325,
    { CALL_END_CAUSE_PERM_REDIAL_NOT_NEEDED_V02,
      std::make_pair(static_cast<RIL_LastCallFailCause>(326),
                     "Perm redial not needed") },  // EMERGENCY_PERM_FAILURE = 326,
    { CALL_END_CAUSE_OFFLINE_V02, std::make_pair(CALL_FAIL_RADIO_OFF, "Radio is offline") },
    { CALL_END_CAUSE_NO_SRV_V02,
      std::make_pair(CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_NO_GW_SRV_V02,
      std::make_pair(CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_NO_FULL_SRV_V02,
      std::make_pair(CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_NO_CDMA_SRV_V02,
      std::make_pair(CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_NO_CELL_AVAILABLE_V02,
      std::make_pair(CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_NOT_CAMPED_V02,
      std::make_pair(CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_UIM_NOT_PRESENT_V02,
      std::make_pair(CALL_FAIL_NO_VALID_SIM, "No valid SIM present") },
    { CALL_END_CAUSE_INVALID_SIM_V02,
      std::make_pair(CALL_FAIL_NO_VALID_SIM, "No valid SIM present") },
    { CALL_END_CAUSE_INCOMPATIBLE_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ALREADY_IN_TC_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_USER_CALL_ORIG_DURING_GPS_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_USER_CALL_ORIG_DURING_SMS_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_USER_CALL_ORIG_DURING_DATA_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_TRM_REQ_FAIL_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_CALL_CANNOT_BE_IDENTIFIED_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_INCORRECT_SEMANTICS_IN_MESSAGE_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_MANDATORY_INFORMATION_INVALID_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_WRONG_STATE_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_INVALID_USER_DATA_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_CNM_MM_REL_PENDING_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_FAIL_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_FAIL_REDIAL_NOT_ALLOWED_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_IMMED_RETRY_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_ABORT_RADIO_UNAVAILABLE_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_THERMAL_EMERGENCY_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_INTERNAL_ERROR_V02,
      std::make_pair(CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_CCS_NOT_SUPPORTED_BY_BS_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_REJECTED_BY_BS_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ACC_FAIL_REJ_ORD_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ACC_FAIL_RETRY_ORD_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_UNKNOWN_SUBSCRIBER_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_SUBSCRIBER_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_BEARER_SERVICE_NOT_PROVISIONED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_TELE_SERVICE_NOT_PROVISIONED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_EQUIPMENT_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_SS_OPERATION_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SS_ERROR_STATUS_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SS_NOT_AVAILABLE_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SS_SUBSCRIPTION_VIOLATION_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SS_INCOMPATIBILITY_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_FACILITY_NOT_SUPPORTED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ABSENT_SUBSCRIBER_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SHORT_TERM_DENIAL_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_LONG_TERM_DENIAL_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SYSTEM_FAILURE_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_REJECTED_BY_NETWORK_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_IMSI_UNKNOWN_IN_HLR_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_MS_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_ME_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_PLMN_NOT_ALLOWED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_LOCATION_AREA_NOT_ALLOWED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ROAMING_NOT_ALLOWED_IN_THIS_LOCATION_AREA_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_NO_SUITABLE_CELLS_IN_LOCATION_AREA_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_NETWORK_FAILURE_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_MAC_FAILURE_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SYNCH_FAILURE_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_GSM_AUTHENTICATION_UNACCEPTABLE_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SERVICE_NOT_SUBSCRIBED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ABORT_MSG_RECEIVED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SERVICE_OPTION_NOT_SUPPORTED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_CONN_REJECT_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_UNAUTHORIZED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_PAYMENT_REQUIRED_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_EMM_REJ_SERVICE_REQ_FAILURE_LTE_NW_REJECT_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_EMM_REJ_SERVICE_REQ_FAILURE_CS_DOMAIN_NOT_AVAILABLE_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_EMM_REJ_V02,
      std::make_pair(CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_NO_RESPONSE_FROM_BS_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMEOUT_T42_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMEOUT_T40_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_T50_EXP_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_T51_EXP_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_RL_ACK_TIMEOUT_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_BAD_FL_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMEOUT_T41_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMER_T3230_EXPIRED_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMER_T303_EXPIRED_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_MT_CSFB_NO_RESPONSE_FROM_NW_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_EMM_REJ_TIMER_T3417_EXT_EXP_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_EMM_REJ_TIMER_T3417_EXP_V02,
      std::make_pair(CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_CALL_BARRED_V02, std::make_pair(CALL_FAIL_CALL_BARRED, "Call is barred") },
    { CALL_END_CAUSE_ACCESS_STRATUM_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_ACCESS_FAILURE, "Radio access failure") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RR_RANDOM_ACCESS_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_ACCESS_FAILURE, "Radio access failure") },
    { CALL_END_CAUSE_ESR_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_ACCESS_FAILURE, "Radio access failure") },
    { CALL_END_CAUSE_CS_ACQ_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_ACCESS_FAILURE, "Radio access failure") },
    { CALL_END_CAUSE_ACCESS_CLASS_BLOCKED_V02,
      std::make_pair(CALL_FAIL_ACCESS_CLASS_BLOCKED, "Access class blocked") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_ACCESS_BARRED_V02,
      std::make_pair(CALL_FAIL_ACCESS_CLASS_BLOCKED, "Access class blocked") },
    { CALL_END_CAUSE_SSAC_REJECT_V02,
      std::make_pair(CALL_FAIL_ACCESS_CLASS_BLOCKED, "Access class blocked") },
    { CALL_END_CAUSE_FADE_V02, std::make_pair(CALL_FAIL_RADIO_LINK_LOST, "Radio link lost") },
    { CALL_END_CAUSE_RADIO_LINK_LOST_V02,
      std::make_pair(CALL_FAIL_RADIO_LINK_LOST, "Radio link lost") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RR_REL_IND_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_NORMAL, "RRC connection release, normal") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RRC_REL_IND_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_NORMAL, "RRC connection release, normal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_NORMAL_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_NORMAL, "RRC connection release, normal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_OOS_DURING_CRE_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_NORMAL, "RRC connection release, normal") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RRC_CLOSE_SESSION_IND_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RRC_OPEN_SESSION_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_CRE_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_ABORTED_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_SIB_READ_ERROR_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_ABORTED_IRAT_SUCCESS_V02,
      std::make_pair(CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_TXN_V02,
      std::make_pair(CALL_FAIL_RADIO_UPLINK_FAILURE, "Radio uplink failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_HO_V02,
      std::make_pair(CALL_FAIL_RADIO_UPLINK_FAILURE, "Radio uplink failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_CONN_REL_V02,
      std::make_pair(CALL_FAIL_RADIO_UPLINK_FAILURE, "Radio uplink failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_CTRL_NOT_CONN_V02,
      std::make_pair(CALL_FAIL_RADIO_UPLINK_FAILURE, "Radio uplink failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_RLF_V02,
      std::make_pair(CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_LINK_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_RLF_V02,
      std::make_pair(CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_RADIO_LINK_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_CONNECTION_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_RLF_DURING_CC_DISCONNECT_V02,
      std::make_pair(CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_ABORTED_V02,
      std::make_pair(CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_CELL_RESEL_V02,
      std::make_pair(CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_CONFIG_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_TIMER_EXPIRED_V02,
      std::make_pair(CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_SI_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_CONNECTION_EST_FAILURE_V02,
      std::make_pair(CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_DETACH_WITH_REATTACH_LTE_NW_DETACH_V02,
      std::make_pair(CALL_FAIL_NETWORK_DETACH, "Explicit Network Detach") },
    { CALL_END_CAUSE_AS_REJ_DETACH_WITH_OUT_REATTACH_LTE_NW_DETACH_V02,
      std::make_pair(CALL_FAIL_NETWORK_DETACH, "Explicit Network Detach") },
    { CALL_END_CAUSE_PDN_DISCONNECTED_V02,
      std::make_pair(CALL_FAIL_NETWORK_DETACH, "Explicit Network Detach") },
  };

  for (int qmi_end_reason = CALL_END_CAUSE_OFFLINE_V02;
       qmi_end_reason <= CALL_END_CAUSE_RETRY_ON_IMS_WITHOUT_RTT_V02; qmi_end_reason++) {
    auto search = callEndReasonMap.find(static_cast<call_end_reason_enum_v02>(qmi_end_reason));
    if (search != callEndReasonMap.end()) {
      util_voice_call_dial_and_end_ind(t,
          search->first,
          search->second.first,
          search->second.second);
    }
  }

  t.execute();
  t.print_summary();
  return t.get_test_result();
}

/**==
util_volte_call_dial_and_end_ind
@description: Utility functions for VoLTE DIAL request and call END indication.
==**/
void util_volte_call_dial_and_end_ind(Testcase &t,
                                      call_end_reason_enum_v02 qmi_end_reason,
                                      ims_CallFailCause callFailCause)
{
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = true;
  ptr->clir = 2;  // CLIR_SUPPRESSION
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_SUPPRESSION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = qmi_end_reason;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = callFailCause;
  t.expect(IMS_node);
}

/**==
@testname: ril_utf_ims_call_fail_cause
@description: Verify IMS call failcauses
==**/
test_result ril_utf_ims_call_fail_cause(user_specified_attrib_t attr)
{
  Testcase t;

  t.set_test_id(__func__);
  t.set_test_description("Verify IMS call failcauses");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  std::unordered_map<call_end_reason_enum_v02, std::pair<ims_CallFailCause, std::string>> callEndReasonMap = {
    { CALL_END_CAUSE_CLIENT_END_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NORMAL, "Normal call clearing; Client ended the call") },
    { CALL_END_CAUSE_REL_NORMAL_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_NORMAL, "Normal call clearing") },
    { CALL_END_CAUSE_NETWORK_END_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_NORMAL, "Normal call clearing") },
    { CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NORMAL, "Normal call clearing") },
    { CALL_END_CAUSE_RINGING_RINGBACK_TIMEOUT_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NORMAL, "Call terminated due to ringing/ringback timeout") },
//    { CALL_END_CAUSE_IMSI_UNKNOWN_IN_VLR_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_IMSI_UNKNOWN_IN_VLR, "IMSI unknown in VLR") },
    { CALL_END_CAUSE_IMEI_NOT_ACCEPTED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_IMEI_NOT_ACCEPTED, "IMEI not accepted") },
    { CALL_END_CAUSE_INCOM_REJ_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_BUSY, "User busy; client rejected incoming call") },
    { CALL_END_CAUSE_SETUP_REJ_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_BUSY, "User busy; client rejected setup indication") },
//    { CALL_END_CAUSE_USER_BUSY_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_SIP_BUSY, "User busy") },
    { CALL_END_CAUSE_USSD_BUSY_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_BUSY, "User busy") },
    { CALL_END_CAUSE_REJECTED_BY_USER_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_BUSY, "User busy") },
    { CALL_END_CAUSE_MAX_PS_CALLS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED,
                     "Resources are not available to handle new MO/MT PS call") },
#if 0
    { CALL_END_CAUSE_HOLD_RESUME_FAILED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED, "Resume failed") },
    { CALL_END_CAUSE_HOLD_RESUME_CANCELED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED, "Resume canceled") },
    { CALL_END_CAUSE_REINVITE_COLLISION_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED, "Re-invite collision") },
#endif
    { CALL_END_CAUSE_NETWORK_CONGESTION_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_CONGESTION, "No circuit/channel available") },
    { CALL_END_CAUSE_RESOURCES_NOT_AVAILABLE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_CONGESTION, "No circuit/channel available") },
    { CALL_END_CAUSE_NO_RESOURCES_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_CONGESTION, "No circuit/channel available") },
    { CALL_END_CAUSE_NO_CIRCUIT_OR_CHANNEL_AVAILABLE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_CONGESTION, "No circuit/channel available") },
//    { CALL_END_CAUSE_NO_FUNDS_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_ACM_LIMIT_EXCEEDED, "ACM limit exceeded, no funds") },
//    { CALL_END_CAUSE_ACM_LIMIT_EXCEEDED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_ACM_LIMIT_EXCEEDED, "ACM equal to or greater than ACMmax") },
//    { CALL_END_CAUSE_CDMA_LOCK_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_LOCKED_UNTIL_POWER_CYCLE, "CDMA locked") },
//    { CALL_END_CAUSE_INTERCEPT_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_INTERCEPT, "CDMA intercept") },
//    { CALL_END_CAUSE_1XCSFB_FAIL_CALL_REL_INTERCEPT_ORDER_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_INTERCEPT, "CDMA intercept") },
//    { CALL_END_CAUSE_REORDER_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_REORDER, "CDMA reorder") },
//    { CALL_END_CAUSE_1XCSFB_FAIL_CALL_REL_REORDER_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_REORDER, "CDMA reorder") },
//    { CALL_END_CAUSE_REL_SO_REJ_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_SO_REJECT, "CDMA so reject") },
//    { CALL_END_CAUSE_1XCSFB_FAIL_CALL_REL_SO_REJ_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_SO_REJECT, "CDMA so reject") },
//    { CALL_END_CAUSE_RETRY_ORDER_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_RETRY_ORDER, "CDMA retry order") },
//    { CALL_END_CAUSE_ACC_FAIL_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_ACCESS_FAILURE, "CDMA access failure") },
//    { CALL_END_CAUSE_IS707B_MAX_ACC_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_ACCESS_FAILURE, "CDMA access failure") },
//    { CALL_END_CAUSE_MAX_ACCESS_PROBE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_ACCESS_FAILURE,
//                     "CDMA access failure; Maximum access probes transmitted") },
//    { CALL_END_CAUSE_INCOM_CALL_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_PREEMPTED, "CDMA preemted") },
//    { CALL_END_CAUSE_EMERGENCY_FLASHED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_NOT_EMERGENCY, "CDMA not emergency") },
//    { CALL_END_CAUSE_ACCESS_BLOCK_ALL_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_ACCESS_BLOCKED, "CDMA access blocked") },
//    { CALL_END_CAUSE_ACCESS_BLOCK_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_ACCESS_BLOCKED, "CDMA access blocked") },
//    { CALL_END_CAUSE_PSIST_N_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_CDMA_ACCESS_BLOCKED,
//                                                 "CDMA access blocked; Persistence test failure") },
    { CALL_END_CAUSE_UNASSIGNED_NUMBER_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_UNOBTAINABLE_NUMBER, "Unassigned (unallocated) number") },
    { CALL_END_CAUSE_PROTOCOL_Q850_ERROR_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED, "Sip Q850 error") },
//    { CALL_END_CAUSE_PEER_NOT_REACHABLE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_SUBSCRIBER_ABSENT, "Peer not reachable") },
//    { CALL_END_CAUSE_NO_ROUTE_TO_DESTINATION_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_NO_ROUTE_TO_DESTINATION, "No route to destination") },
//    { CALL_END_CAUSE_CHANNEL_UNACCEPTABLE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CHANNEL_UNACCEPTABLE, "Channel unacceptable") },
//    { CALL_END_CAUSE_OPERATOR_DETERMINED_BARRING_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_OPERATOR_DETERMINED_BARRING, "Operator determined Barring") },
//    { CALL_END_CAUSE_NO_USER_RESPONDING_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_NO_USER_RESPONDING, "No user responding") },
//    { CALL_END_CAUSE_USER_ALERTING_NO_ANSWER_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_NO_ANSWER_FROM_USER, "User alerting, no answer") },
//    { CALL_END_CAUSE_CALL_REJECTED_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_CALL_REJECTED, "Call rejected") },
//    { CALL_END_CAUSE_NUMBER_CHANGED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_NUMBER_CHANGED, "Number changed") },
//    { CALL_END_CAUSE_PREEMPTION_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_PREEMPTION, "Pre-emption") },
//    { CALL_END_CAUSE_DESTINATION_OUT_OF_ORDER_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_DESTINATION_OUT_OF_ORDER, "Destination out of order") },
//    { CALL_END_CAUSE_INVALID_NUMBER_FORMAT_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_INVALID_NUMBER_FORMAT,
//                     "Invalid number format (incomplete number)") },
//    { CALL_END_CAUSE_FACILITY_REJECTED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_FACILITY_REJECTED, "Facility rejected") },
//    { CALL_END_CAUSE_RESP_TO_STATUS_ENQUIRY_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_RESP_TO_STATUS_ENQUIRY, "Response to STATUS ENQUIRY") },
    { CALL_END_CAUSE_NORMAL_UNSPECIFIED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NORMAL_UNSPECIFIED, "Normal, unspecified") },
//    { CALL_END_CAUSE_NETWORK_OUT_OF_ORDER_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_OUT_OF_ORDER, "Network out of order") },
//    { CALL_END_CAUSE_SERVICE_TEMPORARILY_OUT_OF_ORDER_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_OUT_OF_ORDER, "Network out of order") },
//    { CALL_END_CAUSE_TEMPORARY_FAILURE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_TEMPORARY_FAILURE, "Temporary failure") },
//    { CALL_END_CAUSE_SWITCHING_EQUIPMENT_CONGESTION_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_SWITCHING_EQUIPMENT_CONGESTION, "Switching equipment congestion") },
//    { CALL_END_CAUSE_ACCESS_INFORMATION_DISCARDED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_ACCESS_INFORMATION_DISCARDED, "Access information discarded") },
//    { CALL_END_CAUSE_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE,
//                     "Requested circuit/channel not available") },
//    { CALL_END_CAUSE_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED,
//                     "Resource unavailable, unspecified") },
//    { CALL_END_CAUSE_QOS_UNAVAILABLE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_QOS_UNAVAILABLE, "Quality of service unavailable") },
//    { CALL_END_CAUSE_REQUESTED_FACILITY_NOT_SUBSCRIBED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_REQUESTED_FACILITY_NOT_SUBSCRIBED,
//                     "Requested facility not subscribed") },
//    { CALL_END_CAUSE_INCOMING_CALLS_BARRED_WITHIN_CUG_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_INCOMING_CALLS_BARRED_WITHIN_CUG,
//                     "Incoming calls barred within the CUG") },
//    { CALL_END_CAUSE_BEARER_CAPABILITY_NOT_AUTH_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_BEARER_CAPABILITY_NOT_AUTHORIZED,
//                     "Bearer capability not authorized") },
//    { CALL_END_CAUSE_BEARER_CAPABILITY_UNAVAILABLE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_BEARER_CAPABILITY_UNAVAILABLE,
//                     "Bearer capability not presently available") },
//    { CALL_END_CAUSE_SERVICE_OPTION_NOT_AVAILABLE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_SERVICE_OPTION_NOT_AVAILABLE,
//                     "Service or option not available, unspecified") },
//    { CALL_END_CAUSE_BEARER_SERVICE_NOT_IMPLEMENTED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_BEARER_SERVICE_NOT_IMPLEMENTED, "Bearer service not implemented") },
//    { CALL_END_CAUSE_REQUESTED_FACILITY_NOT_IMPLEMENTED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_REQUESTED_FACILITY_NOT_IMPLEMENTED,
//                     "Requested facility not implemented") },
//    { CALL_END_CAUSE_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE,
//                     "Only restricted digital information bearer capability is available") },
//    { CALL_END_CAUSE_SERVICE_OR_OPTION_NOT_IMPLEMENTED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_SERVICE_OR_OPTION_NOT_IMPLEMENTED,
//                     "Service or option not implemented, unspecified") },
//    { CALL_END_CAUSE_INVALID_TRANSACTION_IDENTIFIER_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_INVALID_TRANSACTION_IDENTIFIER,
//                     "Invalid transaction identifier value") },
//    { CALL_END_CAUSE_USER_NOT_MEMBER_OF_CUG_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_USER_NOT_MEMBER_OF_CUG, "User not member of CUG") },
//    { CALL_END_CAUSE_INCOMPATIBLE_DESTINATION_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_INCOMPATIBLE_DESTINATION, "Incompatible destination") },
//    { CALL_END_CAUSE_INVALID_TRANSIT_NW_SELECTION_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_INVALID_TRANSIT_NW_SELECTION, "Invalid transit network selection") },
//    { CALL_END_CAUSE_SEMANTICALLY_INCORRECT_MESSAGE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_SEMANTICALLY_INCORRECT_MESSAGE, "Semantically incorrect message") },
//    { CALL_END_CAUSE_INVALID_MANDATORY_INFORMATION_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_INVALID_MANDATORY_INFORMATION, "Invalid mandatory information") },
//    { CALL_END_CAUSE_MESSAGE_TYPE_NON_IMPLEMENTED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_MESSAGE_TYPE_NON_IMPLEMENTED,
//                     "Message type non-existent or not implemented") },
//    { CALL_END_CAUSE_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE,
//                     "Message type not compatible with protocol state") },
//    { CALL_END_CAUSE_INFORMATION_ELEMENT_NON_EXISTENT_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_INFORMATION_ELEMENT_NON_EXISTENT,
//                     "Information element non-existent or not implemented") },
//    { CALL_END_CAUSE_CONDITONAL_IE_ERROR_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_CONDITIONAL_IE_ERROR, "Conditional IE error") },
//    { CALL_END_CAUSE_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE,
//                     "Message not compatible with protocol state") },
//    { CALL_END_CAUSE_RECOVERY_ON_TIMER_EXPIRED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_RECOVERY_ON_TIMER_EXPIRED, "Recovery on timer expiry") },
//    { CALL_END_CAUSE_PROTOCOL_ERROR_UNSPECIFIED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_PROTOCOL_ERROR_UNSPECIFIED, "Protocol error, unspecified") },
//    { CALL_END_CAUSE_INTERWORKING_UNSPECIFIED_V02,
//      std::make_pair(ims_CallFailCause_CALL_FAIL_INTERWORKING_UNSPECIFIED, "Interworking, unspecified") },
    { CALL_END_CAUSE_TEMP_REDIAL_ALLOWED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_EMERGENCY_TEMP_FAILURE,
                     "Temp redial allowed") },  // EMERGENCY_TEMP_FAILURE = 325,
    { CALL_END_CAUSE_PERM_REDIAL_NOT_NEEDED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_EMERGENCY_PERM_FAILURE,
                     "Perm redial not needed") },  // EMERGENCY_PERM_FAILURE = 326,
    { CALL_END_CAUSE_OFFLINE_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_OFF, "Radio is offline") },
    { CALL_END_CAUSE_NO_SRV_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_NO_GW_SRV_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_NO_FULL_SRV_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_NO_CDMA_SRV_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_NO_CELL_AVAILABLE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_NOT_CAMPED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_OUT_OF_SERVICE, "Radio is out of service") },
    { CALL_END_CAUSE_UIM_NOT_PRESENT_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NO_VALID_SIM, "No valid SIM present") },
    { CALL_END_CAUSE_INVALID_SIM_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NO_VALID_SIM, "No valid SIM present") },
    { CALL_END_CAUSE_INCOMPATIBLE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ALREADY_IN_TC_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_USER_CALL_ORIG_DURING_GPS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_USER_CALL_ORIG_DURING_SMS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_USER_CALL_ORIG_DURING_DATA_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_TRM_REQ_FAIL_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_CALL_CANNOT_BE_IDENTIFIED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_INCORRECT_SEMANTICS_IN_MESSAGE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_MANDATORY_INFORMATION_INVALID_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_WRONG_STATE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_INVALID_USER_DATA_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_CNM_MM_REL_PENDING_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_FAIL_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_FAIL_REDIAL_NOT_ALLOWED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_IMMED_RETRY_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_ABORT_RADIO_UNAVAILABLE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_THERMAL_EMERGENCY_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_INTERNAL_ERROR_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_INTERNAL_ERROR, "Radio internal error") },
    { CALL_END_CAUSE_CCS_NOT_SUPPORTED_BY_BS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_REJECTED_BY_BS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ACC_FAIL_REJ_ORD_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ACC_FAIL_RETRY_ORD_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_UNKNOWN_SUBSCRIBER_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_SUBSCRIBER_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_BEARER_SERVICE_NOT_PROVISIONED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_TELE_SERVICE_NOT_PROVISIONED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_EQUIPMENT_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_SS_OPERATION_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SS_ERROR_STATUS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SS_NOT_AVAILABLE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SS_SUBSCRIPTION_VIOLATION_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SS_INCOMPATIBILITY_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_FACILITY_NOT_SUPPORTED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ABSENT_SUBSCRIBER_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SHORT_TERM_DENIAL_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_LONG_TERM_DENIAL_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SYSTEM_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_REJECTED_BY_NETWORK_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_IMSI_UNKNOWN_IN_HLR_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_MS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ILLEGAL_ME_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_PLMN_NOT_ALLOWED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_LOCATION_AREA_NOT_ALLOWED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ROAMING_NOT_ALLOWED_IN_THIS_LOCATION_AREA_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_NO_SUITABLE_CELLS_IN_LOCATION_AREA_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_NETWORK_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_MAC_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SYNCH_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_GSM_AUTHENTICATION_UNACCEPTABLE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SERVICE_NOT_SUBSCRIBED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_ABORT_MSG_RECEIVED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_SERVICE_OPTION_NOT_SUPPORTED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_CONN_REJECT_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_UNAUTHORIZED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_PAYMENT_REQUIRED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_EMM_REJ_SERVICE_REQ_FAILURE_LTE_NW_REJECT_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_EMM_REJ_SERVICE_REQ_FAILURE_CS_DOMAIN_NOT_AVAILABLE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_EMM_REJ_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_REJECT, "Explicit network reject") },
    { CALL_END_CAUSE_NO_RESPONSE_FROM_BS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMEOUT_T42_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMEOUT_T40_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_T50_EXP_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_T51_EXP_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_RL_ACK_TIMEOUT_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_BAD_FL_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMEOUT_T41_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMER_T3230_EXPIRED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_TIMER_T303_EXPIRED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_MT_CSFB_NO_RESPONSE_FROM_NW_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_EMM_REJ_TIMER_T3417_EXT_EXP_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_EMM_REJ_TIMER_T3417_EXP_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_RESP_TIMEOUT, "No response from network") },
    { CALL_END_CAUSE_CALL_BARRED_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_CALL_BARRED, "Call is barred") },
    { CALL_END_CAUSE_ACCESS_STRATUM_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_ACCESS_FAILURE, "Radio access failure") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RR_RANDOM_ACCESS_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_ACCESS_FAILURE, "Radio access failure") },
    { CALL_END_CAUSE_ESR_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_ACCESS_FAILURE, "Radio access failure") },
    { CALL_END_CAUSE_CS_ACQ_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_ACCESS_FAILURE, "Radio access failure") },
    { CALL_END_CAUSE_ACCESS_CLASS_BLOCKED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_ACCESS_CLASS_BLOCKED, "Access class blocked") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_ACCESS_BARRED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_ACCESS_CLASS_BLOCKED, "Access class blocked") },
    { CALL_END_CAUSE_SSAC_REJECT_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_ACCESS_CLASS_BLOCKED, "Access class blocked") },
    { CALL_END_CAUSE_FADE_V02, std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_LINK_LOST, "Radio link lost") },
    { CALL_END_CAUSE_RADIO_LINK_LOST_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_LINK_LOST, "Radio link lost") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RR_REL_IND_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_NORMAL, "RRC connection release, normal") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RRC_REL_IND_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_NORMAL, "RRC connection release, normal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_NORMAL_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_NORMAL, "RRC connection release, normal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_OOS_DURING_CRE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_NORMAL, "RRC connection release, normal") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RRC_CLOSE_SESSION_IND_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_ACCESS_STRATUM_REJ_RRC_OPEN_SESSION_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_CRE_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_ABORTED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_SIB_READ_ERROR_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_ABORTED_IRAT_SUCCESS_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_RELEASE_ABNORMAL, "RRC connection release, abnormal") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_TXN_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_UPLINK_FAILURE, "Radio uplink failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_HO_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_UPLINK_FAILURE, "Radio uplink failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_CONN_REL_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_UPLINK_FAILURE, "Radio uplink failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_CTRL_NOT_CONN_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_UPLINK_FAILURE, "Radio uplink failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_UL_DATA_CNF_FAILURE_RLF_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_LINK_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_REL_RLF_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_RADIO_LINK_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_CONNECTION_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_RLF_DURING_CC_DISCONNECT_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_LINK_FAILURE, "Radio link failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_ABORTED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_CELL_RESEL_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_CONFIG_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_TIMER_EXPIRED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_LRRC_CONN_EST_FAILURE_SI_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_CONNECTION_EST_FAILURE_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_RADIO_SETUP_FAILURE, "Radio setup failure") },
    { CALL_END_CAUSE_AS_REJ_DETACH_WITH_REATTACH_LTE_NW_DETACH_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_DETACH, "Explicit Network Detach") },
    { CALL_END_CAUSE_AS_REJ_DETACH_WITH_OUT_REATTACH_LTE_NW_DETACH_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_DETACH, "Explicit Network Detach") },
    { CALL_END_CAUSE_PDN_DISCONNECTED_V02,
      std::make_pair(ims_CallFailCause_CALL_FAIL_NETWORK_DETACH, "Explicit Network Detach") },
  };

  for (int qmi_end_reason = CALL_END_CAUSE_OFFLINE_V02;
       qmi_end_reason <= CALL_END_CAUSE_RETRY_ON_IMS_WITHOUT_RTT_V02; qmi_end_reason++) {
    auto search = callEndReasonMap.find(static_cast<call_end_reason_enum_v02>(qmi_end_reason));
    if (search != callEndReasonMap.end()) {
      util_volte_call_dial_and_end_ind(t,
          search->first,
          search->second.first);
    }
  }

  std::unordered_map<call_end_reason_enum_v02, ims_CallFailCause> sipSpecificCallEndReasonMap = {
    {CALL_END_CAUSE_MULTIPLE_CHOICES_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REDIRECTED},
    {CALL_END_CAUSE_MOVED_PERMANENTLY_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REDIRECTED},
    {CALL_END_CAUSE_MOVED_TEMPORARILY_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REDIRECTED},
    {CALL_END_CAUSE_USE_PROXY_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REDIRECTED},
    {CALL_END_CAUSE_ALTERNATE_SERVICE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REDIRECTED},
    {CALL_END_CAUSE_BAD_REQ_WAIT_INVITE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_BAD_REQUEST},
    {CALL_END_CAUSE_BAD_REQ_WAIT_REINVITE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_BAD_REQUEST},
    {CALL_END_CAUSE_SIP_403_FORBIDDEN_V02,
      ims_CallFailCause_CALL_FAIL_SIP_FORBIDDEN},
    {CALL_END_CAUSE_INVALID_REMOTE_URI_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_FOUND},
    {CALL_END_CAUSE_UNSUPPORTED_URI_SCHEME_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_SUPPORTED},
    {CALL_END_CAUSE_REMOTE_UNSUPP_MEDIA_TYPE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_SUPPORTED},
    {CALL_END_CAUSE_BAD_EXTENSION_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_SUPPORTED},
    {CALL_END_CAUSE_NETWORK_NO_RESP_TIME_OUT_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REQUEST_TIMEOUT},
    {CALL_END_CAUSE_PEER_NOT_REACHABLE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_TEMPORARILY_UNAVAILABLE},
    {CALL_END_CAUSE_ADDRESS_INCOMPLETE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_BAD_ADDRESS},
    {CALL_END_CAUSE_USER_BUSY_V02,
      ims_CallFailCause_CALL_FAIL_SIP_BUSY},
    {CALL_END_CAUSE_BUSY_EVERYWHERE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_BUSY},
    {CALL_END_CAUSE_REQUEST_TERMINATED_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REQUEST_CANCELLED},
    {CALL_END_CAUSE_NOT_ACCEPTABLE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_ACCEPTABLE},
    {CALL_END_CAUSE_NOT_ACCEPTABLE_HERE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_ACCEPTABLE},
    {CALL_END_CAUSE_SESS_DESCR_NOT_ACCEPTABLE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_ACCEPTABLE},
    {CALL_END_CAUSE_GONE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_REACHABLE},
    {CALL_END_CAUSE_DOES_NOT_EXIST_ANYWHERE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_NOT_REACHABLE},
    {CALL_END_CAUSE_SERVER_INTERNAL_ERROR_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVER_INTERNAL_ERROR},
    {CALL_END_CAUSE_NO_NETWORK_RESP_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVICE_UNAVAILABLE},
    {CALL_END_CAUSE_SIP_503_SERVER_UNAVAILABLE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVICE_UNAVAILABLE},
    {CALL_END_CAUSE_SERVER_TIME_OUT_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVER_TIMEOUT},
    {CALL_END_CAUSE_CALL_REJECTED_V02,
      ims_CallFailCause_CALL_FAIL_SIP_USER_REJECTED},
    {CALL_END_CAUSE_ANSWERED_ELSEWHERE_V02,
      ims_CallFailCause_CALL_FAIL_ANSWERED_ELSEWHERE},
    {CALL_END_CAUSE_CALL_DEFLECTED_V02,
      ims_CallFailCause_CALL_FAIL_ANSWERED_ELSEWHERE},
    {CALL_END_CAUSE_LOW_BATTERY_V02,
      ims_CallFailCause_CALL_FAIL_LOW_BATTERY},
    {CALL_END_CAUSE_FALLBACK_TO_CS_V02,
      ims_CallFailCause_CALL_FAIL_CS_RETRY_REQUIRED},
    {CALL_END_CAUSE_NOT_IMPLEMENTED_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVER_NOT_IMPLEMENTED},
    {CALL_END_CAUSE_BAD_GATEWAY_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVER_BAD_GATEWAY},
    {CALL_END_CAUSE_VERSION_NOT_SUPPORTED_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVER_VERSION_UNSUPPORTED},
    {CALL_END_CAUSE_MESSAGE_TOO_LARGE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVER_MESSAGE_TOOLARGE},
    {CALL_END_CAUSE_PRECONDITION_FAILURE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_SERVER_PRECONDITION_FAILURE},
    {CALL_END_CAUSE_HO_NOT_FEASIBLE_V02,
      ims_CallFailCause_CALL_FAIL_HO_NOT_FEASIBLE},
    {CALL_END_CAUSE_CALL_PULLED_V02,
      ims_CallFailCause_CALL_FAIL_CAUSE_CALL_PULLED},
    {CALL_END_CAUSE_CALL_PULL_OUT_OF_SYNC_V02,
      ims_CallFailCause_CALL_FAIL_PULL_OUT_OF_SYNC},
    {CALL_END_CAUSE_HOLD_RESUME_FAILED_V02,
      ims_CallFailCause_CALL_FAIL_HOLD_RESUME_FAILED},
    {CALL_END_CAUSE_HOLD_RESUME_CANCELED_V02,
      ims_CallFailCause_CALL_FAIL_HOLD_RESUME_CANCELED},
    {CALL_END_CAUSE_REINVITE_COLLISION_V02,
      ims_CallFailCause_CALL_FAIL_HOLD_REINVITE_COLLISION},
    {CALL_END_CAUSE_SSAC_REJECT_V02,
      ims_CallFailCause_CALL_FAIL_ACCESS_CLASS_BLOCKED},
    {CALL_END_CAUSE_ALTERNATE_EMERGENCY_CALL_V02,
      ims_CallFailCause_CALL_FAIL_SIP_ALTERNATE_EMERGENCY_CALL},
    {CALL_END_CAUSE_CODEC_ERROR_V02,
      ims_CallFailCause_CALL_FAIL_MEDIA_INIT_FAILED},
    {CALL_END_CAUSE_RTP_RTCP_TIMEOUT_V02,
      ims_CallFailCause_CALL_FAIL_MEDIA_NO_DATA},
    {CALL_END_CAUSE_UNSUPPORTED_SDP_V02,
      ims_CallFailCause_CALL_FAIL_MEDIA_UNSPECIFIED_ERROR},
    {CALL_END_CAUSE_RTP_FAILURE_V02,
      ims_CallFailCause_CALL_FAIL_MEDIA_UNSPECIFIED_ERROR},
    {CALL_END_CAUSE_CSFB_NOT_FEASIBLE_IN_ROAM_CS_NW_V02,
      ims_CallFailCause_CALL_FAIL_NO_CSFB_IN_CS_ROAM},
    {CALL_END_CAUSE_SRV_NOT_REGISTERED_V02,
      ims_CallFailCause_CALL_FAIL_SRV_NOT_REGISTERED},
    {CALL_END_CAUSE_CALL_TYPE_NOT_ALLOWED_V02,
      ims_CallFailCause_CALL_FAIL_CALL_TYPE_NOT_ALLOWED},
    {CALL_END_CAUSE_EMRG_CALL_ONGOING_V02,
      ims_CallFailCause_CALL_FAIL_EMRG_CALL_ONGOING},
    {CALL_END_CAUSE_CALL_SETUP_ONGOING_V02,
      ims_CallFailCause_CALL_FAIL_CALL_SETUP_ONGOING},
    {CALL_END_CAUSE_MAX_CALL_LIMIT_REACHED_V02,
      ims_CallFailCause_CALL_FAIL_MAX_CALL_LIMIT_REACHED},
    {CALL_END_CAUSE_UNSUPPORTED_SIP_HDRS_V02,
      ims_CallFailCause_CALL_FAIL_UNSUPPORTED_SIP_HDRS},
    {CALL_END_CAUSE_CALL_TRANSFER_ONGOING_V02,
      ims_CallFailCause_CALL_FAIL_CALL_TRANSFER_ONGOING},
    {CALL_END_CAUSE_PRACK_TIMEOUT_V02,
      ims_CallFailCause_CALL_FAIL_PRACK_TIMEOUT},
    {CALL_END_CAUSE_QOS_FAILURE_V02,
      ims_CallFailCause_CALL_FAIL_QOS_FAILURE},
    {CALL_END_CAUSE_ONGOING_HANDOVER_V02,
      ims_CallFailCause_CALL_FAIL_ONGOING_HANDOVER},
    {CALL_END_CAUSE_VT_WITH_TTY_NOT_ALLOWED_V02,
      ims_CallFailCause_CALL_FAIL_VT_WITH_TTY_NOT_ALLOWED},
    {CALL_END_CAUSE_CALL_UPGRADE_ONGOING_V02,
      ims_CallFailCause_CALL_FAIL_CALL_UPGRADE_ONGOING},
    {CALL_END_CAUSE_CONFERENCE_WITH_TTY_NOT_ALLOWED_V02,
      ims_CallFailCause_CALL_FAIL_CONFERENCE_WITH_TTY_NOT_ALLOWED},
    {CALL_END_CAUSE_CALL_CONFERENCE_ONGOING_V02,
      ims_CallFailCause_CALL_FAIL_CALL_CONFERENCE_ONGOING},
    {CALL_END_CAUSE_VT_WITH_AVPF_NOT_ALLOWED_V02,
      ims_CallFailCause_CALL_FAIL_VT_WITH_AVPF_NOT_ALLOWED},
    {CALL_END_CAUSE_ENCRYPTION_CALL_ONGOING_V02,
      ims_CallFailCause_CALL_FAIL_ENCRYPTION_CALL_ONGOING},
    {CALL_END_CAUSE_INCOMING_REJ_CAUSE_CALL_ONGOING_CW_DISABLED_V02,
      ims_CallFailCause_CALL_FAIL_CALL_ONGOING_CW_DISABLED},
    {CALL_END_CAUSE_INCOMING_REJ_CAUSE_CALL_ON_OTHER_SUB_V02,
      ims_CallFailCause_CALL_FAIL_CALL_ON_OTHER_SUB},
    {CALL_END_CAUSE_INCOMING_REJ_CAUSE_1X_COLLISION_V02,
      ims_CallFailCause_CALL_FAIL_1X_COLLISION},
    {CALL_END_CAUSE_INCOM_REJ_CAUSE_UI_NOT_READY_V02,
      ims_CallFailCause_CALL_FAIL_UI_NOT_READY},
    {CALL_END_CAUSE_CS_CALL_ONGOING_V02,
      ims_CallFailCause_CALL_FAIL_CS_CALL_ONGOING},
    {CALL_END_CAUSE_REJECTED_ELSEWHERE_V02,
      ims_CallFailCause_CALL_FAIL_REJECTED_ELSEWHERE},
    {CALL_END_CAUSE_UPGRADE_DOWNGRADE_REJ_V02,
      ims_CallFailCause_CALL_FAIL_USER_REJECTED_SESSION_MODIFICATION},
    {CALL_END_CAUSE_UPGRADE_DOWNGRADE_CANCELLED_V02,
      ims_CallFailCause_CALL_FAIL_USER_CANCELLED_SESSION_MODIFICATION},
    {CALL_END_CAUSE_UPGRADE_DOWNGRADE_FAILED_V02,
      ims_CallFailCause_CALL_FAIL_SESSION_MODIFICATION_FAILED},
    {CALL_END_CAUSE_METHOD_NOT_ALLOWED_V02,
      ims_CallFailCause_CALL_FAIL_SIP_METHOD_NOT_ALLOWED},
    {CALL_END_CAUSE_PROXY_AUTHENTICATION_REQUIRED_V02,
      ims_CallFailCause_CALL_FAIL_SIP_PROXY_AUTHENTICATION_REQUIRED},
    {CALL_END_CAUSE_REQUEST_ENTITY_TOO_LARGE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REQUEST_ENTITY_TOO_LARGE},
    {CALL_END_CAUSE_REQUEST_URI_TOO_LARGE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REQUEST_URI_TOO_LARGE},
    {CALL_END_CAUSE_EXTENSION_REQUIRED_V02,
      ims_CallFailCause_CALL_FAIL_SIP_EXTENSION_REQUIRED},
    {CALL_END_CAUSE_INTERVAL_TOO_BRIEF_V02,
      ims_CallFailCause_CALL_FAIL_SIP_INTERVAL_TOO_BRIEF},
    {CALL_END_CAUSE_CALL_OR_TRANS_DOES_NOT_EXIST_V02,
      ims_CallFailCause_CALL_FAIL_SIP_CALL_OR_TRANS_DOES_NOT_EXIST},
    {CALL_END_CAUSE_LOOP_DETECTED_V02,
      ims_CallFailCause_CALL_FAIL_SIP_LOOP_DETECTED},
    {CALL_END_CAUSE_TOO_MANY_HOPS_V02,
      ims_CallFailCause_CALL_FAIL_SIP_TOO_MANY_HOPS},
    {CALL_END_CAUSE_AMBIGUOUS_V02,
      ims_CallFailCause_CALL_FAIL_SIP_AMBIGUOUS},
    {CALL_END_CAUSE_REQUEST_PENDING_V02,
      ims_CallFailCause_CALL_FAIL_SIP_REQUEST_PENDING},
    {CALL_END_CAUSE_UNDECIPHERABLE_V02,
      ims_CallFailCause_CALL_FAIL_SIP_UNDECIPHERABLE},
    {CALL_END_CAUSE_DEAD_BATTERY_V02,
      ims_CallFailCause_CALL_FAIL_LOW_BATTERY},
    {CALL_END_CAUSE_RETRY_ON_IMS_WITHOUT_RTT_V02,
      ims_CallFailCause_CALL_FAIL_RETRY_ON_IMS_WITHOUT_RTT},
  };

  for (int qmi_end_reason = CALL_END_CAUSE_OFFLINE_V02;
       qmi_end_reason <= CALL_END_CAUSE_RETRY_ON_IMS_WITHOUT_RTT_V02; qmi_end_reason++) {
    auto search = sipSpecificCallEndReasonMap.find(static_cast<call_end_reason_enum_v02>(qmi_end_reason));
    if (search != sipSpecificCallEndReasonMap.end()) {
      util_volte_call_dial_and_end_ind(t,
          search->first,
          search->second);
    }
  }

  t.execute();
  t.print_summary();
  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_barring_password_001
@description: set barring_password
==**/
test_result ril_utf_test_set_barring_password_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Set Barring Password");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CHANGE_BARRING_PASSWORD
  ril_request_change_barring_password_t *ril_req = RIL_node.update_default_ril_request_change_barring_password();
  ril_req->facility_string_code = strdup("OX");  // BAOICxH
  ril_req->old_password = strdup("1234");
  ril_req->new_password = strdup("9876");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_CALL_BARRING_PASSWORD_REQ_V02
  voice_call_barring_password_info_type_v02 *qmi_req = QMI_node.update_default_qmi_voice_set_call_barring_password_req_msg();
  qmi_req->reason = VOICE_REASON_BARR_OUTGOINGINTEXTOHOME_V02;
  memcpy(qmi_req->old_password, "1234", strlen("1234"));
  memcpy(qmi_req->new_password, "9876", strlen("9876"));
  memcpy(qmi_req->new_password_again, "9876", strlen("9876"));
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CALL_BARRING_PASSWORD_RESP_V02
  QMI_node.update_default_qmi_voice_set_call_barring_password_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CHANGE_BARRING_PASSWORD (resp)
  RIL_node.update_default_ril_request_change_barring_password_resp();
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_barring_password_002
@description: set barring_password failure
==**/
test_result ril_utf_test_set_barring_password_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("Set Barring Password");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CHANGE_BARRING_PASSWORD
  ril_request_change_barring_password_t *ril_req = RIL_node.update_default_ril_request_change_barring_password();
  ril_req->facility_string_code = strdup("IR");  // BAICr
  ril_req->old_password = strdup("1234");
  ril_req->new_password = strdup("9876");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_CALL_BARRING_PASSWORD_REQ_V02
  voice_call_barring_password_info_type_v02 *qmi_req = QMI_node.update_default_qmi_voice_set_call_barring_password_req_msg();
  qmi_req->reason = VOICE_REASON_BARR_INCOMINGROAMING_V02;
  memcpy(qmi_req->old_password, "1234", strlen("1234"));
  memcpy(qmi_req->new_password, "9876", strlen("9876"));
  memcpy(qmi_req->new_password_again, "9876", strlen("9876"));
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CALL_BARRING_PASSWORD_RESP_V02
  QMI_node.update_default_qmi_voice_set_call_barring_password_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_set_call_barring_password_resp_failure_cause(QMI_FAILURE_CAUSE_NEGATIVE_PWD_CHECK_V02);
  t.inject(QMI_node);

  t.set_start();
  // Expect: QCRIL_REQ_HOOK_UNSOL_SS_ERROR_CODE
  OEM_node.update_default_qcril_evt_hook_unsol_ss_error_code();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: RIL_REQUEST_CHANGE_BARRING_PASSWORD (resp)
  RIL_node.update_default_ril_request_change_barring_password_resp();
  RIL_node.set_ril_error_value(RIL_E_PASSWORD_INCORRECT);
  t.expect(RIL_node);
  t.set_end();


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_barring_password_003
@description: set barring_password failure
==**/
test_result ril_utf_test_set_barring_password_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("Set Barring Password");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CHANGE_BARRING_PASSWORD
  ril_request_change_barring_password_t *ril_req = RIL_node.update_default_ril_request_change_barring_password();
  ril_req->facility_string_code = strdup("AB");  // BA_ALL
  ril_req->old_password = strdup("1234");
  ril_req->new_password = strdup("9876");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_CALL_BARRING_PASSWORD_REQ_V02
  voice_call_barring_password_info_type_v02 *qmi_req = QMI_node.update_default_qmi_voice_set_call_barring_password_req_msg();
  qmi_req->reason = VOICE_REASON_BARR_ALLBARRING_V02;
  memcpy(qmi_req->old_password, "1234", strlen("1234"));
  memcpy(qmi_req->new_password, "9876", strlen("9876"));
  memcpy(qmi_req->new_password_again, "9876", strlen("9876"));
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_CALL_BARRING_PASSWORD_RESP_V02
  QMI_node.update_default_qmi_voice_set_call_barring_password_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CHANGE_BARRING_PASSWORD (resp)
  RIL_node.update_default_ril_request_change_barring_password_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_barring_password_004
@description: set barring_password failure
==**/
test_result ril_utf_test_set_barring_password_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("Set Barring Password");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CHANGE_BARRING_PASSWORD
  ril_request_change_barring_password_t *ril_req = RIL_node.update_default_ril_request_change_barring_password();
  ril_req->facility_string_code = strdup("UNKNOWN");  // UNKNOWN
  ril_req->old_password = strdup("1234");
  ril_req->new_password = strdup("9876");
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_CHANGE_BARRING_PASSWORD (resp)
  RIL_node.update_default_ril_request_change_barring_password_resp();
  RIL_node.set_ril_error_value(RIL_E_INVALID_ARGUMENTS);
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_preferred_voice_privacy_001
@description: cdma set preferred voice privacy mode
==**/
test_result ril_utf_test_set_preferred_voice_privacy_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("cdma set preferred voice privacy mode");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE
  ril_request_cdma_set_preferred_voice_privacy_mode_t *ril_req =
        RIL_node.update_default_ril_request_cdma_set_preferred_voice_privacy_mode();
  ril_req->voice_privacy_mode = STANDARD_PRIVACY_MODE;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_PREFERRED_PRIVACY_REQ_V02
  QMI_node.update_default_qmi_voice_set_preferred_privacy_req_msg();
  QMI_node.set_qmi_voice_set_preferred_privacy_req_privacy_pref(VOICE_PRIVACY_STANDARD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_PREFERRED_PRIVACY_RESP_V02
  QMI_node.update_default_qmi_voice_set_preferred_privacy_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE (resp)
  RIL_node.update_default_ril_request_cdma_set_preferred_voice_privacy_mode_resp();
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE
  ril_req = RIL_node.update_default_ril_request_cdma_set_preferred_voice_privacy_mode();
  ril_req->voice_privacy_mode = ENHANCED_PRIVACY_MODE;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_PREFERRED_PRIVACY_REQ_V02
  QMI_node.update_default_qmi_voice_set_preferred_privacy_req_msg();
  QMI_node.set_qmi_voice_set_preferred_privacy_req_privacy_pref(VOICE_PRIVACY_ENHANCED_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_PREFERRED_PRIVACY_RESP_V02
  QMI_node.update_default_qmi_voice_set_preferred_privacy_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE (resp)
  RIL_node.update_default_ril_request_cdma_set_preferred_voice_privacy_mode_resp();
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_preferred_voice_privacy_002
@description: cdma set preferred voice privacy mode failure cases
==**/
test_result ril_utf_test_set_preferred_voice_privacy_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("cdma set preferred voice privacy mode");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE
  ril_request_cdma_set_preferred_voice_privacy_mode_t *ril_req =
        RIL_node.update_default_ril_request_cdma_set_preferred_voice_privacy_mode();
  ril_req->voice_privacy_mode = STANDARD_PRIVACY_MODE;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_PREFERRED_PRIVACY_REQ_V02
  QMI_node.update_default_qmi_voice_set_preferred_privacy_req_msg();
  QMI_node.set_qmi_voice_set_preferred_privacy_req_privacy_pref(VOICE_PRIVACY_STANDARD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_PREFERRED_PRIVACY_RESP_V02
  QMI_node.update_default_qmi_voice_set_preferred_privacy_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE (resp)
  RIL_node.update_default_ril_request_cdma_set_preferred_voice_privacy_mode_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_get_preferred_voice_privacy_001
@description: cdma get preferred voice privacy mode
==**/
test_result ril_utf_test_get_preferred_voice_privacy_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("cdma set preferred voice privacy mode");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE
  RIL_node.update_default_ril_request_cdma_query_preferred_voice_privacy_mode();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_get_config_req_msg();
  QMI_node.set_qmi_voice_get_config_req_voice_privacy(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_get_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_config_resp_current_voice_privacy_pref(VOICE_PRIVACY_STANDARD_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE (resp)
  ril_request_cdma_query_preferred_voice_privacy_mode_t *ril_resp =
    RIL_node.update_default_ril_request_cdma_query_preferred_voice_privacy_mode_resp();
  ril_resp->voice_privacy_mode = STANDARD_PRIVACY_MODE;
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE
  RIL_node.update_default_ril_request_cdma_query_preferred_voice_privacy_mode();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_get_config_req_msg();
  QMI_node.set_qmi_voice_get_config_req_voice_privacy(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_get_config_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_config_resp_current_voice_privacy_pref(VOICE_PRIVACY_ENHANCED_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE (resp)
  ril_resp = RIL_node.update_default_ril_request_cdma_query_preferred_voice_privacy_mode_resp();
  ril_resp->voice_privacy_mode = ENHANCED_PRIVACY_MODE;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_get_preferred_voice_privacy_002
@description: cdma get preferred voice privacy mode failure
==**/
test_result ril_utf_test_get_preferred_voice_privacy_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("cdma set preferred voice privacy mode");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE
  RIL_node.update_default_ril_request_cdma_query_preferred_voice_privacy_mode();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CONFIG_REQ_V02
  QMI_node.update_default_qmi_voice_get_config_req_msg();
  QMI_node.set_qmi_voice_get_config_req_voice_privacy(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CONFIG_RESP_V02
  QMI_node.update_default_qmi_voice_get_config_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE (resp)
  RIL_node.update_default_ril_request_cdma_query_preferred_voice_privacy_mode_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

void util_cdma_burst_dtmf(Testcase &t, AndroidTelTestnode &RIL_node, QMIRILTestnode &QMI_node,
    char *dtmf_string, char *on_len, char *off_len,
    dtmf_onlength_enum_v02 dtmf_onlength, dtmf_offlength_enum_v02 dtmf_offlength)
{
  // Inject: RIL_REQUEST_CDMA_BURST_DTMF
  ril_request_cdma_burst_dtmf_t* ril_req = RIL_node.update_default_ril_request_cdma_burst_dtmf();
  ril_req->DTMF_string = strdup(dtmf_string);
  ril_req->DTMF_ON_length = strdup(on_len);
  ril_req->DTMF_OFF_length = strdup(off_len);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_BURST_DTMF_REQ_V02
  voice_burst_dtmf_info_type_v02 *qmi_req = QMI_node.update_default_qmi_voice_burst_dtmf_req_msg_msg();
  qmi_req->call_id = 0xFF;
  qmi_req->digit_buffer_len = strlen(dtmf_string);
  strlcpy(qmi_req->digit_buffer, dtmf_string, strlen(dtmf_string)+1);
  QMI_node.set_qmi_voice_burst_dtmf_req_dtmf_lengths(dtmf_onlength, dtmf_offlength);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_BURST_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_burst_dtmf_resp_msg_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_BURST_DTMF (resp)
  RIL_node.update_default_ril_request_cdma_burst_dtmf_resp();
  t.expect(RIL_node);
}

/**==
@testname: ril_utf_test_cdma_burst_dtmf_001
@description: cdma burst dtmf
==**/
test_result ril_utf_test_cdma_burst_dtmf_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("cdma burst dtmf");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_cdma_burst_dtmf(t, RIL_node, QMI_node,
      "12345", "95", "60", DTMF_ONLENGTH_95MS_V02, DTMF_OFFLENGTH_60MS_V02);

  util_cdma_burst_dtmf(t, RIL_node, QMI_node,
      "12345", "0", "100", DTMF_ONLENGTH_150MS_V02, DTMF_OFFLENGTH_100MS_V02);

  util_cdma_burst_dtmf(t, RIL_node, QMI_node,
      "12345", "150", "150", DTMF_ONLENGTH_150MS_V02, DTMF_OFFLENGTH_150MS_V02);

  util_cdma_burst_dtmf(t, RIL_node, QMI_node,
      "12345", "200", "200", DTMF_ONLENGTH_200MS_V02, DTMF_OFFLENGTH_200MS_V02);

  util_cdma_burst_dtmf(t, RIL_node, QMI_node,
      "12345", "250", "250", DTMF_ONLENGTH_250MS_V02, DTMF_OFFLENGTH_150MS_V02);

  util_cdma_burst_dtmf(t, RIL_node, QMI_node,
      "12345", "300", "300", DTMF_ONLENGTH_300MS_V02, DTMF_OFFLENGTH_150MS_V02);

  util_cdma_burst_dtmf(t, RIL_node, QMI_node,
      "12345", "350", "300", DTMF_ONLENGTH_350MS_V02, DTMF_OFFLENGTH_150MS_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_cdma_burst_dtmf_002
@description: cdma burst dtmf failure
==**/
test_result ril_utf_test_cdma_burst_dtmf_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("cdma burst dtmf");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_CDMA_BURST_DTMF
  ril_request_cdma_burst_dtmf_t* ril_req = RIL_node.update_default_ril_request_cdma_burst_dtmf();
  ril_req->DTMF_string = strdup("12345");
  ril_req->DTMF_ON_length = strdup("9999");
  ril_req->DTMF_OFF_length = strdup("9999");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_BURST_DTMF_REQ_V02
  voice_burst_dtmf_info_type_v02 *qmi_req = QMI_node.update_default_qmi_voice_burst_dtmf_req_msg_msg();
  qmi_req->call_id = 0xFF;
  qmi_req->digit_buffer_len = strlen("12345");
  strlcpy(qmi_req->digit_buffer, "12345", strlen("12345")+1);
  QMI_node.set_qmi_voice_burst_dtmf_req_dtmf_lengths(DTMF_ONLENGTH_SMS_V02, DTMF_OFFLENGTH_150MS_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_BURST_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_burst_dtmf_resp_msg_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CDMA_BURST_DTMF (resp)
  RIL_node.update_default_ril_request_cdma_burst_dtmf_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_supp_service_notifications_001
@description: setSuppServiceNotifications
==**/
test_result ril_utf_test_set_supp_service_notifications_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("setSuppServiceNotifications");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION
  ril_request_set_supp_svc_notification_t *ril_req = RIL_node.update_default_ril_request_set_supp_svc_notification();
  ril_req->notification_status = NOTIFICATIONS_ENABLED;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_INDICATION_REGISTER_REQ_V02
  QMI_node.update_default_qmi_voice_ind_reg_req_msg();
  QMI_node.set_qmi_voice_ind_req_supps_notification_events(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_INDICATION_REGISTER_RESP_V02
  QMI_node.update_default_qmi_voice_ind_reg_resp_msg();
  QMI_node.set_qmi_voice_ind_register_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION (resp)
  RIL_node.update_default_ril_request_set_supp_svc_notification_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION
  ril_req = RIL_node.update_default_ril_request_set_supp_svc_notification();
  ril_req->notification_status = NOTIFICATIONS_DISABLED;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_INDICATION_REGISTER_REQ_V02
  QMI_node.update_default_qmi_voice_ind_reg_req_msg();
  QMI_node.set_qmi_voice_ind_req_supps_notification_events(0);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_INDICATION_REGISTER_RESP_V02
  QMI_node.update_default_qmi_voice_ind_reg_resp_msg();
  QMI_node.set_qmi_voice_ind_register_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION (resp)
  RIL_node.update_default_ril_request_set_supp_svc_notification_resp();
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_supp_service_notifications_002
@description: setSuppServiceNotifications
==**/
test_result ril_utf_test_set_supp_service_notifications_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("setSuppServiceNotifications");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION
  ril_request_set_supp_svc_notification_t *ril_req = RIL_node.update_default_ril_request_set_supp_svc_notification();
  ril_req->notification_status = NOTIFICATIONS_ENABLED;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_INDICATION_REGISTER_REQ_V02
  QMI_node.update_default_qmi_voice_ind_reg_req_msg();
  QMI_node.set_qmi_voice_ind_req_supps_notification_events(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_INDICATION_REGISTER_RESP_V02
  QMI_node.update_default_qmi_voice_ind_reg_resp_msg();
  QMI_node.set_qmi_voice_ind_register_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION (resp)
  RIL_node.update_default_ril_request_set_supp_svc_notification_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_alternate_emergency_call_001
@description: Call fail cause with ALTERNATE_EMERGENCY_CALL
==**/
test_result ril_utf_ims_alternate_emergency_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra[2] = {0, 0};
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_ALTERNATE_EMERGENCY_CALL_V02;
  // End Reason Text "No RTCP Packets" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {0x4e, 0x6f, 0x20, 0x52, 0x54, 0x43, 0x50, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 100;
  t.inject(QMI_node);


  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = (void *)extra;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_SIP_ALTERNATE_EMERGENCY_CALL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 100;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_alternate_emergency_call_002
@description: Call fail cause with ALTERNATE_EMERGENCY_CALL
==**/
test_result ril_utf_ims_alternate_emergency_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra_1[2] = {0, 0};
  char *extra[2] = {0, 0};
  char extras_codec[] = "Codec=AMR_WB";
  char extras_emerg_srv_categ[] = "EmergencyServiceCategory=4";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_ALTERNATE_EMERGENCY_CALL_V02;
  // End Reason Text "No RTCP Packets" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {0x4e, 0x6f, 0x20, 0x52, 0x54, 0x43, 0x50, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 100;
  voice_emerg_srv_categ_type_v02* emerg_srv_categ = QMI_node.set_qmi_voice_all_call_status_ind_emerg_srv_categ(1);
  emerg_srv_categ[0].call_id = 1;
  emerg_srv_categ[0].emerg_srv_categ = 4;
  t.inject(QMI_node);


  //extras : EmergencyServiceCategory=10
  extra_1[0] = extras_emerg_srv_categ;

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = (void *)extra_1;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_SIP_ALTERNATE_EMERGENCY_CALL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 100;
  t.expect(IMS_node);

  // DIAL retry
  // Expected to set CALL_TYPE_EMERGENCY_V02
  // TODO: emergency category

  // Inject: ims_MsgId_REQUEST_DIAL
  ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_EMERGENCY_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  QMI_node.set_qmi_voice_dial_call_req_emer_cat(4);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Codec and Child number expected in extras
  extra[0] = extras_codec;

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = (void *)extra;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = (void *)extra;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  // End Reason Text "No RTCP Packets" in UTF-16 format
  i = 0;
  //text[20] = {0x4e, 0x6f, 0x20, 0x52, 0x54, 0x43, 0x50, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73};
  end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 100;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = (void *)extra;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 100;
  t.expect(IMS_node);

  // Second retry
  // Expected to set CALL_TYPE_VOICE_V02

  // Inject: ims_MsgId_REQUEST_DIAL
  ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mt_call_002
@description: rejectCall / RIL_REQUEST_UDUB
==**/
test_result ril_utf_test_mt_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_UDUB
  RIL_node.update_default_ril_request_udub();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_UDUB
  RIL_node.update_default_ril_request_udub_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_cdma_mo_call_remote_name
@description: MO call on CDMA
==**/
test_result ril_utf_test_cdma_mo_call_remote_name(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("MO Call on CDMA");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Enable 1x
  util_voice_radio_tech_oos(t, QMI_node, RIL_node, TRUE, RADIO_TECH_UNKNOWN);
  util_set_pref_net_type(t, RIL_node, QMI_node,
          QCRIL_PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA,
          RADIO_TECH_UNKNOWN, 0, RIL_E_SUCCESS, 0, TRUE, FALSE, FALSE, FALSE);
  util_voice_radio_tech_cdma_in_service(t, QMI_node, RIL_node,
          TRUE, RADIO_TECH_IS95A, NAS_SYS_SRV_STATUS_SRV_V01,
          SYS_SRV_DOMAIN_CS_PS_V01, NAS_SYS_ROAM_STATUS_OFF_V01, TRUE);

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CDMA_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  // Remote party name
  voice_remote_party_name2_type_v02 *name = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_name(1);
  name[0].call_id = 1;
  name[0].name_pi = PRESENTATION_NAME_PRESENTATION_ALLOWED_V02;
  name[0].coding_scheme = 0;
  name[0].name_len = 15;
  char name_str[] = {75, 65, 78, 83, 65, 83, 32, 67, 73, 84, 89, 32, 32, 75, 83, 0};
  memcpy(name[0].name, name_str, name[0].name_len);

  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_test_cdma_mt_call_001
@description: MT call on CDMA
==**/
test_result ril_utf_test_cdma_mt_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("MT Call on CDMA");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Enable 1x
  util_voice_radio_tech_oos(t, QMI_node, RIL_node, TRUE, RADIO_TECH_UNKNOWN);
  util_set_pref_net_type(t, RIL_node, QMI_node,
          QCRIL_PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA,
          RADIO_TECH_UNKNOWN, 0, RIL_E_SUCCESS, 0, TRUE, FALSE, FALSE, FALSE);
  util_voice_radio_tech_cdma_in_service(t, QMI_node, RIL_node,
          TRUE, RADIO_TECH_IS95A, NAS_SYS_SRV_STATUS_SRV_V01,
          SYS_SRV_DOMAIN_CS_PS_V01, NAS_SYS_ROAM_STATUS_OFF_V01, TRUE);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call **call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  // Remote party name
  voice_remote_party_name2_type_v02 *name = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_name(1);
  name[0].call_id = 1;
  name[0].name_pi = PRESENTATION_NAME_PRESENTATION_ALLOWED_V02;
  name[0].coding_scheme = 0;
  name[0].name_len = 15;
  char name_str[] = {75, 65, 78, 83, 65, 83, 32, 67, 73, 84, 89, 32, 32, 75, 83, 0};
  memcpy(name[0].name, name_str, name[0].name_len);

  t.inject(QMI_node);

  // Expect: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_cdma_info_rec_001
@description: MT call on CDMA, and cdma_info_rec
==**/
test_result ril_utf_test_cdma_info_rec_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("MT Call on CDMA, and cdma_info_rec");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Enable 1x
  util_voice_radio_tech_oos(t, QMI_node, RIL_node, TRUE, RADIO_TECH_UNKNOWN);
  util_set_pref_net_type(t, RIL_node, QMI_node,
          QCRIL_PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA,
          RADIO_TECH_UNKNOWN, 0, RIL_E_SUCCESS, 0, TRUE, FALSE, FALSE, FALSE);
  util_voice_radio_tech_cdma_in_service(t, QMI_node, RIL_node,
          TRUE, RADIO_TECH_IS95A, NAS_SYS_SRV_STATUS_SRV_V01,
          SYS_SRV_DOMAIN_CS_PS_V01, NAS_SYS_ROAM_STATUS_OFF_V01, TRUE);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call **call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  // Remote party name
  voice_remote_party_name2_type_v02 *name = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_name(1);
  name[0].call_id = 1;
  name[0].name_pi = PRESENTATION_NAME_PRESENTATION_ALLOWED_V02;
  name[0].coding_scheme = 0;
  name[0].name_len = 15;
  char name_str[] = {75, 65, 78, 83, 65, 83, 32, 67, 73, 84, 89, 32, 32, 75, 83, 0};
  memcpy(name[0].name, name_str, name[0].name_len);

  t.inject(QMI_node);

  // Expect: RIL_REQUEST_ANSWER
  RIL_node.update_default_ril_request_answer_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_INFO_REC_IND_V02
  QMI_node.update_default_qmi_voice_info_rec_ind_msg(1);
  QMI_node.set_qmi_voice_info_rec_ind_call_waiting(CALL_WAITING_NEW_CALL_V02);
  voice_caller_id_info_type_v02 *caller_id = QMI_node.set_qmi_voice_info_rec_ind_caller_id_info();
  caller_id->pi = PRESENTATION_NUM_ALLOWED_V02;
  caller_id->caller_id_len = strlen("111222");
  strlcpy(caller_id->caller_id, "111222", strlen("111222")+1);
  voice_num_info_type_v02 *calling_party = QMI_node.set_qmi_voice_info_rec_ind_calling_party_info();
  calling_party->pi = PRESENTATION_NUM_ALLOWED_V02;
  calling_party->si = QMI_VOICE_SI_NETWORK_PROVIDED_V02;
  calling_party->num_type = QMI_VOICE_NUM_TYPE_NATIONAL_V02;
  calling_party->num_plan = QMI_VOICE_NUM_PLAN_ISDN_V02;
  calling_party->num_len = strlen("111222");
  strlcpy(calling_party->num, "111222", strlen("111222")+1);
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_UNSOL_CDMA_CALL_WAITING
  RIL_CDMA_CallWaiting_v6 *call_waiting = RIL_node.update_default_ril_unsol_cdma_call_waiting();
  call_waiting->numberPresentation = 0;
  call_waiting->number_type = 2;
  call_waiting->number_plan = 1;
  //RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_CDMA_INFO_REC
  RIL_CDMA_InformationRecords *info_rec = RIL_node.update_default_ril_unsol_cdma_info_rec();
  info_rec->numberOfInfoRecs = 1;
  //RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.set_end();

  // Inject: RIL_REQUEST_CDMA_FLASH
  ril_request_cdma_flash_t* flash = RIL_node.update_default_ril_request_cdma_flash();
  strlcpy(flash->flash_string, "", strlen("")+1);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SEND_FLASH_REQ_V02
  QMI_node.update_default_qmi_voice_send_flash_req_msg(255);
  QMI_node.set_qmi_voice_send_flash_req_flash_payload("");
  t.expect(QMI_node);

  // Expect: QMI_VOICE_SEND_FLASH_RESP
  QMI_node.update_default_qmi_voice_send_flash_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  RIL_node.update_default_ril_request_cdma_flash_resp();
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_cdma_mo_call_and_eme_call_001
@description: MO call on CDMA followed by emergency call on IMS socket.
==**/
test_result ril_utf_test_cdma_mo_call_and_eme_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("MO Call on CDMA followed by emergency call");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.call_type", "1");

  // Enable 1x
  util_voice_radio_tech_oos(t, QMI_node, RIL_node, TRUE, RADIO_TECH_UNKNOWN);
  util_set_pref_net_type(t, RIL_node, QMI_node,
          QCRIL_PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA,
          RADIO_TECH_UNKNOWN, 0, RIL_E_SUCCESS, 0, TRUE, FALSE, FALSE, FALSE);
  util_voice_radio_tech_cdma_in_service(t, QMI_node, RIL_node,
          TRUE, RADIO_TECH_IS95A, NAS_SYS_SRV_STATUS_SRV_V01,
          SYS_SRV_DOMAIN_CS_PS_V01, NAS_SYS_ROAM_STATUS_OFF_V01, TRUE);

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CDMA_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  // Remote party name
  voice_remote_party_name2_type_v02 *name = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_name(1);
  name[0].call_id = 1;
  name[0].name_pi = PRESENTATION_NAME_PRESENTATION_ALLOWED_V02;
  name[0].coding_scheme = 0;
  name[0].name_len = 15;
  char name_str[] = {75, 65, 78, 83, 65, 83, 32, 67, 73, 84, 89, 32, 32, 75, 83, 0};
  memcpy(name[0].name, name_str, name[0].name_len);

  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);


  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("911");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("911");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  QMI_node.set_qmi_voice_dial_call_resp_media_id(15);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 15;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_EMERGENCY_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("911");
  strlcpy(number_list[1].number, "911", strlen("911")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 15;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_cdma_mo_call_and_eme_call_002
@description: MO call on CDMA followed by emergency call on IMS socket.
==**/
test_result ril_utf_test_cdma_mo_call_and_eme_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("MO Call on CDMA followed by emergency call");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.call_type", "0");

  // Enable 1x
  util_voice_radio_tech_oos(t, QMI_node, RIL_node, TRUE, RADIO_TECH_UNKNOWN);
  util_set_pref_net_type(t, RIL_node, QMI_node,
          QCRIL_PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA,
          RADIO_TECH_UNKNOWN, 0, RIL_E_SUCCESS, 0, TRUE, FALSE, FALSE, FALSE);
  util_voice_radio_tech_cdma_in_service(t, QMI_node, RIL_node,
          TRUE, RADIO_TECH_IS95A, NAS_SYS_SRV_STATUS_SRV_V01,
          SYS_SRV_DOMAIN_CS_PS_V01, NAS_SYS_ROAM_STATUS_OFF_V01, TRUE);

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CDMA_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  // Remote party name
  voice_remote_party_name2_type_v02 *name = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_name(1);
  name[0].call_id = 1;
  name[0].name_pi = PRESENTATION_NAME_PRESENTATION_ALLOWED_V02;
  name[0].coding_scheme = 0;
  name[0].name_len = 15;
  char name_str[] = {75, 65, 78, 83, 65, 83, 32, 67, 73, 84, 89, 32, 32, 75, 83, 0};
  memcpy(name[0].name, name_str, name[0].name_len);

  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);


  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("911");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("911");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(2);
  QMI_node.set_qmi_voice_dial_call_resp_media_id(15);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 15;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "911");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_EMERGENCY_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("911");
  strlcpy(number_list[1].number, "911", strlen("911")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 15;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "911");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_test_cdma_mo_call_and_eme_call_003
@description: Normal MO call followed by emergency call on CDMA
==**/
test_result ril_utf_test_cdma_mo_call_and_eme_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Normal MO call followed by emergency call on CDMA");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

//  property_set("persist.vendor.radio.call_type", "0");

  // Enable 1x
  util_voice_radio_tech_oos(t, QMI_node, RIL_node, TRUE, RADIO_TECH_UNKNOWN);
  util_set_pref_net_type(t, RIL_node, QMI_node,
          QCRIL_PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA,
          RADIO_TECH_UNKNOWN, 0, RIL_E_SUCCESS, 0, TRUE, FALSE, FALSE, FALSE);
  util_voice_radio_tech_cdma_in_service(t, QMI_node, RIL_node,
          TRUE, RADIO_TECH_IS95A, NAS_SYS_SRV_STATUS_SRV_V01,
          SYS_SRV_DOMAIN_CS_PS_V01, NAS_SYS_ROAM_STATUS_OFF_V01, TRUE);

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CDMA_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  // Remote party name
  voice_remote_party_name2_type_v02 *name = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_name(1);
  name[0].call_id = 1;
  name[0].name_pi = PRESENTATION_NAME_PRESENTATION_ALLOWED_V02;
  name[0].coding_scheme = 0;
  name[0].name_len = 15;
  char name_str[] = {75, 65, 78, 83, 65, 83, 32, 67, 73, 84, 89, 32, 32, 75, 83, 0};
  memcpy(name[0].name, name_str, name[0].name_len);

  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("911");
  strlcpy(number_list[0].number, "911", strlen("911")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("112");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("112");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CDMA_AUTOMATIC_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_EMERGENCY_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("112");
  strlcpy(number_list[0].number, "112", strlen("112")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "112");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("112");
  strlcpy(number_list[0].number, "112", strlen("112")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("112");
  strlcpy(number_list[0].number, "112", strlen("112")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_cdma_otasp_001
@description: MT call on CDMA
==**/
test_result ril_utf_test_cdma_otasp_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("MT Call on CDMA");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Enable 1x
  util_voice_radio_tech_oos(t, QMI_node, RIL_node, TRUE, RADIO_TECH_UNKNOWN);
  util_set_pref_net_type(t, RIL_node, QMI_node,
          QCRIL_PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA,
          RADIO_TECH_UNKNOWN, 0, RIL_E_SUCCESS, 0, TRUE, FALSE, FALSE, FALSE);
  util_voice_radio_tech_cdma_in_service(t, QMI_node, RIL_node,
          TRUE, RADIO_TECH_IS95A, NAS_SYS_SRV_STATUS_SRV_V01,
          SYS_SRV_DOMAIN_CS_PS_V01, NAS_SYS_ROAM_STATUS_OFF_V01, TRUE);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_OTAPA_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // srv opt
  voice_srv_opt_type_v02 *srv_opt = QMI_node.set_qmi_voice_all_call_status_ind_srv_opt(1);
  srv_opt[0].call_id = 1;
  srv_opt[0].srv_opt = 18;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

#if 0
  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call **call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);
#endif

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_OTAPA_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // srv opt
  srv_opt = QMI_node.set_qmi_voice_all_call_status_ind_srv_opt(1);
  srv_opt[0].call_id = 1;
  srv_opt[0].srv_opt = 18;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

#if 0
  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  RIL_node.set_ril_request_get_current_calls_resp_name(0, "KANSAS CITY  KS");
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);
#endif

  // Inject: QMI_VOICE_INFO_REC_IND_V02
  QMI_node.update_default_qmi_voice_info_rec_ind_msg(1);
  voice_signal_info_type_v02* signal_info = QMI_node.set_qmi_voice_info_rec_ind_signal_info();
  signal_info->signal_type = SIGNAL_TYPE_IS54B_ALERTING_V02;
  signal_info->alert_pitch = ALERT_PITCH_MED_V02;
  signal_info->signal = 1;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CDMA_INFO_REC
  RIL_CDMA_InformationRecords *info_rec = RIL_node.update_default_ril_unsol_cdma_info_rec();
  info_rec->numberOfInfoRecs = 1;
  //RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_OTASP_STATUS_IND_V02
  QMI_node.update_default_qmi_voice_otasp_status_ind_msg(1, OTASP_STATUS_OTAPA_STARTED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CDMA_OTA_PROVISION_STATUS
  RIL_node.update_default_ril_unsol_cdma_ota_provision_status(CDMA_OTA_PROVISION_STATUS_OTAPA_STARTED);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_OTASP_STATUS_IND_V02
  QMI_node.update_default_qmi_voice_otasp_status_ind_msg(1, OTASP_STATUS_COMMITTED_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CDMA_OTA_PROVISION_STATUS
  RIL_node.update_default_ril_unsol_cdma_ota_provision_status(CDMA_OTA_PROVISION_STATUS_COMMITTED);
  t.expect(RIL_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_OTAPA_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // srv opt
  srv_opt = QMI_node.set_qmi_voice_all_call_status_ind_srv_opt(1);
  srv_opt[0].call_id = 1;
  srv_opt[0].srv_opt = 18;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_REL_NORMAL_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_hangup_waiting_or_background_001
==**/
test_result ril_utf_test_hangup_waiting_or_background_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_WAITING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_is_srvcc_call_with_id_type_v02* is_srvcc = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(2);
  is_srvcc[0].call_id = 1;
  is_srvcc[0].is_srvcc_call = TRUE;
  is_srvcc[1].call_id = 2;
  is_srvcc[1].is_srvcc_call = TRUE;
  voice_srvcc_parent_call_id_type_v02* srvcc_parent_call_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_parent_call_info(2);
  srvcc_parent_call_info[0].call_id = 1;
  srvcc_parent_call_info[0].parent_call_id = 1;
  srvcc_parent_call_info[0].is_parent_id_cleared = FALSE;
  srvcc_parent_call_info[1].call_id = 2;
  srvcc_parent_call_info[1].parent_call_id = 2;
  srvcc_parent_call_info[1].is_parent_id_cleared = FALSE;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // HANGUP THE WAITING CALL
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->isMT = 1;
  call[0]->isMpty =  0;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // GRACEFULL CALL END (Hangup the HOLD call)
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND (Resp)
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_hangup_waiting_or_background_002
==**/
test_result ril_utf_test_hangup_waiting_or_background_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_WAITING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_is_srvcc_call_with_id_type_v02* is_srvcc = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(2);
  is_srvcc[0].call_id = 2;
  is_srvcc[0].is_srvcc_call = TRUE;
  is_srvcc[1].call_id = 1;
  is_srvcc[1].is_srvcc_call = TRUE;
  voice_srvcc_parent_call_id_type_v02* srvcc_parent_call_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_parent_call_info(2);
  srvcc_parent_call_info[0].call_id = 2;
  srvcc_parent_call_info[0].parent_call_id = 2;
  srvcc_parent_call_info[0].is_parent_id_cleared = FALSE;
  srvcc_parent_call_info[1].call_id = 1;
  srvcc_parent_call_info[1].parent_call_id = 1;
  srvcc_parent_call_info[1].is_parent_id_cleared = FALSE;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // HANGUP THE WAITING CALL
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_WAITING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMT = 1;
  call[1]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536960");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
#endif
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 2;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  call_info[1].call_id = 1;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MT_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 2;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 1;
  number_list[1].number_len = strlen("3038675309");
  strlcpy(number_list[1].number, "3038675309", strlen("3038675309")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->isMT = 1;
  call[0]->isMpty =  0;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // GRACEFULL CALL END (Hangup the HOLD call)
  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND (Resp)
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mt_call_reject_001
@description: This test creates an MT call. Modem then steps through call states to active. The call is then torn down with hangup request.
==**/
test_result ril_utf_test_mt_call_reject_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_SETUP_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_CALL_RING
  RIL_node.update_default_ril_unsol_call_ring();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_INCOMING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMT = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "3038675309");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#endif
  t.expect(RIL_node);


  // Inject: QCRIL_REQ_HOOK_REJECT_INCOMING_CALL_CAUSE_21
  OEM_node.update_default_qcril_evt_hook_reject_incoming_call_cause_21();
  t.inject(OEM_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_call(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("3038675309");
  strlcpy(number_list[0].number, "3038675309", strlen("3038675309")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  OEM_node.update_default_qcril_evt_hook_reject_incoming_call_cause_21_resp();
  t.expect(OEM_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_mo_call_001
@description: MO VoLTE call with CLIR_INVOCATION
==**/
test_result ril_utf_ims_mo_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = true;
  ptr->clir = 1;  // CLIR_INVOCATION_OPTION
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_INVOCATION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_RESTRICTED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);


  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_002
@description: MO VoLTE call with CLIR_SUPPRESSION
==**/
test_result ril_utf_ims_mo_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = true;
  ptr->clir = 2;  // CLIR_SUPPRESSION
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_SUPPRESSION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_003
@description: MO VoLTE call with CLIR_PRESENTATION_INDICATOR
==**/
test_result ril_utf_ims_mo_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
//  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_SUPPRESSION_V02);
//  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_004
@description: MO VoLTE call with SubAddress separated with &
==**/
test_result ril_utf_ims_mo_call_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.support_subaddr", "1");
  //property_set("persist.vendor.radio.subaddr_amp", "1");  // default is 1

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960&12345");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_extension_bit(1);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress_type(SUBADDRESS_TYPE_NSAP_V02);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_odd_even_ind(1); // strlen("12345") %2
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress("12345");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_005
@description: MO VoLTE call with SubAddress separated with *
==**/
test_result ril_utf_ims_mo_call_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.support_subaddr", "1");
  property_set("persist.vendor.radio.subaddr_amp", "0");

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960*12345");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_extension_bit(1);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress_type(SUBADDRESS_TYPE_NSAP_V02);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_odd_even_ind(1); // strlen("12345") %2
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress("12345");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_006
@description: MO VoLTE call with SubAddress separated with *
==**/
test_result ril_utf_ims_mo_call_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.support_subaddr", "1");
  property_set("persist.vendor.radio.subaddr_amp", "0");

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("*12345");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("*12345");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_007
@description: MO VoLTE call with SubAddress separated with * with subaddr_ia5_id
==**/
test_result ril_utf_ims_mo_call_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.support_subaddr", "1");
  property_set("persist.vendor.radio.subaddr_amp", "0");
  property_set("persist.vendor.radio.subaddr_ia5_id", "1");

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960*12345");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_extension_bit(1);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress_type(SUBADDRESS_TYPE_NSAP_V02);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_odd_even_ind(0); // strlen("12345") %2
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress("P12345");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_008
@description: MO VoLTE call with originating number
==**/
test_result ril_utf_ims_mo_call_008(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = true;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = true;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  ptr->originatingNumber.arg = strdup("1928374650");
  ptr->isSecondary = true;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  QMI_node.set_qmi_voice_dial_call_req_origination_number("1928374650");
  QMI_node.set_qmi_voice_dial_call_req_is_secondary(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_009
@description: DIAL with call pull
==**/
test_result ril_utf_ims_mo_call_009(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = true;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = true;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  ptr->has_isCallPull = true;
  ptr->isCallPull = true;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  QMI_node.set_qmi_voice_dial_call_req_call_pull(TRUE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_010
@description: MO VoLTE call with SubAddress separated with * with subaddr_ia5_id
==**/
test_result ril_utf_ims_mo_call_010(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  property_set("persist.vendor.radio.support_subaddr", "1");
  property_set("persist.vendor.radio.subaddr_ia5_id", "1");

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960*12345");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_extension_bit(1);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress_type(SUBADDRESS_TYPE_NSAP_V02);
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_odd_even_ind(0); // strlen("12345") %2
  QMI_node.set_qmi_voice_dial_call_req_called_party_subaddress_subaddress("P12345");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_011
@description: dial failure due to invalid long number
==**/
test_result ril_utf_ims_mo_call_011(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  char *address = "123456789012345678901234567890123456789012345678901234567890123456789012345678901SIPOVERFLOWTest11111111111111111111111111111122";

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial(address);
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_012
@description: dial failure due to invalid long number
==**/
test_result ril_utf_ims_mo_call_012(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  char *address = "+123456789012345678901234567890123456789012345678901234567890123456789012345678901SIPOVERFLOWTest11111111111111111111111111111122";

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial(address);
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_call_013
@description: dial failure due to invalid long number
==**/
test_result ril_utf_ims_mo_call_013(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  char *address = "";

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial(address);
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_emergency_dial_001
@description: emergencyDial
==**/
test_result ril_utf_ims_mo_emergency_dial_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("110");
  ptr->has_clir = true;
  ptr->clir = 2;  // CLIR_SUPPRESSION_OPTION
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  ptr->isEmergencyDial = true;
  ptr->emergencyDialExtra.categories = 0x01;
  ptr->emergencyDialExtra.route = ims_EmergencyCallRoute_UNKNOWN;
  ptr->emergencyDialExtra.hasKnownUserIntentEmergency = false;
  ptr->emergencyDialExtra.isTesting = false;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("110");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_SUPPRESSION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  //QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_RESTRICTED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_EMERGENCY_V02);
  //QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);


//  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_emergency_dial_002
@description: emergencyDial
==**/
test_result ril_utf_ims_mo_emergency_dial_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("110");
  ptr->has_clir = true;
  ptr->clir = 2;  // CLIR_SUPPRESSION_OPTION
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  ptr->isEmergencyDial = true;
  ptr->emergencyDialExtra.categories = 0x01;
  ptr->emergencyDialExtra.route = ims_EmergencyCallRoute_EMERGENCY;
  ptr->emergencyDialExtra.hasKnownUserIntentEmergency = false;
  ptr->emergencyDialExtra.isTesting = false;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("110");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_SUPPRESSION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  //QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_RESTRICTED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_EMERGENCY_V02);
  //QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);


//  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_emergency_dial_003
@description: emergencyDial
==**/
test_result ril_utf_ims_mo_emergency_dial_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("110");
  ptr->has_clir = true;
  ptr->clir = 2;  // CLIR_SUPPRESSION_OPTION
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  ptr->isEmergencyDial = true;
  ptr->emergencyDialExtra.categories = 0x01;
  ptr->emergencyDialExtra.route = ims_EmergencyCallRoute_NORMAL;
  ptr->emergencyDialExtra.hasKnownUserIntentEmergency = false;
  ptr->emergencyDialExtra.isTesting = false;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("110");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_SUPPRESSION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  //QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_RESTRICTED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  //QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("110");
  strlcpy(number_list[0].number, "110", strlen("110")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);


//  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_precond_vt
@description:
Initiates MO VT call, and remote end accepted as VT call with Precondition
support (ie., callSubstate as CONNECTED_SUSPENDED)
==**/
test_result ril_utf_ims_mo_precond_vt(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, true);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_precond_volte
@description:
Initiates MO VOIP call, and remote end accepted as VOIP call with Precondition
support (ie., callSubstate as CONNECTED_SUSPENDED)
==**/
test_result ril_utf_ims_mo_precond_volte(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, true);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_precond_vt_tx
@description:
Initiates MO VT call, and remote end accepted as VT_TX only with Precondition
support (ie., callSubstate as CONNECTED_SUSPENDED)
==**/
test_result ril_utf_ims_mo_precond_vt_tx(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT_TX, true);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_precond_vt_rx
@description:
Initiates MO VT call, and remote end accepted as VT_RX only with Precondition
support (ie., callSubstate as CONNECTED_SUSPENDED)
==**/
test_result ril_utf_ims_mo_precond_vt_rx(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT_RX, true);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_precond_vt
@description:
MT VT call, and user accepted as VT with Precondition
support (ie., callSubstate as CONNECTED_SUSPENDED)
==**/
test_result ril_utf_ims_mt_precond_vt(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, true);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_precond_volte
@description:
MT VoIP call, and user accepted as VoIP with Precondition
support (ie., callSubstate as CONNECTED_SUSPENDED)
==**/
test_result ril_utf_ims_mt_precond_volte(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, true);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_precond_vt_tx
@description:
MT VT call, and user accepted as VT_TX with Precondition
support (ie., callSubstate as CONNECTED_SUSPENDED)
==**/
test_result ril_utf_ims_mt_precond_vt_tx(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT_TX, true);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_precond_vt_rx
@description:
MT VT call, and user accepted as VT_RX with Precondition
support (ie., callSubstate as CONNECTED_SUSPENDED)
==**/
test_result ril_utf_ims_mt_precond_vt_rx(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT_RX, true);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_mo_conf_uri_call_001
@description: DIAL with conf uri
==**/
test_result ril_utf_ims_mo_conf_uri_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960;1212123");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = true;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = true;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  ptr->has_isConferenceUri = true;
  ptr->isConferenceUri = true;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("Conference Call");
  QMI_node.set_qmi_voice_dial_call_req_conf_uri_list("2428536960;1212123");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_conf_uri_call_002
@description: DIAL with conf uri
==**/
test_result ril_utf_ims_mo_conf_uri_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("");
  ptr->has_clir = true;
  ptr->clir = 0;  // CLIR_PRESENTATION_INDICATOR
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = true;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = true;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  ptr->has_isConferenceUri = true;
  ptr->isConferenceUri = true;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("Conference Call");
  QMI_node.set_qmi_voice_dial_call_req_conf_uri_list("");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_conf_uri_call_003
@description: MO call with conference URI
              hangup with conference URI
==**/
test_result ril_utf_ims_mo_conf_uri_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("10000;20000;30000");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  ptr->has_presentation = TRUE;
  ptr->presentation = ims_IpPresentation_IP_PRESENTATION_NUM_ALLOWED;
  ptr->has_isConferenceUri = TRUE;
  ptr->isConferenceUri = TRUE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("Conference Call");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_conf_uri_list("10000;20000;30000");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("Conference Call");
  strlcpy(number_list[0].number, "Conference Call", strlen("Conference Call")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("Conference Call");
  strlcpy(number_list[0].number, "Conference Call", strlen("Conference Call")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("Conference Call");
  strlcpy(number_list[0].number, "Conference Call", strlen("Conference Call")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("Conference Call");
  strlcpy(number_list[0].number, "Conference Call", strlen("Conference Call")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_multi_party(TRUE);
  IMS_node.set_ims_request_hangup_conn_uri("sip:30000@test.3gpp.com");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_SPECIFIED_CALL_FROM_CONFERENCE_V02);
  char *sip_uri = QMI_node.set_qmi_voice_manage_ip_calls_sip_uri();
  strlcpy(sip_uri, "sip:30000@test.3gpp.com", strlen("sip:30000@test.3gpp.com")+1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("Conference Call");
  strlcpy(number_list[0].number, "Conference Call", strlen("Conference Call")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_mo_volte_upgrade_vt_001
@description: creates MO call and upgrades to VT
==**/
test_result ril_utf_ims_mo_volte_upgrade_vt_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x03);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  util_hangup_mo_vt_call(t, IMS_node, QMI_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_upgrade_vt_002
@description: creates MO call and upgrades to VT
==**/
test_result ril_utf_ims_mo_volte_upgrade_vt_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x03);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_call_modified_cause(VOICE_CALL_MODIFIED_CAUSE_UPGRADE_DUE_TO_LOCAL_REQ_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_causeCode = TRUE;
  calls[0]->callDetails.causeCode = ims_CauseCodes_CAUSE_CODE_SESSION_MODIFY_UPGRADE_LOCAL_REQ;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  util_hangup_mo_vt_call(t, IMS_node, QMI_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_upgrade_vt_003
@description: creates MO call and upgrades to VT - remote rejected
==**/
test_result ril_utf_ims_mo_volte_upgrade_vt_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x03);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_failure_cause(QMI_FAILURE_CAUSE_UPGRADE_DOWNGRADE_REJ_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_REJECTED_BY_REMOTE);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_upgrade_vt_004
@description: modify call initiate with invalid call id
==**/
test_result ril_utf_ims_mo_volte_upgrade_vt_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(0xFF);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_upgrade_vt_005
@description: modify call initiate when no calls
==**/
test_result ril_utf_ims_mo_volte_upgrade_vt_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_upgrade_vt_006
@description: modify call initiate with invalid call type / domain
==**/
test_result ril_utf_ims_mo_volte_upgrade_vt_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_SMS, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details((ims_CallType)100, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_NOT_SET);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, (ims_CallDomain)100);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_upgrade_vt_tx_001
@description: creates MO call and upgrades to VT_TX
==**/
test_result ril_utf_ims_mo_volte_upgrade_vt_tx_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT_TX, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02);
  //(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_TX;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_upgrade_vt_rx_001
@description: creates MO call and upgrades to VT_RX
==**/
test_result ril_utf_ims_mo_volte_upgrade_vt_rx_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT_RX, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_RX_V02);
  //(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_RX;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_upgrade_rtt_001
@description: creates MO call and upgrades to RTT
==**/
test_result ril_utf_ims_mo_volte_upgrade_rtt_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VOICE, ims_CallDomain_CALL_DOMAIN_PS);
  IMS_node.set_ims_request_modify_call_initiate_rtt_mode(ims_RttMode_RTT_MODE_FULL);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x00);
  QMI_node.set_qmi_voice_manage_ip_calls_req_rtt_mode(RTT_MODE_FULL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_rtt_mode(RTT_MODE_FULL_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.has_rttMode = TRUE;
  calls[0]->callDetails.rttMode = ims_RttMode_RTT_MODE_FULL;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  util_hangup_mo_volte_rtt_call(t, IMS_node, QMI_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_cancel_modify_call_001
@description: creates MO call and initiate upgrade to VT and cancel upgrade
==**/
test_result ril_utf_ims_cancel_modify_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x03);
  t.expect(QMI_node);

  // Inject: ims_MsgId_REQUEST_CANCEL_MODIFY_CALL
  IMS_node.update_default_ims_request_cancel_modify_call();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_IMS_CALL_CANCEL_REQ_V02
  QMI_node.update_default_qmi_voice_ims_call_cancel_req_msg(1, VOIP_CANCEL_TYPE_CANCEL_CALL_UPGRADE_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_IMS_CALL_CANCEL_RESP_V02
  QMI_node.update_default_qmi_voice_ims_call_cancel_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_ims_call_cancel_resp(1, VOIP_CANCEL_TYPE_CANCEL_CALL_UPGRADE_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_CANCEL_MODIFY_CALL (Resp)
  IMS_node.update_default_ims_request_cancel_modify_call_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_failure_cause(QMI_FAILURE_CAUSE_UPGRADE_DOWNGRADE_REJ_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_REJECTED_BY_REMOTE);
  t.expect(IMS_node);

  util_hangup_mo_vt_call(t, IMS_node, QMI_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_cancel_modify_call_002
@description: creates MO call and initiate upgrade to VT and cancel upgrade
==**/
test_result ril_utf_ims_cancel_modify_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x03);
  t.expect(QMI_node);

  // Inject: ims_MsgId_REQUEST_CANCEL_MODIFY_CALL
  IMS_node.update_default_ims_request_cancel_modify_call();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_IMS_CALL_CANCEL_REQ_V02
  QMI_node.update_default_qmi_voice_ims_call_cancel_req_msg(1, VOIP_CANCEL_TYPE_CANCEL_CALL_UPGRADE_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_IMS_CALL_CANCEL_RESP_V02
  QMI_node.update_default_qmi_voice_ims_call_cancel_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  //QMI_node.set_qmi_voice_ims_call_cancel_resp(1, VOIP_CANCEL_TYPE_CANCEL_CALL_UPGRADE_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_CANCEL_MODIFY_CALL (Resp)
  IMS_node.update_default_ims_request_cancel_modify_call_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_failure_cause(QMI_FAILURE_CAUSE_UPGRADE_DOWNGRADE_REJ_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  IMS_node.set_ims_error_value(ims_Error_E_REJECTED_BY_REMOTE);
  t.expect(IMS_node);

  util_hangup_mo_vt_call(t, IMS_node, QMI_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_remote_upgrade_vt_001
@description: MO VoLTE call. Receive upgrade request to upgrade to VT. Accept and turn to VT call
==**/
test_result ril_utf_ims_mo_volte_remote_upgrade_vt_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_MODIFY_ACCEPT_IND_V02
  QMI_node.udpate_default_qmi_voice_modify_accept_ind_msg(1);
  QMI_node.set_qmi_voice_modified_accept_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_MODIFY_CALL
  IMS_node.update_default_ims_unsol_modify_call();
  IMS_node.set_ims_unsol_modify_call_index(1);
  //IMS_node.set_ims_unsol_modify_call_error();
  IMS_node.set_ims_unsol_modify_call_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_ACCEPT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  util_hangup_mo_vt_call(t, IMS_node, QMI_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_remote_upgrade_vt_002
@description: MO VoLTE call. Receive upgrade request to upgrade to VT. Accept and receive failure from modem.
==**/
test_result ril_utf_ims_mo_volte_remote_upgrade_vt_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_MODIFY_ACCEPT_IND_V02
  QMI_node.udpate_default_qmi_voice_modify_accept_ind_msg(1);
  QMI_node.set_qmi_voice_modified_accept_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_MODIFY_CALL
  IMS_node.update_default_ims_unsol_modify_call();
  IMS_node.set_ims_unsol_modify_call_index(1);
  //IMS_node.set_ims_unsol_modify_call_error();
  IMS_node.set_ims_unsol_modify_call_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_ACCEPT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_remote_upgrade_vt_003
@description: MO VoLTE call. Receive upgrade request to upgrade to VT. Do not accept. Recieve upgrade cancelled
==**/
test_result ril_utf_ims_mo_volte_remote_upgrade_vt_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_MODIFY_ACCEPT_IND_V02
  QMI_node.udpate_default_qmi_voice_modify_accept_ind_msg(1);
  QMI_node.set_qmi_voice_modified_accept_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_MODIFY_CALL
  IMS_node.update_default_ims_unsol_modify_call();
  IMS_node.set_ims_unsol_modify_call_index(1);
  //IMS_node.set_ims_unsol_modify_call_error();
  IMS_node.set_ims_unsol_modify_call_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_failure_cause(QMI_FAILURE_CAUSE_UPGRADE_DOWNGRADE_CANCELLED_V02);
//  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
//  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
//  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_MODIFY_CALL
  IMS_node.update_default_ims_unsol_modify_call();
  IMS_node.set_ims_unsol_modify_call_error(ims_Error_E_CANCELLED);
  IMS_node.set_ims_unsol_modify_call_index(1);
  IMS_node.set_ims_unsol_modify_call_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_mo_volte_remote_upgrade_vt_004
@description: Modify call confirm failure cases: with invalid call type / domain
==**/
test_result ril_utf_ims_mo_volte_remote_upgrade_vt_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_MODIFY_ACCEPT_IND_V02
  QMI_node.udpate_default_qmi_voice_modify_accept_ind_msg(1);
  QMI_node.set_qmi_voice_modified_accept_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_MODIFY_CALL
  IMS_node.update_default_ims_unsol_modify_call();
  IMS_node.set_ims_unsol_modify_call_index(1);
  //IMS_node.set_ims_unsol_modify_call_error();
  IMS_node.set_ims_unsol_modify_call_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_SMS, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details((ims_CallType)100, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_NOT_SET);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VT, (ims_CallDomain)100);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_remote_upgrade_vt_005
@description: Modify call confirm failure cases: with invalid call id
==**/
test_result ril_utf_ims_mo_volte_remote_upgrade_vt_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_MODIFY_ACCEPT_IND_V02
  QMI_node.udpate_default_qmi_voice_modify_accept_ind_msg(1);
  QMI_node.set_qmi_voice_modified_accept_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_MODIFY_CALL
  IMS_node.update_default_ims_unsol_modify_call();
  IMS_node.set_ims_unsol_modify_call_index(1);
  //IMS_node.set_ims_unsol_modify_call_error();
  IMS_node.set_ims_unsol_modify_call_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(10);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_remote_upgrade_vt_006
@description: Modify call confirm failure cases: while no calls present
==**/
test_result ril_utf_ims_mo_volte_remote_upgrade_vt_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(1);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_downgrade_volte_001
@description: creates MO VT call and downgrade to VOICE
==**/
test_result ril_utf_ims_mo_vt_downgrade_volte_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VOICE, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x00);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(0x00);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_downgrade_volte_002
@description: creates MO VT call and downgrade to VOICE
==**/
test_result ril_utf_ims_mo_vt_downgrade_volte_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VOICE, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x00);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_call_modified_cause(VOICE_CALL_MODIFIED_CAUSE_DOWNGRADE_DUE_TO_LOCAL_REQ_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(0x00);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_causeCode = TRUE;
  calls[0]->callDetails.causeCode = ims_CauseCodes_CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_LOCAL_REQ;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_downgrade_vt_tx_001
@description: creates MO VT call and downgrade to VT_TX
==**/
test_result ril_utf_ims_mo_vt_downgrade_vt_tx_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT_TX, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_TX;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_downgrade_vt_rx_001
@description: creates MO VT call and downgrade to VT_RX
==**/
test_result ril_utf_ims_mo_vt_downgrade_vt_rx_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT_RX, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(VOICE_CALL_ATTRIB_RX_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_RX;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_downgrade_vt_nodir_001
@description: creates MO VT call and downgrade to VT_NODIR
==**/
test_result ril_utf_ims_mo_vt_downgrade_vt_nodir_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(1);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT_NODIR, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(0x00);
  QMI_node.set_qmi_voice_modified_ind_call_attrib_status(VOICE_CALL_ATTRIB_STATUS_MEDIA_PAUSED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_NODIR;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_MEDIA_PAUSED;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_remote_downgrade_volte_001
@description: creates MO VT call and downgrade to VOICE
==**/
test_result ril_utf_ims_mo_vt_remote_downgrade_volte_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(0);
  QMI_node.set_qmi_voice_modified_ind_call_modified_cause(VOICE_CALL_MODIFIED_CAUSE_DOWNGRADE_DUE_TO_REMOTE_REQ_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_causeCode = TRUE;
  calls[0]->callDetails.causeCode = ims_CauseCodes_CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_REMOTE_REQ;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_remote_downgrade_volte_002
@description: creates MO VT call and downgrade to VOICE; cause due to lipsync
==**/
test_result ril_utf_ims_mo_vt_remote_downgrade_volte_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(0);
  QMI_node.set_qmi_voice_modified_ind_call_modified_cause(VOICE_CALL_MODIFIED_CAUSE_DOWNGRADE_DUE_TO_LIPSYNC_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_causeCode = TRUE;
  calls[0]->callDetails.causeCode = ims_CauseCodes_CAUSE_CODE_SESSION_MODIFY_DOWNGRADE_LIPSYNC;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_remote_downgrade_vt_tx_001
@description: creates MO VT call and remote downgrade to VT_TX
==**/
test_result ril_utf_ims_mo_vt_remote_downgrade_vt_tx_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_TX;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_remote_downgrade_vt_rx_001
@description: creates MO VT call and remote downgrade to VT_RX
==**/
test_result ril_utf_ims_mo_vt_remote_downgrade_vt_rx_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_RX;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_vt_remote_downgrade_vt_nodir_001
@description: creates MO VT call and remote downgrade to VT_NODIR
==**/
test_result ril_utf_ims_mo_vt_remote_downgrade_vt_nodir_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x01);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(0x00);
  QMI_node.set_qmi_voice_modified_ind_call_attrib_status(VOICE_CALL_ATTRIB_STATUS_MEDIA_PAUSED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index     = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state     = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa     = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty     = 0;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT     = 0;
  calls[0]->has_als = TRUE;
  calls[0]->als     = 0;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT_NODIR;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_MEDIA_PAUSED;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_hold_001
@description: creates MO call and hold the call
==**/
test_result ril_utf_ims_mo_volte_hold_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_hold_002
@description: creates MO call and hold the call - failure
==**/
test_result ril_utf_ims_mo_volte_hold_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_hold_003
@description: creates MO call and hold the call - failure
==**/
test_result ril_utf_ims_mo_volte_hold_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_sip_error_code(404);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  ims_SipErrorInfo *sipErrorInfo = IMS_node.update_default_ims_request_hold_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  //sipErrorInfo->has_sipErrorCode = TRUE;
  //sipErrorInfo->sipErrorCode = 404;
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_hold_004
@description: creates MO call and hold the call - failure
==**/
test_result ril_utf_ims_mo_volte_hold_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_sip_error_code(404);
  //End Reason Text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  voice_ip_end_reason_text_type_v02 *end_reason_text = QMI_node.set_qmi_voice_manage_ip_calls_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(int i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  ims_SipErrorInfo *sipErrorInfo = IMS_node.update_default_ims_request_hold_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  sipErrorInfo->has_sipErrorCode = TRUE;
  sipErrorInfo->sipErrorCode = 404;
  sipErrorInfo->sipErrorString.arg = (void *)("Signalling error");
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_hold_005
@description: HOLD request with invalid call id
==**/
test_result ril_utf_ims_mo_volte_hold_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(10);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_hold_006
@description: HOLD request when no calls present
==**/
test_result ril_utf_ims_mo_volte_hold_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_resume_001
@description: creates MO call and hold and resume the call
==**/
test_result ril_utf_ims_mo_volte_resume_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);

#if 0
  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  t.expect(IMS_node);

  util_mo_ims_call_hold_indication(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
#endif

  // Inject: ims_MsgId_REQUEST_RESUME
  IMS_node.update_default_ims_request_resume(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_RESUME_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_RESUME (Resp)
  IMS_node.update_default_ims_request_resume_resp();
  t.expect(IMS_node);

  util_mo_volte_call_active_indication(t, IMS_node, QMI_node);


  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_resume_002
@description: creates MO call and hold and resume the call
==**/
test_result ril_utf_ims_mo_volte_resume_002(user_specified_attrib_t attr)
{
  Testcase t;
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;
  voice_manage_ip_calls_resp_msg_v02 *mng_resp;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);

#if 0
  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  t.expect(IMS_node);

  util_mo_ims_call_hold_indication(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
#endif

  // Inject: ims_MsgId_REQUEST_RESUME
  IMS_node.update_default_ims_request_resume(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_RESUME_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, (qmi_error_type_v01)QMI_ERR_INTERNAL_V01);
#if 0
  QMI_node.set_qmi_voice_manage_ip_calls_sip_error_code(100);
  mng_resp = (voice_manage_ip_calls_resp_msg_v02 *) QMI_node.get_payload();
  mng_resp->call_id_valid = TRUE;
  mng_resp->call_id = 1;
  mng_resp->failure_cause_valid = TRUE;
  mng_resp->failure_cause = QMI_FAILURE_CAUSE_HOLD_RESUME_FAILED_V02;
  //End Reason Text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  voice_ip_end_reason_text_type_v02 *end_reason_text = QMI_node.set_qmi_voice_manage_ip_calls_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(int i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
#endif
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_RESUME (Resp)
  IMS_node.update_default_ims_request_resume_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
//  IMS_node.update_sip_error_info(100, "Signalling error");
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_resume_003
@description: creates MO call and hold and resume the call
==**/
test_result ril_utf_ims_mo_volte_resume_003(user_specified_attrib_t attr)
{
  Testcase t;
  IMSTestnode IMS_node;
  QMIRILTestnode QMI_node;
  voice_manage_ip_calls_resp_msg_v02 *mng_resp;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);

#if 0
  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  t.expect(IMS_node);

  util_mo_ims_call_hold_indication(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
#endif

  // Inject: ims_MsgId_REQUEST_RESUME
  IMS_node.update_default_ims_request_resume(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_RESUME_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, (qmi_error_type_v01)QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_sip_error_code(100);
  mng_resp = (voice_manage_ip_calls_resp_msg_v02 *) QMI_node.get_payload();
  mng_resp->call_id_valid = TRUE;
  mng_resp->call_id = 1;
  mng_resp->failure_cause_valid = TRUE;
  mng_resp->failure_cause = QMI_FAILURE_CAUSE_HOLD_RESUME_FAILED_V02;
  //End Reason Text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  voice_ip_end_reason_text_type_v02 *end_reason_text = QMI_node.set_qmi_voice_manage_ip_calls_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(int i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_RESUME (Resp)
  IMS_node.update_default_ims_request_resume_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  IMS_node.update_sip_error_info(100, "Signalling error");
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_resume_004
@description: Resume request with invalid call id
==**/
test_result ril_utf_ims_mo_volte_resume_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);

#if 0
  // Inject: ims_MsgId_REQUEST_HOLD
  IMS_node.update_default_ims_request_hold(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg((voip_sups_type_enum_v02)VOIP_SUPS_TYPE_CALL_HOLD_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HOLD (Resp)
  IMS_node.update_default_ims_request_hold_resp();
  t.expect(IMS_node);

  util_mo_ims_call_hold_indication(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
#endif

  // Inject: ims_MsgId_REQUEST_RESUME
  IMS_node.update_default_ims_request_resume(5);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_RESUME (Resp)
  IMS_node.update_default_ims_request_resume_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_resume_005
@description: Resume request when no calls present
==**/
test_result ril_utf_ims_mo_volte_resume_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_RESUME
  IMS_node.update_default_ims_request_resume(1);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_RESUME (Resp)
  IMS_node.update_default_ims_request_resume_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_handover_001
@description: MO VoLTE call and handover to WIFI success
==**/
test_result ril_utf_ims_mo_volte_handover_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_IMSA_RAT_HANDOVER_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_rat_handover_status_ind();
  QMI_node.set_qmi_imsa_rat_handover_status_ind_rat_ho_status(
          IMSA_STATUS_RAT_HO_SUCCESS_V01,
          IMSA_WWAN_V01,
          IMSA_WLAN_V01,
          NULL, 0);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_HANDOVER
  IMS_node.update_default_ims_unsol_response_handover();
  IMS_node.set_ims_unsol_response_handover_type(ims_Handover_Msg_Type_COMPLETE_SUCCESS);
  IMS_node.set_ims_unsol_response_srctech(ims_RadioTechType_RADIO_TECH_LTE);
  IMS_node.set_ims_unsol_response_targettech(ims_RadioTechType_RADIO_TECH_WIFI);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_WLAN_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_handover_002
@description: MO VoLTE call and handover to WIFI failure
==**/
test_result ril_utf_ims_mo_volte_handover_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_IMSA_RAT_HANDOVER_STATUS_IND_V01
  std::string cause_code = "CD-04:No Available qualified mobile network";
  QMI_node.update_default_qmi_imsa_rat_handover_status_ind();
  QMI_node.set_qmi_imsa_rat_handover_status_ind_rat_ho_status(
          IMSA_STATUS_RAT_HO_NOT_TRIGGERED_V01,
          IMSA_WWAN_V01,
          IMSA_WLAN_V01,
          cause_code.c_str(), cause_code.length());
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_HANDOVER
  IMS_node.update_default_ims_unsol_response_handover();
  IMS_node.set_ims_unsol_response_handover_type(ims_Handover_Msg_Type_NOT_TRIGGERED);
  IMS_node.set_ims_unsol_response_srctech(ims_RadioTechType_RADIO_TECH_LTE);
  IMS_node.set_ims_unsol_response_targettech(ims_RadioTechType_RADIO_TECH_WIFI);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_RAT_HANDOVER_STATUS_IND_V01
  cause_code = "InvalidCode CD-04:No Available qualified mobile network";
  QMI_node.update_default_qmi_imsa_rat_handover_status_ind();
  QMI_node.set_qmi_imsa_rat_handover_status_ind_rat_ho_status(
          IMSA_STATUS_RAT_HO_FAILURE_V01,
          IMSA_WWAN_V01,
          IMSA_WLAN_V01,
          cause_code.c_str(), cause_code.length());
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_HANDOVER
  IMS_node.update_default_ims_unsol_response_handover();
  IMS_node.set_ims_unsol_response_handover_type(ims_Handover_Msg_Type_COMPLETE_FAIL);
  IMS_node.set_ims_unsol_response_srctech(ims_RadioTechType_RADIO_TECH_LTE);
  IMS_node.set_ims_unsol_response_targettech(ims_RadioTechType_RADIO_TECH_WIFI);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_RAT_HANDOVER_STATUS_IND_V01
  cause_code = "CD-04:    No Available qualified mobile network";
  QMI_node.update_default_qmi_imsa_rat_handover_status_ind();
  QMI_node.set_qmi_imsa_rat_handover_status_ind_rat_ho_status(
          IMSA_STATUS_RAT_HO_NOT_TRIGGERED_MOBILE_DATA_OFF_V01,
          IMSA_WWAN_V01,
          IMSA_WLAN_V01,
          cause_code.c_str(), cause_code.length());
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_HANDOVER
  IMS_node.update_default_ims_unsol_response_handover();
  IMS_node.set_ims_unsol_response_handover_type(ims_Handover_Msg_Type_NOT_TRIGGERED_MOBILE_DATA_OFF);
  IMS_node.set_ims_unsol_response_srctech(ims_RadioTechType_RADIO_TECH_LTE);
  IMS_node.set_ims_unsol_response_targettech(ims_RadioTechType_RADIO_TECH_WIFI);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_RAT_HANDOVER_STATUS_IND_V01
  cause_code = "InvalidCode CD-04:No Available qualified mobile network";
  QMI_node.update_default_qmi_imsa_rat_handover_status_ind();
  QMI_node.set_qmi_imsa_rat_handover_status_ind_rat_ho_status(
          IMSA_STATUS_RAT_HO_FAILURE_V01,
          IMSA_WWAN_V01,
          IMSA_IWLAN_V01,
          cause_code.c_str(), cause_code.length());
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_HANDOVER
  IMS_node.update_default_ims_unsol_response_handover();
  IMS_node.set_ims_unsol_response_handover_type(ims_Handover_Msg_Type_COMPLETE_FAIL);
  IMS_node.set_ims_unsol_response_srctech(ims_RadioTechType_RADIO_TECH_LTE);
  IMS_node.set_ims_unsol_response_targettech(ims_RadioTechType_RADIO_TECH_IWLAN);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_display_text_001
@description: MO call with dial with DisplayText
==**/
test_result ril_utf_ims_mo_volte_display_text_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  char *extra[2] = {"DisplayText=TestDisplayTextHello", nullptr};
  ptr->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  uint16_t display_text[20] = {'T','e','s','t','D','i','s','p','l','a','y','T','e','x','t','H','e','l','l','o'};
  uint16_t *dial_req_display_text = QMI_node.set_qmi_voice_dial_call_req_display_text(20);
  for(int i=0; i<20; i++) {
    dial_req_display_text[i] = display_text[i];
  }
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  // End Reason Text "No RTCP Packets" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {0x4e, 0x6f, 0x20, 0x52, 0x54, 0x43, 0x50, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 100;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 100;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_dial_retries_001
@description: MO call with dial with RetryCallFailRadioTech and RetryCallFailReason
==**/
test_result ril_utf_ims_mo_volte_dial_retries_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  char *extra[3] = {
    "RetryCallFailRadioTech=19", /*RADIO_TECH_WIFI=19*/
    "RetryCallFailReason=619", /*CALL_FAIL_RETRY_ON_IMS_WITHOUT_RTT=619*/
    nullptr};
  ptr->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  QMI_node.set_qmi_voice_dial_call_req_call_failure_reason(CALL_END_CAUSE_RETRY_ON_IMS_WITHOUT_RTT_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_failure_mode(CALL_MODE_WLAN_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  // End Reason Text "No RTCP Packets" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {0x4e, 0x6f, 0x20, 0x52, 0x54, 0x43, 0x50, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 100;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 100;
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_additional_call_info_001
@description: MO call with dial with additional_call_info
==**/
test_result ril_utf_ims_mo_volte_additional_call_info_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

#define ADDITIONAL_CALL_INFO_1 "P---Com.NameId---Extended---Name---First: Jason\n"
#define ADDITIONAL_CALL_INFO_2 "P---Com.NameId---Extended---Name---Last: Torrey"


  uint32_t add_call_info_size_1 = strlen(ADDITIONAL_CALL_INFO_1);
  uint32_t add_call_info_size_2 = strlen(ADDITIONAL_CALL_INFO_2);
  uint32_t add_call_info_total_size = add_call_info_size_1 + add_call_info_size_2+1;

  QMI_node.update_default_qmi_voice_additional_call_info_ind_msg(1);
  uint8_t *additional_call_info =
          QMI_node.set_qmi_voice_additional_call_info_ind_extension_header_info(0, add_call_info_size_1, add_call_info_total_size);
  strlcpy((char *)additional_call_info, ADDITIONAL_CALL_INFO_1, add_call_info_size_1+1);
  t.inject(QMI_node);

  QMI_node.update_default_qmi_voice_additional_call_info_ind_msg(1);
  additional_call_info =
          QMI_node.set_qmi_voice_additional_call_info_ind_extension_header_info(1, add_call_info_size_2+1, add_call_info_total_size);
  strlcpy((char *)additional_call_info, ADDITIONAL_CALL_INFO_2, add_call_info_size_2+1);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[3] = {"Codec=AMR_WB", "AdditionalCallInfo=P---Com.NameId---Extended---Name---First: Jason\nP---Com.NameId---Extended---Name---Last: Torrey", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_001
@description: MT VoLTE call
==**/
test_result ril_utf_ims_mt_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, true);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_002
@description: MT VoLTE call - reject
==**/
test_result ril_utf_ims_mt_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_incoming_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_003
@description: MT VoLTE call with verstat info
==**/
test_result ril_utf_ims_mt_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra[2] = {0, 0};
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  voice_MT_call_verstat_with_id_type_v02 *mt_verstat = QMI_node.set_qmi_voice_all_call_status_ind_mt_call_verstat(1);
  mt_verstat[0].call_id = 1;
  mt_verstat[0].verstat_info.network_supports_unwanted_call = 1;
  mt_verstat[0].verstat_info.mt_call_verstat_info = MT_IMS_TN_VALIDATION_FAIL_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->hasVerstatInfo = TRUE;
  calls[0]->verstatInfo.canMarkUnwantedCall = TRUE;
  calls[0]->verstatInfo.verificationStatus = ims_VerstatVerificationStatus_FAIL;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_004
@description: MT VoLTE call with verstat info
==**/
test_result ril_utf_ims_mt_call_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra[2] = {0, 0};
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  voice_MT_call_verstat_with_id_type_v02 *mt_verstat = QMI_node.set_qmi_voice_all_call_status_ind_mt_call_verstat(1);
  mt_verstat[0].call_id = 1;
  mt_verstat[0].verstat_info.network_supports_unwanted_call = 1;
  mt_verstat[0].verstat_info.mt_call_verstat_info = MT_IMS_TN_VALIDATION_PASS_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->hasVerstatInfo = TRUE;
  calls[0]->verstatInfo.canMarkUnwantedCall = TRUE;
  calls[0]->verstatInfo.verificationStatus = ims_VerstatVerificationStatus_PASS;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_005
@description: MT VoLTE call with verstat info
==**/
test_result ril_utf_ims_mt_call_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra[2] = {0, 0};
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  voice_MT_call_verstat_with_id_type_v02 *mt_verstat = QMI_node.set_qmi_voice_all_call_status_ind_mt_call_verstat(1);
  mt_verstat[0].call_id = 1;
  mt_verstat[0].verstat_info.network_supports_unwanted_call = 0;
  mt_verstat[0].verstat_info.mt_call_verstat_info = MT_IMS_TN_VALIDATION_NONE_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->hasVerstatInfo = TRUE;
  calls[0]->verstatInfo.canMarkUnwantedCall = TRUE;
  calls[0]->verstatInfo.verificationStatus = ims_VerstatVerificationStatus_NONE;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_006
@description: MT VoLTE call with ip_hist_info
==**/
test_result ril_utf_ims_mt_call_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra[2] = {0, 0};
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  uint16_t ip_hist_info[512] = { 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x2b, 0x34, 0x39, 0x31, 0x35, 0x31, 0x35, 0x39, 0x37, 0x30, 0x38, 0x32, 0x34, 0x32, 0x40, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x2d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3e, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x31, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x2b, 0x34, 0x39, 0x31, 0x35, 0x31, 0x35, 0x39, 0x37, 0x30, 0x38, 0x32, 0x31, 0x37, 0x40, 0x64, 0x74, 0x61, 0x67, 0x2e, 0x64, 0x65, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3b, 0x63, 0x61, 0x75, 0x73, 0x65, 0x3d, 0x33, 0x30, 0x32, 0x3e, 0x3b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x31, 0x2e, 0x31, };
  voice_ip_hist_info_type_v02* hist_info = QMI_node.set_qmi_voice_all_call_status_ind_ip_hist_info(1);
  hist_info[0].call_id = 1;
  hist_info[0].ip_hist_info_len = 238;
  for(int i=0; i<238; i++) {
    hist_info[0].ip_hist_info[i] = ip_hist_info[i];
  }
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->historyInfo.arg = strdup("<sip:+4915159708242@ims.test.t-mobile.de;user=phone>;index=1<sip:+4915159708217@dtag.de;user=phone;cause=302>;index=1.1");
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_007
@description: MT VoLTE call with alternate_sip_uris
==**/
test_result ril_utf_ims_mt_call_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra[2] = {0, 0};
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  voice_sip_uri_with_id_type_v02 *alternate_sip_uris = QMI_node.set_qmi_voice_all_call_status_ind_alternate_sip_uris(1);
  alternate_sip_uris[0].call_id = 1;
  strlcpy(alternate_sip_uris[0].sip_uri, "sip:+4915159708217@dtag.de", sizeof(alternate_sip_uris[0].sip_uri));
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.sipAlternateUri.arg = strdup("sip:+4915159708217@dtag.de");
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.sipAlternateUri.arg = strdup("sip:+4915159708217@dtag.de");
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_008
@description: MT VoLTE call with AdditionalCallInfo
==**/
test_result ril_utf_ims_mt_call_008(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  voice_is_add_info_present_with_id_type_v02* is_add_info_present = QMI_node.set_qmi_voice_all_call_status_ind_is_add_info_present(1);
  is_add_info_present[0].call_id = 1;
  is_add_info_present[0].is_add_info_present = TRUE;
  is_add_info_present[0].num_indications = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);


#define ADDITIONAL_CALL_INFO_1 "P---Com.NameId---Extended---Name---First: Jason\n"
#define ADDITIONAL_CALL_INFO_2 "P---Com.NameId---Extended---Name---Last: Torrey"


  uint32_t add_call_info_size_1 = strlen(ADDITIONAL_CALL_INFO_1);
  uint32_t add_call_info_size_2 = strlen(ADDITIONAL_CALL_INFO_2);
  uint32_t add_call_info_total_size = add_call_info_size_1 + add_call_info_size_2+1;

  QMI_node.update_default_qmi_voice_additional_call_info_ind_msg(1);
  uint8_t *additional_call_info =
          QMI_node.set_qmi_voice_additional_call_info_ind_extension_header_info(0, add_call_info_size_1, add_call_info_total_size);
  strlcpy((char *)additional_call_info, ADDITIONAL_CALL_INFO_1, add_call_info_size_1+1);
  t.inject(QMI_node);

  QMI_node.update_default_qmi_voice_additional_call_info_ind_msg(1);
  additional_call_info =
          QMI_node.set_qmi_voice_additional_call_info_ind_extension_header_info(1, add_call_info_size_2+1, add_call_info_total_size);
  strlcpy((char *)additional_call_info, ADDITIONAL_CALL_INFO_2, add_call_info_size_2+1);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  char *extra[2] = {"AdditionalCallInfo=P---Com.NameId---Extended---Name---First: Jason\nP---Com.NameId---Extended---Name---Last: Torrey", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_009
@description: MT VoLTE call with is_secondary and terminating number
==**/
test_result ril_utf_ims_mt_call_009(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra[2] = {0, 0};
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  voice_num_with_id_type_v02 *terminating_num = QMI_node.set_qmi_voice_all_call_status_ind_terminating_num(1);
  terminating_num[0].call_id = 1;
  terminating_num[0].num_len = strlen("4915159708217");
  strlcpy(terminating_num[0].num, "4915159708217", strlen("4915159708217")+1);
  QMI_node.set_qmi_voice_all_call_status_ind_is_secondary(TRUE);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  strlcpy(calls[0]->terminatingNumber, "4915159708217", sizeof(calls[0]->terminatingNumber));
  calls[0]->isSecondary = TRUE;
  t.expect(IMS_node);

  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_display_text_001
@description: MT LTE call through IMS with display text
==**/
test_result ril_utf_ims_mt_call_display_text_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  char *extra[2] = {0, 0};
  char extra_display_text[] = "DisplayText=JTORREY";
  extra[0] = extra_display_text;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;

  // display text "JTORREY" in UTF-16 format
  voice_display_text_info_type_v02 *display_text = QMI_node.set_qmi_voice_all_call_status_ind_display_text(1);
  display_text[0].call_id = 1;
  display_text[0].display_text_len = 7;
  display_text[0].display_text[0] = 0x4A;
  display_text[0].display_text[1] = 0x54;
  display_text[0].display_text[2] = 0x4F;
  display_text[0].display_text[3] = 0x52;
  display_text[0].display_text[4] = 0x52;
  display_text[0].display_text[5] = 0x45;
  display_text[0].display_text[6] = 0x59;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  // Add dispalay text
  calls[0]->callDetails.extras.arg = (void *)extra;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->callDetails.extras.arg = (void *)extra;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_child_number_001
@description: MT LTE call through IMS
==**/
test_result ril_utf_ims_mt_call_child_number_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  char *extra_1[3] = {0, 0, 0};
  char *extra_2[3] = {0, 0, 0};
  char extras_child_num[] = "ChildNum=01049526417";
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  // Child Number
  voice_child_number_info_type_v02 *child_num_list = QMI_node.set_qmi_voice_all_call_status_ind_child_number(1);
  child_num_list[0].call_id = 1;
  child_num_list[0].number_len = strlen("01049526417");
  strlcpy(child_num_list[0].number, "01049526417", strlen("01049526417")+1);
  t.inject(QMI_node);

  // Child number expected in extras
  extra_1[0] = extras_child_num;

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_1;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Codec and Child number expected in extras
  extra_2[0] = extras_codec;
  extra_2[1] = extras_child_num;

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_2;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_2;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->callDetails.extras.arg = (void *)extra_2;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_call_child_number_002
@description: MT LTE call through IMS
==**/
test_result ril_utf_ims_mt_call_child_number_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  char *extra_1[3] = {0, 0, 0};
  char *extra_2[3] = {0, 0, 0};
  char extras_child_num[] = "ChildNum=012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789";
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  // Child Number
  voice_child_number_info_type_v02 *child_num_list = QMI_node.set_qmi_voice_all_call_status_ind_child_number(1);
  child_num_list[0].call_id = 1;
  child_num_list[0].number_len
    = strlen("012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");
  strlcpy(child_num_list[0].number,
    "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
      strlen("012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789")+1);


  t.inject(QMI_node);

  // Child number expected in extras
  extra_1[0] = extras_child_num;

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_1;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Codec and Child number expected in extras
  extra_2[0] = extras_codec;
  extra_2[1] = extras_child_num;

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_2;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_2;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->callDetails.extras.arg = (void *)extra_2;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_long_number_001
@description: Creates MT call from a number greater than 81 characters. Uses voice_ip_num_id_type_v02
              type instead of voice_remote_party_number2_type_v02 in the all call status indication.
==**/
test_result ril_utf_ims_mt_long_number_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // ip num ifo
  voice_ip_num_id_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_ip_num_info(1);
  number_list[0].call_id = 1;
  strlcpy(number_list[0].ip_num,
          "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
          strlen("012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"));
  number_list[0].ip_num_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_ip_num_info(1);
  number_list[0].call_id = 1;
  strlcpy(number_list[0].ip_num,
          "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
          strlen("012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"));
  number_list[0].ip_num_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_ip_num_info(1);
  number_list[0].call_id = 1;
  strlcpy(number_list[0].ip_num,
          "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
          strlen("012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"));
  number_list[0].ip_num_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_long_number_001
@description: Make MO LTE call. Call gets forwarded. Connected party number
              received in QMI all_call_status indication in is greater than
              81 characters.
==**/
test_result ril_utf_ims_mo_long_number_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_clir = true;
  ptr->clir = 1;  // CLIR_INVOCATION_OPTION
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_clir_type(CLIR_INVOCATION_V02);
  QMI_node.set_qmi_voice_dial_call_req_pi(IP_PRESENTATION_NUM_RESTRICTED_V02);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SPEECH_CODEC_INFO_IND_V02
  QMI_node.update_default_qmi_voice_speech_codec_info_ind_msg();
  QMI_node.set_qmi_voice_speech_codec_info_ind_call_id(1);
  QMI_node.set_qmi_voice_speech_codec_info_ind_network_mode(VOICE_NETWORK_MODE_LTE_V02);
  QMI_node.set_qmi_voice_speech_codec_info_ind_speech_codec(VOICE_SPEECH_CODEC_AMR_WB_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // connected party number
  voice_conn_ip_num_with_id_type_v02 *number_list_conn =
    QMI_node.set_qmi_voice_all_call_status_ind_conn_party_extension(1);
  number_list_conn[0].call_id = 1;
  number_list_conn[0].conn_ip_num_pi = PRESENTATION_NUM_ALLOWED_V02;
  strlcpy(number_list_conn[0].conn_ip_num,
          "123012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
          strlen("123012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"));
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // connected party number
  number_list_conn = QMI_node.set_qmi_voice_all_call_status_ind_conn_party_extension(1);
  number_list_conn[0].call_id = 1;
  number_list_conn[0].conn_ip_num_pi = PRESENTATION_NUM_ALLOWED_V02;
  strlcpy(number_list_conn[0].conn_ip_num,
          "123012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
          strlen("123012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"));
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_callfailcauseresponse_001
@description: MT LTE call through IMS. Incoming call is rejected with HANGUP reuest
==**/
test_result ril_utf_ims_callfailcauseresponse_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_incoming_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  IMS_node.set_ims_request_hangup_callfailcauseresponse_errorinfo("2");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_call(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_cause(VOICE_REJECT_CAUSE_USER_REJECT_V02);  //2
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_callfailcauseresponse_002
@description: MT LTE call through IMS. Incoming call is rejected with HANGUP reuest
==**/
test_result ril_utf_ims_callfailcauseresponse_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_incoming_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  IMS_node.set_ims_request_hangup_callfailcauseresponse_failcause(ims_CallFailCause_CALL_FAIL_BLACKLISTED_CALL_ID);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_call(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_cause(VOICE_REJECT_CAUSE_BLACKLISTED_CALL_ID_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_callfailcauseresponse_003
@description: MT LTE call through IMS. Incoming call is rejected with HANGUP reuest
==**/
test_result ril_utf_ims_callfailcauseresponse_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_incoming_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  IMS_node.set_ims_request_hangup_callfailcauseresponse_failcause(ims_CallFailCause_CALL_FAIL_USER_BUSY);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_call(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_cause(VOICE_REJECT_CAUSE_USER_REJECT_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_callfailcauseresponse_004
@description: MT LTE call through IMS. Incoming call is rejected with HANGUP reuest
==**/
test_result ril_utf_ims_callfailcauseresponse_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_incoming_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  IMS_node.set_ims_request_hangup_callfailcauseresponse_failcause(ims_CallFailCause_CALL_FAIL_SIP_USER_MARKED_UNWANTED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_call(1);
  QMI_node.set_qmi_voice_answer_call_req_reject_cause(VOICE_REJECT_CAUSE_UNWANTED_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_callfailcauseresponse_005
@description: MT LTE call through IMS. Active call is rejected with HANGUP reuest
==**/
test_result ril_utf_ims_callfailcauseresponse_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  IMS_node.set_ims_request_hangup_callfailcauseresponse_errorinfo("2");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  QMI_node.set_qmi_voice_end_call_req_end_cause(VOICE_REJECT_CAUSE_USER_REJECT_V02);  //2
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_mt_vt_call_001
@description: MT VT call - accept as VT
==**/
test_result ril_utf_ims_mt_vt_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, true);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id         = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_002
@description: MT VT call - accept as VT_RX
==**/
test_result ril_utf_ims_mt_vt_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT_RX, false);
  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT_RX);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_003
@description: MT VT call - accept as VT_TX
==**/
test_result ril_utf_ims_mt_vt_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT_TX, false);
  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT_TX);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_004
@description: MT VT call - accept as VOICE
==**/
test_result ril_utf_ims_mt_vt_call_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VOICE, false);
  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_005
@description: MT VT call - accept as NONE
==**/
test_result ril_utf_ims_mt_vt_call_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_UNKNOWN, false);
  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_006
@description: MT VT_TX call - accept as VT_TX
==**/
test_result ril_utf_ims_mt_vt_call_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT_TX, ims_CallType_CALL_TYPE_VT_TX, false);
  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT_TX);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_007
@description: MT VT_TX call - accept as VOICE
==**/
test_result ril_utf_ims_mt_vt_call_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT_TX, ims_CallType_CALL_TYPE_VOICE, false);
  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_008
@description: MT VT_RX call - accept as VT_RX
==**/
test_result ril_utf_ims_mt_vt_call_008(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT_RX, ims_CallType_CALL_TYPE_VT_RX, false);
  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT_RX);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_009
@description: MT VT_RX call - accept as VOICE
==**/
test_result ril_utf_ims_mt_vt_call_009(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_answer(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT_RX, ims_CallType_CALL_TYPE_VOICE, false);
  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_010
@description: MT VT call - accept as VT with presentaton allowed
==**/
test_result ril_utf_ims_mt_vt_call_010(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_incoming_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  IMS_node.set_ims_request_answer_call_type(ims_CallType_CALL_TYPE_VT);
  IMS_node.set_ims_request_answer_presentation(ims_IpPresentation_IP_PRESENTATION_NUM_ALLOWED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_answer_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_answer_call_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_answer_call_req_pi(IP_PRESENTATION_NUM_ALLOWED_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id         = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_conn_index(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id         = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mt_vt_call_011
@description: MT VT call - accept as VT
==**/
test_result ril_utf_ims_mt_vt_call_011(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_mt_ims_call_incoming_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VT);

  // Inject: ims_MsgId_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  IMS_node.set_ims_request_answer_call_type(ims_CallType_CALL_TYPE_VT);
  IMS_node.set_ims_request_answer_presentation(ims_IpPresentation_IP_PRESENTATION_NUM_RESTRICTED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_answer_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_answer_call_req_video_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_answer_call_req_pi(IP_PRESENTATION_NUM_RESTRICTED_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VT_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Audio attributes
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  // Video attributes
  voice_call_attributes_type_v02 *video_attrib = QMI_node.set_qmi_voice_all_call_status_ind_video_attrib(1);
  video_attrib[0].call_id         = 1;
  video_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_vice_call_pull_001
@description: VICE indication and call pull
--TODO--
==**/
test_result ril_utf_ims_mo_volte_vice_call_pull_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_explicit_call_transfer_001
@description: explicit_call_transfer
==**/
test_result ril_utf_ims_explicit_call_transfer_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER
  ims_ExplicitCallTransfer *ect = IMS_node.update_default_ims_request_explicit_call_transfer();
  ect->has_callId = TRUE;
  ect->callId = 1;
  ect->has_ectType = TRUE;
  ect->ectType = ims_EctType_BLIND_TRANSFER;
  ect->targetAddress.arg = strdup("1234567890");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_EXPLICIT_CALL_TRANSFER_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_ect_type(ECT_TYPE_BLIND_TRANSFER_V02);
  char *sip_uri = QMI_node.set_qmi_voice_manage_ip_calls_sip_uri();
  strlcpy(sip_uri, "1234567890", strlen("1234567890")+1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER (Resp)
  IMS_node.update_default_ims_request_explicit_call_transfer_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);



  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_explicit_call_transfer_002
@description: explicit_call_transfer : ASSURED_TRANSFER
==**/
test_result ril_utf_ims_explicit_call_transfer_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER
  ims_ExplicitCallTransfer *ect = IMS_node.update_default_ims_request_explicit_call_transfer();
  ect->has_callId = TRUE;
  ect->callId = 1;
  ect->has_ectType = TRUE;
  ect->ectType = ims_EctType_ASSURED_TRANSFER;
  ect->targetAddress.arg = strdup("1234567890");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_EXPLICIT_CALL_TRANSFER_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_ect_type(ECT_TYPE_ASSURED_TRANSFER_V02);
  char *sip_uri = QMI_node.set_qmi_voice_manage_ip_calls_sip_uri();
  strlcpy(sip_uri, "1234567890", strlen("1234567890")+1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER (Resp)
  IMS_node.update_default_ims_request_explicit_call_transfer_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);



  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_explicit_call_transfer_003
@description: explicit_call_transfer : CONSULTATIVE_TRANSFER
==**/
test_result ril_utf_ims_explicit_call_transfer_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_make_two_volte_calls_hold_active(t, IMS_node, QMI_node);

  // Inject: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER
  ims_ExplicitCallTransfer *ect = IMS_node.update_default_ims_request_explicit_call_transfer();
  ect->has_callId = TRUE;
  ect->callId = 1;
  ect->has_ectType = TRUE;
  ect->ectType = ims_EctType_CONSULTATIVE_TRANSFER;
  ect->has_targetCallId = TRUE;
  ect->targetCallId = 2;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_EXPLICIT_CALL_TRANSFER_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  QMI_node.set_qmi_voice_manage_ip_calls_req_ect_type(ECT_TYPE_CONSULTATIVE_TRANSFER_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_transfer_target_call_id(2);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER (Resp)
  IMS_node.update_default_ims_request_explicit_call_transfer_resp();
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  call_info[1].call_id = 2;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[1].call_id = 2;
  number_list[1].number_len = strlen("2428536961");
  strlcpy(number_list[1].number, "2428536961", strlen("2428536961")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 2;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(2);
  calls[0]->has_index = TRUE;
  calls[0]->index = 2;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[1]->has_index = TRUE;
  calls[1]->index = 1;
  calls[1]->has_state = TRUE;
  calls[1]->state = ims_CallState_CALL_HOLDING;
  calls[1]->has_toa = TRUE;
  calls[1]->toa = 129;
  calls[1]->has_isMpty = TRUE;
  calls[1]->has_isMT = TRUE;
  calls[1]->has_als = TRUE;
  calls[1]->has_isVoice = TRUE;
  calls[1]->isVoice = 1;
  calls[1]->has_isVoicePrivacy = TRUE;
  calls[1]->isVoicePrivacy = 0;
  calls[1]->callDetails.has_callDomain = TRUE;
  calls[1]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[1]->callDetails.has_callType = TRUE;
  calls[1]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[1]->callDetails.has_mediaId = TRUE;
  calls[1]->callDetails.mediaId = 2;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[1]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_explicit_call_transfer_004
@description: explicit_call_transfer failure case; invalid call id
==**/
test_result ril_utf_ims_explicit_call_transfer_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER
  ims_ExplicitCallTransfer *ect = IMS_node.update_default_ims_request_explicit_call_transfer();
  ect->has_callId = TRUE;
  ect->callId = 10;
  ect->has_ectType = TRUE;
  ect->ectType = ims_EctType_BLIND_TRANSFER;
  ect->targetAddress.arg = strdup("1234567890");
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER (Resp)
  IMS_node.update_default_ims_request_explicit_call_transfer_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_explicit_call_transfer_005
@description: explicit_call_transfer CONSULTATIVE_TRANSFER failure case; invalid target call id
==**/
test_result ril_utf_ims_explicit_call_transfer_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER
  ims_ExplicitCallTransfer *ect = IMS_node.update_default_ims_request_explicit_call_transfer();
  ect->has_callId = TRUE;
  ect->callId = 1;
  ect->has_ectType = TRUE;
  ect->ectType = ims_EctType_CONSULTATIVE_TRANSFER;
  ect->has_targetCallId = TRUE;
  ect->targetCallId = 10;
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER (Resp)
  IMS_node.update_default_ims_request_explicit_call_transfer_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_explicit_call_transfer_006
@description: explicit_call_transfer failure case; invalid ect type
==**/
test_result ril_utf_ims_explicit_call_transfer_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER
  ims_ExplicitCallTransfer *ect = IMS_node.update_default_ims_request_explicit_call_transfer();
  ect->has_callId = TRUE;
  ect->callId = 1;
  ect->has_ectType = TRUE;
  ect->ectType = (ims_EctType)10;
  ect->targetAddress.arg = strdup("1234567890");
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_EXPLICIT_CALL_TRANSFER (Resp)
  IMS_node.update_default_ims_request_explicit_call_transfer_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_deflect_call_001
@description: Deflect call
==**/
test_result ril_utf_ims_deflect_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  char *extra_1[3] = {0, 0, 0};
  char *extra_2[3] = {0, 0, 0};
  char extras_child_num[] = "ChildNum=01049526417";
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  // Child Number
  voice_child_number_info_type_v02 *child_num_list = QMI_node.set_qmi_voice_all_call_status_ind_child_number(1);
  child_num_list[0].call_id = 1;
  child_num_list[0].number_len = strlen("01049526417");
  strlcpy(child_num_list[0].number, "01049526417", strlen("01049526417")+1);
  t.inject(QMI_node);

  // Child number expected in extras
  extra_1[0] = extras_child_num;

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_1;
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_DEFLECT_CALL
  ims_DeflectCall *deflectReq = IMS_node.update_default_ims_request_deflect_call();
  deflectReq->has_conn_index = TRUE;
  deflectReq->conn_index = 1;
  deflectReq->number.arg = strdup("1234567890");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_CALL_DEFLECTION_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  char *sip_uri = QMI_node.set_qmi_voice_manage_ip_calls_sip_uri();
  strlcpy(sip_uri, "1234567890", strlen("1234567890")+1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DEFLECT_CALL (Resp)
  IMS_node.update_default_ims_request_deflect_call_resp();
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->callDetails.extras.arg = (void *)extra_2;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_deflect_call_002
@description: Deflect call : failure cases
==**/
test_result ril_utf_ims_deflect_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  char *extra_1[3] = {0, 0, 0};
  char *extra_2[3] = {0, 0, 0};
  char extras_child_num[] = "ChildNum=01049526417";
  char extras_codec[] = "Codec=AMR_WB";

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  // Child Number
  voice_child_number_info_type_v02 *child_num_list = QMI_node.set_qmi_voice_all_call_status_ind_child_number(1);
  child_num_list[0].call_id = 1;
  child_num_list[0].number_len = strlen("01049526417");
  strlcpy(child_num_list[0].number, "01049526417", strlen("01049526417")+1);
  t.inject(QMI_node);

  // Child number expected in extras
  extra_1[0] = extras_child_num;

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_1;
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_DEFLECT_CALL
  ims_DeflectCall *deflectReq = IMS_node.update_default_ims_request_deflect_call();
  deflectReq->has_conn_index = TRUE;
  deflectReq->conn_index = 1;
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_DEFLECT_CALL (Resp)
  IMS_node.update_default_ims_request_deflect_call_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_DEFLECT_CALL
  deflectReq = IMS_node.update_default_ims_request_deflect_call();
  deflectReq->number.arg = strdup("1234567890");
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_DEFLECT_CALL (Resp)
  IMS_node.update_default_ims_request_deflect_call_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_DEFLECT_CALL
  deflectReq = IMS_node.update_default_ims_request_deflect_call();
  deflectReq->has_conn_index = TRUE;
  deflectReq->conn_index = 1;
  deflectReq->number.arg = strdup("1234567890");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_CALL_DEFLECTION_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(1);
  char *sip_uri = QMI_node.set_qmi_voice_manage_ip_calls_sip_uri();
  strlcpy(sip_uri, "1234567890", strlen("1234567890")+1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DEFLECT_CALL (Resp)
  IMS_node.update_default_ims_request_deflect_call_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->callDetails.extras.arg = (void *)extra_2;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_dtmf_001
@description: DTMF
==**/
test_result ril_utf_ims_dtmf_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_DTMF
  IMS_node.update_default_ims_request_dtmf("1");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '1');
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DTMF (Resp)
  IMS_node.update_default_ims_request_dtmf_resp();
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_dtmf_002
@description: DTMF
==**/
test_result ril_utf_ims_dtmf_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: ims_MsgId_REQUEST_DTMF_START
  IMS_node.update_default_ims_request_dtmf_start("1");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_START_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_req_msg(0xFF, '1');
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_START_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_start_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DTMF_START (Resp)
  IMS_node.update_default_ims_request_dtmf_start_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_DTMF_STOP
  IMS_node.update_default_ims_request_dtmf_stop();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_STOP_CONT_DTMF_REQ_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_req_msg(0xFF);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_STOP_CONT_DTMF_RESP_V02
  QMI_node.update_default_qmi_voice_stop_cont_dtmf_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DTMF_STOP (Resp)
  IMS_node.update_default_ims_request_dtmf_stop_resp();
  t.expect(IMS_node);

  util_hangup_mo_volte_call(t, CALL_MODE_LTE_V02);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_call_sip_uri_001
@description: sip_uri_overflow test case
==**/
test_result ril_utf_ims_mo_volte_call_sip_uri_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  char *calling_number   = "12345678901234567890123456789012345678901234567890123456789012345678901234567890";
  char *sip_uri_overflow = "1SIPOVERFLOWTest";
  char *address = "123456789012345678901234567890123456789012345678901234567890123456789012345678901SIPOVERFLOWTest";

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial(address);
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg(calling_number);
  QMI_node.set_qmi_voice_dial_call_req_sip_uri_overflow(sip_uri_overflow);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen(calling_number);
  strlcpy(number_list[0].number, calling_number, sizeof(number_list[0].number));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen(calling_number);
  strlcpy(number_list[0].number, calling_number, sizeof(number_list[0].number));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen(calling_number);
  strlcpy(number_list[0].number, calling_number, sizeof(number_list[0].number));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_volte_call_sip_uri_002
@description: DTMF
==**/
test_result ril_utf_ims_mo_volte_call_sip_uri_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  char *calling_number   = "+12345678901234567890123456789012345678901234567890123456789012345678901234567890";
  char *sip_uri_overflow = "SIPOVERFLOWTest";
  char *address          = "+12345678901234567890123456789012345678901234567890123456789012345678901234567890SIPOVERFLOWTest";

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial(address);
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg(calling_number);
  QMI_node.set_qmi_voice_dial_call_req_sip_uri_overflow(sip_uri_overflow);
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen(calling_number);
  strlcpy(number_list[0].number, calling_number, sizeof(number_list[0].number));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 145;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen(calling_number);
  strlcpy(number_list[0].number, calling_number, sizeof(number_list[0].number));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 145;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen(calling_number);
  strlcpy(number_list[0].number, calling_number, sizeof(number_list[0].number));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 145;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_conf_001
@description: Make conference call
==**/
test_result ril_utf_ims_mo_conf_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Make 3way conference call");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_conf_002
@description: failure case : Make conference call
==**/
test_result ril_utf_ims_mo_conf_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Make 3way conference call: failure case");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_CONFERENCE
  IMS_node.update_default_ims_request_conference();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_CONFERENCE (resp)
  IMS_node.update_default_ims_request_conference_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_conf_003
@description: failure case : Make conference call
==**/
test_result ril_utf_ims_mo_conf_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Make 3way conference call: failure case with sip error code");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_CONFERENCE
  IMS_node.update_default_ims_request_conference();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_sip_error_code(404);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_CONFERENCE (resp)
  ims_SipErrorInfo *sipErrorInfo = IMS_node.update_default_ims_request_conference_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  //sipErrorInfo->has_sipErrorCode = TRUE;
  //sipErrorInfo->sipErrorCode = 404;
  //sipErrorInfo->sipErrorString.arg = nullptr;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_conf_004
@description: failure case : Make conference call
==**/
test_result ril_utf_ims_mo_conf_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Make 3way conference call: failure case with sip error code and error string");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_CONFERENCE
  IMS_node.update_default_ims_request_conference();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_manage_ip_calls_sip_error_code(404);
  //End Reason Text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  voice_ip_end_reason_text_type_v02 *end_reason_text = QMI_node.set_qmi_voice_manage_ip_calls_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(int i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_CONFERENCE (resp)
  ims_SipErrorInfo *sipErrorInfo = IMS_node.update_default_ims_request_conference_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  sipErrorInfo->has_sipErrorCode = TRUE;
  sipErrorInfo->sipErrorCode = 404;
  sipErrorInfo->sipErrorString.arg = (void *)("Signalling error");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_conf_005
@description: failure case : Make conference call when no calls present
==**/
test_result ril_utf_ims_mo_conf_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Make conference call request: failure case");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_CONFERENCE
  IMS_node.update_default_ims_request_conference();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_CONFERENCE (resp)
  IMS_node.update_default_ims_request_conference_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_mo_conf_006
@description: Two MO calls are merged into conference. One participant is dropped
                using connection uri. Then all calls are dropped.
==**/
test_result ril_utf_ims_mo_conf_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_multi_party(TRUE);
  IMS_node.set_ims_request_hangup_conn_uri("sip:30000@test.3gpp.com");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_SPECIFIED_CALL_FROM_CONFERENCE_V02);
  char *sip_uri = QMI_node.set_qmi_voice_manage_ip_calls_sip_uri();
  strlcpy(sip_uri, "sip:30000@test.3gpp.com", strlen("sip:30000@test.3gpp.com")+1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_HANGUP
  IMS_node.update_default_ims_request_hangup();
  IMS_node.set_ims_request_hangup_multi_party(TRUE);
  IMS_node.set_ims_request_hangup_conn_uri("sip:30000@test.3gpp.com");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_RELEASE_SPECIFIED_CALL_FROM_CONFERENCE_V02);
  sip_uri = QMI_node.set_qmi_voice_manage_ip_calls_sip_uri();
  strlcpy(sip_uri, "sip:30000@test.3gpp.com", strlen("sip:30000@test.3gpp.com")+1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_HANGUP (resp)
  IMS_node.update_default_ims_request_hangup_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_cs_call_number_handle_in_conn_party_num_tlv
@description: This test creates an MO call through a dial request. And call got forwarded and number getting
in conn_party_num tlv in ALL_CALL_STATUS_IND
==**/
test_result ril_utf_test_cs_call_number_handle_in_conn_party_num_tlv(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id("ril_utf_test_cs_call_number_handle_in_conn_party_num_tlv");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
// TODO: Verify output is correct and build whole message
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  //RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->state = RIL_CALL_DIALING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#else
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  //remote_party_num
  number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ALERTING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#else
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 0;
#endif
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  //remote_party_number
  number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // conn_party_number
  voice_conn_num_with_id_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_conn_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].conn_num_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].conn_num_len = strlen("1234567890");
  strlcpy(number_list[0].conn_num, "1234567890", strlen("1234567890")+1);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
#ifdef RIL_UTF_L_MASTER
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "1234567890");
#endif
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  //remote_party_number
  number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // conn_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_conn_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].conn_num_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].conn_num_len = strlen("1234567890");
  strlcpy(number_list[0].conn_num, "1234567890", strlen("1234567890")+1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  //remote_party_number
  number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // conn_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_conn_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].conn_num_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].conn_num_len = strlen("1234567890");
  strlcpy(number_list[0].conn_num, "1234567890", strlen("1234567890")+1);
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_volte_conf_call_upgrade_vt_001
@description: Upgrade VoLTE conference call to VT
==**/
test_result ril_utf_ims_volte_conf_call_upgrade_vt_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(3);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(3);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x03);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x03);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call **calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_volte_conf_call_remote_upgrade_vt_001
@description: Remote upgrade VoLTE conference call to VT
==**/
test_result ril_utf_ims_volte_conf_call_remote_upgrade_vt_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);

  // Inject: QMI_VOICE_MODIFY_ACCEPT_IND_V02
  QMI_node.udpate_default_qmi_voice_modify_accept_ind_msg(0x03);
  QMI_node.set_qmi_voice_modified_accept_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_accept_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_MODIFY_CALL
  IMS_node.update_default_ims_unsol_modify_call();
  IMS_node.set_ims_unsol_modify_call_index(3);
  IMS_node.set_ims_unsol_modify_call_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm();
  IMS_node.set_ims_request_modify_call_confirm_call_index(3);
  IMS_node.set_ims_request_modify_call_confirm_call_details(ims_CallType_CALL_TYPE_VT, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_ACCEPT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(3);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x03);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x03);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VT_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_modified_ind_video_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_CONFIRM
  IMS_node.update_default_ims_request_modify_call_confirm_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call **calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VT;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_vt_conf_call_downgrade_voip_001
@description: Downgrade VT conference call to VoLTE
==**/
test_result ril_utf_ims_vt_conf_call_downgrade_voip_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VT_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT);

  // Inject: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate();
  IMS_node.set_ims_request_modify_call_initiate_call_index(3);
  IMS_node.set_ims_request_modify_call_initiate_call_details(ims_CallType_CALL_TYPE_VOICE, ims_CallDomain_CALL_DOMAIN_PS);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_MANAGE_IP_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_req_msg(VOIP_SUPS_TYPE_MODIFY_CALL_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_id(3);
  QMI_node.set_qmi_voice_manage_ip_calls_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_manage_ip_calls_req_audio_attrib(0x03);
  QMI_node.set_qmi_voice_manage_ip_calls_req_video_attrib(0x00);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_IP_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_ip_calls_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x03);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_MODIFY_CALL_INITIATE
  IMS_node.update_default_ims_request_modify_call_initiate_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call **calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_vt_conf_call_remote_downgrade_voip_001
@description: Remote downgrade VT conference call to VoLTE
==**/
test_result ril_utf_ims_vt_conf_call_remote_downgrade_voip_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VT_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VT);

  // Inject: QMI_VOICE_MODIFIED_IND_V02
  QMI_node.update_default_qmi_voice_modified_ind_msg(0x03);
  QMI_node.set_qmi_voice_modified_ind_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_modified_ind_audio_attrib(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call **calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_vice_dialog_info_001
@description: Get VICE DIALOG Info XML
==**/
test_result ril_utf_ims_vice_dialog_info_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Get VICE DIALOG Info XML");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_VICE_DIALOG_INFO_IND_V02
  uint8_t* conf_xml = QMI_node.update_default_qmi_voice_vice_dialog_info_ind_msg(10, 0); // Length:10 Sequence:0
  strlcpy((char *)conf_xml, "1234567890", QMI_VOICE_CONF_XML_MAX_LEN_V02);
  QMI_node.set_qmi_voice_conference_info_ind_total_size(strlen("1234567890"));
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_REFRESH_VICE_INFO
  IMS_node.update_ims_unsol_refresh_vice_info_conf_info_uri_data(10, (uint8_t *)"1234567890");
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_vice_dialog_info_001

/**==
@testname: ril_utf_ims_auto_rejected_incoming_call_end_ind_001
@description: Auto rejected incoming call
==**/
test_result ril_utf_ims_auto_rejected_incoming_call_end_ind_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Auto rejected incoming call ind");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_AUTO_REJECTED_INCOMING_CALL_END_IND_V02
  QMI_node.update_default_qmi_voice_auto_rejected_incoming_call_end_ind_msg(CALL_TYPE_VOICE_IP_V02,
      CALL_END_CAUSE_INCOMING_REJ_CAUSE_CALL_ON_OTHER_SUB_V02, 504);
  QMI_node.set_qmi_voice_auto_rejected_incoming_call_end_ind_num("23232323");
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_REFRESH_CONF_INFO
  IMS_node.update_ims_unsol_auto_call_rejection_ind(
    ims_CallType_CALL_TYPE_VOICE, ims_CallFailCause_CALL_FAIL_CALL_ON_OTHER_SUB, 504);
  IMS_node.set_ims_unsol_auto_call_rejection_ind_number("23232323");
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_auto_rejected_incoming_call_end_ind_001


/**==
@testname: ril_utf_ims_conf_info_ind_001
@description: Get Conference Info XML in a single QMI_VOICE_CONFERENCE_INFO indication.
              Send the info to IMS.
==**/
test_result ril_utf_ims_conf_info_ind_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Get Conference Info XML in a single QMI_VOICE_CONFERENCE_INFO indication. Send the info to IMS.");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);

  // Inject: QMI_VOICE_CONFERENCE_INFO_IND_V02
  uint8_t* conf_xml = QMI_node.update_default_qmi_voice_conference_info_ind_msg(10, 0); // Length:10 Sequence:0
  strlcpy((char *)conf_xml, "1234567890", QMI_VOICE_CONF_XML_MAX_LEN_V02);
  //QMI_node.set_qmi_voice_conference_info_ind_call_id(3);
  QMI_node.set_qmi_voice_conference_info_ind_total_size(strlen("1234567890"));
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_REFRESH_CONF_INFO
  IMS_node.update_ims_unsol_refresh_conf_info_conf_info_uri_data(10, (uint8_t *)"1234567890");
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_conf_info_ind_001


/**==
@testname: ril_utf_ims_conf_info_ind_002
@description: Get Conference Info XML multiple QMI_VOICE_CONFERENCE_INFO indications.
              Send the info to IMS.
==**/
test_result ril_utf_ims_conf_info_ind_002(user_specified_attrib_t attr)
{

  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_conf_info_ind_002");
  t.set_test_description("Get Conference Info XML multiple QMI_VOICE_CONFERENCE_INFO indications. Send the info to IMS.");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);

  // Inject: QMI_VOICE_CONFERENCE_INFO_IND_V02 - Part 1
  uint8_t* conf_xml = QMI_node.update_default_qmi_voice_conference_info_ind_msg(4, 0); // Length:4 | Sequence:0 | Total Length:10
  strlcpy((char *)conf_xml, "1234", QMI_VOICE_CONF_XML_MAX_LEN_V02);
  //QMI_node.set_qmi_voice_conference_info_ind_call_id(3);
  QMI_node.set_qmi_voice_conference_info_ind_total_size(strlen("1234567890"));
  t.inject(QMI_node);

  // Inject: QMI_VOICE_CONFERENCE_INFO_IND_V02 - Part 2
  conf_xml = QMI_node.update_default_qmi_voice_conference_info_ind_msg(3, 1); // Length:3 | Sequence:1
  strlcpy((char *)conf_xml, "567", QMI_VOICE_CONF_XML_MAX_LEN_V02);
  //QMI_node.set_qmi_voice_conference_info_ind_call_id(3);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_CONFERENCE_INFO_IND_V02 - Part 3
  conf_xml = QMI_node.update_default_qmi_voice_conference_info_ind_msg(3, 2); // Length:3 | Sequence:2
  strlcpy((char *)conf_xml, "890", QMI_VOICE_CONF_XML_MAX_LEN_V02);
  //QMI_node.set_qmi_voice_conference_info_ind_call_id(3);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_REFRESH_CONF_INFO
  IMS_node.update_ims_unsol_refresh_conf_info_conf_info_uri_data(10, (uint8_t *)"1234567890");
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_conf_info_ind_002


/**==
@testname: ril_utf_ims_conf_info_ind_003
@description: Get Conference Info XML in a single QMI_VOICE_CONFERENCE_INFO indication with call ID.
              Send the info to IMS, specifying the status of the conference call.
==**/
test_result ril_utf_ims_conf_info_ind_003(user_specified_attrib_t attr)
{

  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_conf_info_ind_003");
  t.set_test_description("Get Conference Info XML in a single QMI_VOICE_CONFERENCE_INFO indication with call ID. Send the info to IMS, specifying the status of the conference call.");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);

  // Inject: QMI_VOICE_CONFERENCE_INFO_IND_V02
  uint8_t* conf_xml = QMI_node.update_default_qmi_voice_conference_info_ind_msg(10, 0); // Length:10 Sequence:0
  strlcpy((char *)conf_xml, "1234567890", QMI_VOICE_CONF_XML_MAX_LEN_V02);
  QMI_node.set_qmi_voice_conference_info_ind_call_id(3);
  QMI_node.set_qmi_voice_conference_info_ind_total_size(strlen("1234567890"));
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_REFRESH_CONF_INFO
  IMS_node.update_ims_unsol_refresh_conf_info_conf_info_uri_data(10, (uint8_t *)"1234567890");
  IMS_node.set_ims_unsol_refresh_conf_info_callstate(ims_ConfCallState_FOREGROUND); // Value: 1
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 3;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->isMpty = 1;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice     = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy     = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 1;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_tty_ind_001
@description: Make MO call. Send TTY info received from QMI to ATEL.
==**/
test_result ril_utf_ims_tty_ind_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id("ril_utf_ims_tty_ind_001");
  t.set_test_description("Make MO call. Send TTY info received from QMI to ATEL.");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_TTY_IND
  QMI_node.update_qmi_voice_tty_ind_msg(TTY_MODE_FULL_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_TTY_NOTIFICATION
  IMS_node.update_default_ims_unsol_response_tty(ims_Tty_Mode_Type_TTY_MODE_FULL);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_TTY_IND
  QMI_node.update_qmi_voice_tty_ind_msg(TTY_MODE_VCO_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_TTY_NOTIFICATION
  IMS_node.update_default_ims_unsol_response_tty(ims_Tty_Mode_Type_TTY_MODE_VCO);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_TTY_IND
  QMI_node.update_qmi_voice_tty_ind_msg(TTY_MODE_HCO_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_TTY_NOTIFICATION
  IMS_node.update_default_ims_unsol_response_tty(ims_Tty_Mode_Type_TTY_MODE_HCO);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_TTY_IND
  QMI_node.update_qmi_voice_tty_ind_msg(TTY_MODE_OFF_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_TTY_NOTIFICATION
  IMS_node.update_default_ims_unsol_response_tty(ims_Tty_Mode_Type_TTY_MODE_OFF);
  t.expect(IMS_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_tty_ind_001

/**==
@testname: ril_utf_ims_sups_notification_ind_001
@description: Dial an IMS call. Update ATEL with call_id received in an IMS_sups_notification indication.
==**/
test_result ril_utf_ims_sups_notification_ind_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Dial an IMS call. Update ATEL with call_id received in an IMS_sups_notification indication.");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);


  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_UNCOND_CALL_FORWARD_ACTIVE_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_UNCOND_FWD_ACTIVE);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_COND_CALL_FORWARD_ACTIVE_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_COND_FWD_ACTIVE);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CALL_IS_FORWARDED_V02);
  uint16_t *ip_forward_hist_info = QMI_node.set_qmi_voice_sups_notification_ind_history_info(5);
  ip_forward_hist_info[0] = 'h';
  ip_forward_hist_info[1] = 'i';
  ip_forward_hist_info[2] = 's';
  ip_forward_hist_info[3] = 't';
  ip_forward_hist_info[4] = '3';
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_CALL_FORWARDED);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  IMS_node.set_ims_unsol_supp_svc_notification_history_info("hist3");
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CALL_IS_WAITING_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_CALL_WAITING);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CALLS_BARRED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_OUTGOING_CALLS_BARRED);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALLS_BARRED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_INCOMING_CALLS_BARRED);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CLIR_SUPPRSESION_REJECTED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_CLIR_SUPPRESSION_REJ);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CALL_IS_DEFLECTED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_CALL_DEFLECTED);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_OUTGOING_CUG_CALL_V02);
  QMI_node.set_qmi_voice_sups_notification_ind_index(10);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MO); // Value: 0.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSI_CUG_CALL);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  IMS_node.set_ims_unsol_supp_svc_notification_index(10);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CALL_IS_ON_HOLD_V02);
  QMI_node.set_qmi_voice_sups_notification_ind_media_direction_hold(VOICE_CALL_ATTRIB_TX_V02|VOICE_CALL_ATTRIB_RX_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_CALL_HOLD);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  IMS_node.set_ims_unsol_supp_svc_notification_hold_tone(false);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CALL_IS_ON_HOLD_V02);
  QMI_node.set_qmi_voice_sups_notification_ind_media_direction_hold(0);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_CALL_HOLD);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  IMS_node.set_ims_unsol_supp_svc_notification_hold_tone(true);
  t.expect(IMS_node);



  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_sups_notification_ind_001

/**==
@testname: ril_utf_ims_sups_notification_ind_002
@description: MT call wth supp srv notify indication
==**/
test_result ril_utf_ims_sups_notification_ind_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  char *extra_1[3] = {0, 0, 0};
  char extras_child_num[] = "ChildNum=01049526417";

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  // Child Number
  voice_child_number_info_type_v02 *child_num_list = QMI_node.set_qmi_voice_all_call_status_ind_child_number(1);
  child_num_list[0].call_id = 1;
  child_num_list[0].number_len = strlen("01049526417");
  strlcpy(child_num_list[0].number, "01049526417", strlen("01049526417")+1);
  t.inject(QMI_node);

  // Child number expected in extras
  extra_1[0] = extras_child_num;

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->callDetails.extras.arg = (void *)extra_1;
  t.expect(IMS_node);


  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_FORWARDED_CALL_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_FORWARDED_CALL);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CUG_CALL_V02);
  QMI_node.set_qmi_voice_sups_notification_ind_index(10);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_CUG_CALL);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  IMS_node.set_ims_unsol_supp_svc_notification_index(10);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CALL_IS_ON_HOLD_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_CALL_HOLD);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CALL_IS_RETRIEVED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_CALL_RETRIEVED);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALL_IS_FORWARDED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_ADDITIONAL_INCOM_CALL_FWD);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALL_IS_ECT_V02);
  voice_ect_number_type_v02* ect_number = QMI_node.set_qmi_voice_sups_notification_ind_ect_number();
  ect_number->ect_call_state = ECT_CALL_STATE_ALERTING_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_ECT_CALL_REMOTE_PTY_ALERT);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALL_IS_ECT_V02);
  ect_number = QMI_node.set_qmi_voice_sups_notification_ind_ect_number();
  ect_number->ect_call_state = ECT_CALL_STATE_ACTIVE_V02;
  ect_number->number_len = strlen("9876543210");
  strlcpy(ect_number->number, "9876543210", strlen("9876543210")+1);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_ECT_CALL_REMOTE_PTY_CONNECTED);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  IMS_node.set_ims_unsol_supp_svc_notification_number("9876543210");
  IMS_node.set_ims_unsol_supp_svc_notification_type(QCRIL_QMI_VOICE_SS_TA_UNKNOWN);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_CALL_IS_ECT_V02);
  ect_number = QMI_node.set_qmi_voice_sups_notification_ind_ect_number();
  ect_number->ect_call_state = ECT_CALL_STATE_ACTIVE_V02;
  ect_number->number_len = strlen("+919876543210");
  strlcpy(ect_number->number, "+919876543210", strlen("+919876543210")+1);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_ECT_CALL_REMOTE_PTY_CONNECTED);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  IMS_node.set_ims_unsol_supp_svc_notification_number("919876543210");
  IMS_node.set_ims_unsol_supp_svc_notification_type(QCRIL_QMI_VOICE_SS_TA_INTERNATIONAL);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_INCOMING_DEFLECTED_CALL_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_DEFLECTED_CALL);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_NOTIFICATION_IND
  QMI_node.update_default_qmi_voice_sups_notification_ind_msg(1, NOTIFICATION_TYPE_CALL_IS_IN_MPTY_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_unsol_supp_svc_notification();
  IMS_node.set_ims_unsol_supp_svc_notification_notificationtype(ims_NotificationType_MT); // Value: 1.
  IMS_node.set_ims_unsol_supp_svc_notification_code(QCRIL_QMI_VOICE_SS_CSSU_MPTY_CALL);
  IMS_node.set_ims_unsol_supp_svc_notification_connid(1);
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_voice_privacy_ind_002
@description: MT call wth supp srv notify indication
==**/
test_result ril_utf_ims_voice_privacy_ind_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_PRIVACY_IND_V02
  QMI_node.update_default_qmi_voice_privacy_ind_msg(1, VOICE_PRIVACY_STANDARD_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_PRIVACY_IND_V02
  QMI_node.update_default_qmi_voice_privacy_ind_msg(1, VOICE_PRIVACY_ENHANCED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 1;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_call_fail_cause_001
@description: call fail cause INVALID_TRANSACTION_IDENTIFIER
==**/
test_result ril_utf_ims_call_fail_cause_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Call End Cause cases");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_INVALID_TRANSACTION_IDENTIFIER_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED;
  calls[0]->failCause.errorDetails.has_sipErrorCode = FALSE;
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

}

/**==
@testname: ril_utf_ims_call_fail_cause_q850_error_001
@description: call end cause
==**/
test_result ril_utf_ims_call_fail_cause_q850_error_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Call End Cause cases");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_PROTOCOL_Q850_ERROR_V02;
  // End Reason Text "Q.850;cause=16" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {81, 46, 56, 53, 48, 59, 99, 97, 117, 115, 101, 61, 49, 54};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 14;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 16;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 16;
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

}

/**==
@testname: ril_utf_ims_call_fail_cause_q850_error_002
@description: call end cause
==**/
test_result ril_utf_ims_call_fail_cause_q850_error_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Call End Cause cases");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_PROTOCOL_Q850_ERROR_V02;
  // End Reason Text "Q.850;cause=31" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {81, 46, 56, 53, 48, 59, 99, 97, 117, 115, 101, 61, 51, 49};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 14;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 31;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_NORMAL_UNSPECIFIED;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 31;
  t.expect(IMS_node);

  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

}

/**==
@testname: ril_utf_ims_call_fail_cause_q850_error_003
@description: call end cause
==**/
test_result ril_utf_ims_call_fail_cause_q850_error_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Call End Cause cases");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_PROTOCOL_Q850_ERROR_V02;
  // End Reason Text "Q.850;cause=31" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {81, 46, 56, 53, 48, 59, 99, 97, 117, 115, 101, 61, 51, 49};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 480;  // SIP_TEMPORARILY_UNAVAILABLE=480
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_SIP_TEMPORARILY_UNAVAILABLE;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 480;  // SIP_TEMPORARILY_UNAVAILABLE=480
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

}

/**==
@testname: ril_utf_ims_call_fail_cause_q850_error_004
@description: call end cause
==**/
test_result ril_utf_ims_call_fail_cause_q850_error_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_description("Call End Cause cases");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_PROTOCOL_Q850_ERROR_V02;
  // End Reason Text "Q.850;cause=31" in UTF-16 format
  int i = 0;
  uint16_t text[20] = {81, 46, 56, 53, 48, 59, 99, 97, 117, 115, 101, 61, 51, 49};
  voice_ip_end_reason_text_type_v02* end_reason_text = QMI_node.set_qmi_voice_all_call_status_ind_end_reason_text(1);
  end_reason_text[0].call_id = 1;
  end_reason_text[0].end_reason_text_len = 16;
  for(i=0; i<end_reason_text[0].end_reason_text_len; i++)
    end_reason_text[0].end_reason_text[i] = text[i];
  voice_ip_end_sip_code_type_v02* sip_error_code = QMI_node.set_qmi_voice_all_call_status_ind_sip_error_code(1);
  sip_error_code[0].call_id = 1;
  sip_error_code[0].sip_error_code = 483;  // SIP_TOO_MANY_HOPS=483
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED;
  calls[0]->failCause.errorDetails.has_sipErrorCode = TRUE;
  calls[0]->failCause.errorDetails.sipErrorCode = 483;  // SIP_TOO_MANY_HOPS=483
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

}

/**==
@testname: ril_utf_set_call_waiting_001
@description: SET_CALL_WAITING on CS and get success with ENBLED
==**/
test_result ril_utf_set_call_waiting_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_CALL_WAITING
  ril_request_set_call_waiting_t *ptr = RIL_node.update_default_ril_request_set_call_waiting();
  ptr->status = ENABLED;
  ptr->service_class = 0x01;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_ACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(
    QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_WAITING (resp)
  RIL_node.update_default_ril_request_set_call_waiting_resp();
  t.expect(RIL_node);

  // Without serviceClass

  // Inject: RIL_REQUEST_SET_CALL_WAITING
  ptr = RIL_node.update_default_ril_request_set_call_waiting();
  ptr->status = ENABLED;
  ptr->service_class = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_ACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(
    QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_WAITING (resp)
  RIL_node.update_default_ril_request_set_call_waiting_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_set_call_waiting_002
@description: SET_CALL_WAITING on CS and get success with DISABLED
==**/
test_result ril_utf_set_call_waiting_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_CALL_WAITING
  ril_request_set_call_waiting_t *ptr = RIL_node.update_default_ril_request_set_call_waiting();
  ptr->status = DISABLED;
  ptr->service_class = 0x01;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_DEACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(
    QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_WAITING (resp)
  RIL_node.update_default_ril_request_set_call_waiting_resp();
  t.expect(RIL_node);

  // Without serviceClass

  // Inject: RIL_REQUEST_SET_CALL_WAITING
  ptr = RIL_node.update_default_ril_request_set_call_waiting();
  ptr->status = DISABLED;
  ptr->service_class = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_DEACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(
    QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_WAITING (resp)
  RIL_node.update_default_ril_request_set_call_waiting_resp();
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_set_call_waiting_003
@description: SET_CALL_WAITING on CS and get failure
==**/
test_result ril_utf_set_call_waiting_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_CALL_WAITING
  ril_request_set_call_waiting_t *ptr = RIL_node.update_default_ril_request_set_call_waiting();
  ptr->status = DISABLED;
  ptr->service_class = 0x01;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_DEACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_WAITING (resp)
  RIL_node.update_default_ril_request_set_call_waiting_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  // Without serviceClass

  // Inject: RIL_REQUEST_SET_CALL_WAITING
  ptr = RIL_node.update_default_ril_request_set_call_waiting();
  ptr->status = DISABLED;
  ptr->service_class = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_DEACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  //failure cause text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_set_sups_service_failure_cause_description(16, text);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_WAITING (resp)
  RIL_node.update_default_ril_request_set_call_waiting_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_query_call_waiting_001
@description: QUERY_CALL_WAITING on CS and get success with ENBLED
==**/
test_result ril_utf_query_call_waiting_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_CALL_WAITING
  ril_request_query_call_waiting_t *ptr = RIL_node.update_default_ril_request_query_call_waiting();
  ptr->service_class = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_service_class(0x01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_WAITING (resp)
  ril_request_query_call_waiting_resp_t* resp = RIL_node.update_default_ril_request_query_call_waiting_resp();
  resp->status = ENABLED;
  t.expect(RIL_node);

  // With service class

  // Inject: RIL_REQUEST_QUERY_CALL_WAITING
  ptr = RIL_node.update_default_ril_request_query_call_waiting();
  ptr->service_class = 1;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  QMI_node.set_qmi_voice_get_call_waiting_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_service_class(0x01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_WAITING (resp)
  resp = RIL_node.update_default_ril_request_query_call_waiting_resp();
  resp->status = ENABLED;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_query_call_waiting_002
@description: QUERY_CALL_WAITING on CS and get success with DISABLED
==**/
test_result ril_utf_query_call_waiting_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_CALL_WAITING
  ril_request_query_call_waiting_t *ptr = RIL_node.update_default_ril_request_query_call_waiting();
  ptr->service_class = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_service_class(0x0);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_WAITING (resp)
  ril_request_query_call_waiting_resp_t* resp = RIL_node.update_default_ril_request_query_call_waiting_resp();
  resp->status = DISABLED;
  t.expect(RIL_node);

  // With service class

  // Inject: RIL_REQUEST_QUERY_CALL_WAITING
  ptr = RIL_node.update_default_ril_request_query_call_waiting();
  ptr->service_class = 1;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  QMI_node.set_qmi_voice_get_call_waiting_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_service_class(0x0);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_WAITING (resp)
  resp = RIL_node.update_default_ril_request_query_call_waiting_resp();
  resp->status = DISABLED;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_query_call_waiting_003
@description: QUERY_CALL_WAITING on CS and get failure
==**/
test_result ril_utf_query_call_waiting_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_CALL_WAITING
  ril_request_query_call_waiting_t *ptr = RIL_node.update_default_ril_request_query_call_waiting();
  ptr->service_class = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_sip_error_code(401);
  //failure cause text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_get_call_waiting_resp_failure_cause_description(16, text);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_WAITING (resp)
  ril_request_query_call_waiting_resp_t* resp = RIL_node.update_default_ril_request_query_call_waiting_resp();
  resp->status = DISABLED;
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_waiting_001
@description: SET_CALL_WAITING on IMS and get success with ENBLED
==**/
test_result ril_utf_ims_set_call_waiting_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_CALL_WAITING
  ims_CallWaitingInfo *ptr = IMS_node.update_default_ims_request_set_call_waiting();
  ptr->has_service_status = TRUE;
  ptr->service_status = ims_ServiceClassStatus_ENABLED;
  ptr->has_service_class = TRUE;
  ptr->service_class.has_service_Class = TRUE;
  ptr->service_class.service_Class = 0x1;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_ACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(
    QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_set_call_waiting_resp();
  t.expect(IMS_node);

  // Without serviceClass

  // Inject: ims_MsgId_REQUEST_SET_CALL_WAITING
  ptr = IMS_node.update_default_ims_request_set_call_waiting();
  ptr->has_service_status = TRUE;
  ptr->service_status = ims_ServiceClassStatus_ENABLED;
  ptr->has_service_class = TRUE;
  ptr->service_class.has_service_Class = TRUE;
  ptr->service_class.service_Class = 0;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_ACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  //QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(
    QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_set_call_waiting_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_waiting_002
@description: SET_CALL_WAITING on IMS and get success with ENBLED
==**/
test_result ril_utf_ims_set_call_waiting_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_CALL_WAITING
  ims_CallWaitingInfo *ptr = IMS_node.update_default_ims_request_set_call_waiting();
  ptr->has_service_status = TRUE;
  ptr->service_status = ims_ServiceClassStatus_DISABLED;
  ptr->has_service_class = TRUE;
  ptr->service_class.has_service_Class = TRUE;
  ptr->service_class.service_Class = 0x1;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_DEACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(
    QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_set_call_waiting_resp();
  t.expect(IMS_node);


  // Without service class

  // Inject: ims_MsgId_REQUEST_SET_CALL_WAITING
  ptr = IMS_node.update_default_ims_request_set_call_waiting();
  ptr->has_service_status = TRUE;
  ptr->service_status = ims_ServiceClassStatus_DISABLED;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_DEACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(
    QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_set_call_waiting_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_waiting_003
@description: SET_CALL_WAITING on IMS and get failure
==**/
test_result ril_utf_ims_set_call_waiting_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_CALL_WAITING
  ims_CallWaitingInfo *ptr = IMS_node.update_default_ims_request_set_call_waiting();
  ptr->has_service_status = TRUE;
  ptr->service_status = ims_ServiceClassStatus_ENABLED;
  ptr->has_service_class = TRUE;
  ptr->service_class.has_service_Class = TRUE;
  ptr->service_class.service_Class = 0x1;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_ACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_set_call_waiting_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_waiting_004
@description: SET_CALL_WAITING on IMS and get failure
==**/
test_result ril_utf_ims_set_call_waiting_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_CALL_WAITING
  ims_CallWaitingInfo *ptr = IMS_node.update_default_ims_request_set_call_waiting();
  ptr->has_service_status = TRUE;
  ptr->service_status = ims_ServiceClassStatus_ENABLED;
  ptr->has_service_class = TRUE;
  ptr->service_class.has_service_Class = TRUE;
  ptr->service_class.service_Class = 0x1;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
    VOICE_SERVICE_ACTIVATE_V02,
    VOICE_REASON_CALLWAITING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  QMI_node.set_qmi_voice_set_sups_service_sip_error_code(401);
  //failure cause text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_set_sups_service_failure_cause_description(16, text);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_WAITING (resp)
  ims_SuppSvcResponse *resp = IMS_node.update_default_ims_request_set_call_waiting_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  resp->has_errorDetails = TRUE;
  resp->errorDetails.has_sipErrorCode = TRUE;
  resp->errorDetails.sipErrorCode = 401;
  resp->errorDetails.sipErrorString.arg = (void *)("Signalling error");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_waiting_001
@description: QUERY_CALL_WAITING on IMS and get success with ENBLED
==**/
test_result ril_utf_ims_query_call_waiting_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_WAITING
  IMS_node.update_default_ims_request_query_call_waiting();
  IMS_node.set_ims_request_query_call_waiting_service_class(0);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  //QMI_node.set_qmi_voice_get_call_waiting_req_service_class(0);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_service_class(0x01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_query_call_waiting_resp();
  IMS_node.set_ims_request_query_call_waiting_resp_service_status(ims_ServiceClassStatus_ENABLED);
  IMS_node.set_ims_request_query_call_waiting_resp_service_class(0x01);
  t.expect(IMS_node);

  // With service class

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_WAITING
  IMS_node.update_default_ims_request_query_call_waiting();
  IMS_node.set_ims_request_query_call_waiting_service_class(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  QMI_node.set_qmi_voice_get_call_waiting_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_service_class(0x01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_query_call_waiting_resp();
  IMS_node.set_ims_request_query_call_waiting_resp_service_status(ims_ServiceClassStatus_ENABLED);
  IMS_node.set_ims_request_query_call_waiting_resp_service_class(0x01);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_waiting_002
@description: QUERY_CALL_WAITING on IMS and get success with DISABLED
==**/
test_result ril_utf_ims_query_call_waiting_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_WAITING
  IMS_node.update_default_ims_request_query_call_waiting();
  IMS_node.set_ims_request_query_call_waiting_service_class(0);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_service_class(0x0);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_query_call_waiting_resp();
  IMS_node.set_ims_request_query_call_waiting_resp_service_status(ims_ServiceClassStatus_DISABLED);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_waiting_003
@description: QUERY_CALL_WAITING on IMS and get failure with network not supported
==**/
test_result ril_utf_ims_query_call_waiting_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_WAITING
  IMS_node.update_default_ims_request_query_call_waiting();
  IMS_node.set_ims_request_query_call_waiting_service_class(0);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  //QMI_node.set_qmi_voice_get_call_waiting_req_service_class(0); //0
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_OP_NETWORK_UNSUPPORTED_V01);
  //QMI_node.set_qmi_voice_get_call_waiting_resp_service_class(0x0);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_query_call_waiting_resp();
  IMS_node.set_ims_error_value(ims_Error_E_NETWORK_NOT_SUPPORTED);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_waiting_004
@description: QUERY_CALL_WAITING on IMS and failure with sip error code and description
==**/
test_result ril_utf_ims_query_call_waiting_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_WAITING
  IMS_node.update_default_ims_request_query_call_waiting();
  IMS_node.set_ims_request_query_call_waiting_service_class(0);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_WAITING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_req_msg();
  //QMI_node.set_qmi_voice_get_call_waiting_req_service_class(0); //0
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_WAITING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_waiting_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_get_call_waiting_resp_sip_error_code(401);
  //failure cause text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_get_call_waiting_resp_failure_cause_description(16, text);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_WAITING (resp)
  IMS_node.update_default_ims_request_query_call_waiting_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  ims_SipErrorInfo *sipErrorInfo = IMS_node.set_ims_request_query_call_waiting_resp_error_details();
  sipErrorInfo->has_sipErrorCode = TRUE;
  sipErrorInfo->sipErrorCode = 401;
  sipErrorInfo->sipErrorString.arg = (void *)("Signalling error");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_forward_status_001
==**/
test_result ril_utf_ims_set_call_forward_status_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  IMS_node.set_ims_request_set_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_set_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
          VOICE_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_set_sups_service_req_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  IMS_node.update_default_ims_request_set_call_forward_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_forward_status_002
==**/
test_result ril_utf_ims_set_call_forward_status_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  IMS_node.set_ims_request_set_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_set_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
          VOICE_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_set_sups_service_req_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  ims_CallForwardStatusInfo *resp = IMS_node.update_default_ims_request_set_call_forward_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_forward_status_003
==**/
test_result ril_utf_ims_set_call_forward_status_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  IMS_node.set_ims_request_set_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_set_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
          VOICE_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_set_sups_service_req_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  QMI_node.set_qmi_voice_set_sups_service_sip_error_code(401);
  //failure cause text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_set_sups_service_failure_cause_description(16, text);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  ims_CallForwardStatusInfo *resp = IMS_node.update_default_ims_request_set_call_forward_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  resp->has_errorDetails = TRUE;
  resp->errorDetails.has_sipErrorCode = TRUE;
  resp->errorDetails.sipErrorCode = 401;
  resp->errorDetails.sipErrorString.arg = (void *)("Signalling error");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_forward_status_004
Request:
Registration/Activation/Deactivation/Erasure request for all forwarding
Scenario:
  CFU/CFB/CFNRy/CFNRc 200 OK
Modem response:
  Overall QMI response  Success
  CFU/CFB/CFNRy/CFNRc  Success
==**/
test_result ril_utf_ims_set_call_forward_status_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 3;  // QCRIL_QMI_VOICE_MODE_REG
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 4;  // QCRIL_QMI_VOICE_CCFC_REASON_ALLCALL
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 3;  // voice(1)|data(2)
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 5;  // no reply time
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->number.arg = qcril_malloc(sizeof("8613716857495"));
  strlcpy((char*)ptr[0]->number.arg, "8613716857495", strlen("8613716857495")+1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_REQ_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_req_msg(VOICE_SERVICE_REGISTER_V02,
          VOICE_REASON_FWD_ALLFORWARDING_V02);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_timer_value(5);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_service_class((voice_service_class_enum_v02)0x03); // voice(1)|data(2)
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_number("+8613716857495");
  t.expect(QMI_node);

  uint16_t failure_cause_description[QMI_VOICE_FAILURE_CAUSE_DESC_MAX_LEN_V02+1] = {};
  // Inject: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_RESP_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfu_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_SUPS_ERRORS_ENUM_MIN_ENUM_VAL_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      FALSE, 0);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfb_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_SUPS_ERRORS_ENUM_MIN_ENUM_VAL_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      FALSE, 0);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfnry_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_SUPS_ERRORS_ENUM_MIN_ENUM_VAL_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      FALSE, 0);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfnrc_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_SUPS_ERRORS_ENUM_MIN_ENUM_VAL_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      FALSE, 0);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  ims_CallForwardStatusInfo *resp = IMS_node.update_default_ims_request_set_call_forward_status_resp();
  resp->status_len = 4;
  resp->status[0].reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  resp->status[0].status = SUCCESS;
  resp->status[0].errorDetails.has_sipErrorCode = FALSE;
  resp->status[0].errorDetails.sipErrorCode = 0;
  resp->status[0].errorDetails.sipErrorString.arg = NULL;
  resp->status[1].reason = 1;  // QCRIL_QMI_VOICE_CCFC_REASON_BUSY
  resp->status[1].status = SUCCESS;
  resp->status[1].errorDetails.has_sipErrorCode = FALSE;
  resp->status[1].errorDetails.sipErrorCode = 0;
  resp->status[1].errorDetails.sipErrorString.arg = NULL;
  resp->status[2].reason = 2;  // QCRIL_QMI_VOICE_CCFC_REASON_NOREPLY
  resp->status[2].status = SUCCESS;
  resp->status[2].errorDetails.has_sipErrorCode = FALSE;
  resp->status[2].errorDetails.sipErrorCode = 0;
  resp->status[2].errorDetails.sipErrorString.arg = NULL;
  resp->status[3].reason = 3;  // QCRIL_QMI_VOICE_CCFC_REASON_NOTREACH
  resp->status[3].status = SUCCESS;
  resp->status[3].errorDetails.has_sipErrorCode = FALSE;
  resp->status[3].errorDetails.sipErrorCode = 0;
  resp->status[3].errorDetails.sipErrorString.arg = NULL;

  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_forward_status_005
Request:
  Registration/Activation/Deactivation/Erasure request for all forwarding
Scenario:
  CFU/CFB/CFNRc 200 OK
  CFNRy fails with 404
Modem response:
  Overall QMI response  Success
  CFU/CFB/CFNRc  Success
  CFNRy  Failure (specific error cause  2 (404_NOT_FOUND))
==**/
test_result ril_utf_ims_set_call_forward_status_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 3;  // QCRIL_QMI_VOICE_MODE_REG
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 4;  // QCRIL_QMI_VOICE_CCFC_REASON_ALLCALL
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 3;  // voice(1)|data(2)
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 5;  // no reply time
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->number.arg = qcril_malloc(sizeof("8613716857495"));
  strlcpy((char*)ptr[0]->number.arg, "8613716857495", strlen("8613716857495")+1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_REQ_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_req_msg(VOICE_SERVICE_REGISTER_V02,
          VOICE_REASON_FWD_ALLFORWARDING_V02);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_timer_value(5);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_service_class((voice_service_class_enum_v02)0x03); // voice(1)|data(2)
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_number("+8613716857495");
  t.expect(QMI_node);

  uint16_t failure_cause_description[QMI_VOICE_FAILURE_CAUSE_DESC_MAX_LEN_V02+1] = {};
  // Inject: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_RESP_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfu_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_SUPS_ERRORS_ENUM_MIN_ENUM_VAL_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      FALSE, 0);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfb_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_SUPS_ERRORS_ENUM_MIN_ENUM_VAL_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      FALSE, 0);
  uint16_t cfnry_failure_cause_description[QMI_VOICE_FAILURE_CAUSE_DESC_MAX_LEN_V02+1] = {'4', '0', '4', '_', 'N', 'O', 'T', '_', 'F', 'O', 'U', 'N', 'D', 0};
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfnry_result(
      TRUE, QMI_RESULT_FAILURE_V01,
      FALSE, QMI_FAILURE_CAUSE_REJECTED_BY_NETWORK_V02,
      FALSE, cfnry_failure_cause_description,
      FALSE, 0,
      TRUE, 404);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfnrc_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_SUPS_ERRORS_ENUM_MIN_ENUM_VAL_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      FALSE, 0);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  ims_CallForwardStatusInfo *resp = IMS_node.update_default_ims_request_set_call_forward_status_resp();
  resp->status_len = 4;
  resp->status[0].reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND - CFU
  resp->status[0].status = SUCCESS;
  resp->status[0].errorDetails.has_sipErrorCode = FALSE;
  resp->status[0].errorDetails.sipErrorCode = 0;
  resp->status[0].errorDetails.sipErrorString.arg = NULL;
  resp->status[1].reason = 1;  // QCRIL_QMI_VOICE_CCFC_REASON_BUSY - CFB
  resp->status[1].status = SUCCESS;
  resp->status[1].errorDetails.has_sipErrorCode = FALSE;
  resp->status[1].errorDetails.sipErrorCode = 0;
  resp->status[1].errorDetails.sipErrorString.arg = NULL;
  resp->status[2].reason = 2;  // QCRIL_QMI_VOICE_CCFC_REASON_NOREPLY - CFNRy
  resp->status[2].status = FAILURE;
  resp->status[2].errorDetails.has_sipErrorCode = TRUE;
  resp->status[2].errorDetails.sipErrorCode = 404;
  resp->status[2].errorDetails.sipErrorString.arg = (void *)("404_NOT_FOUND");
  resp->status[3].reason = 3;  // QCRIL_QMI_VOICE_CCFC_REASON_NOTREACH - CFNRc
  resp->status[3].status = SUCCESS;
  resp->status[3].errorDetails.has_sipErrorCode = FALSE;
  resp->status[3].errorDetails.sipErrorCode = 0;
  resp->status[3].errorDetails.sipErrorString.arg = NULL;

  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_forward_status_006
Request:
  Registration/Activation/Deactivation/Erasure request for all forwarding
Scenario:
  CFU/CFB/CFNRc 404
  CFNRy fails with 404
Modem response:
  Overall QMI response  Failure (Error IMS code tag  0x90, Cause  404_NOT_FOUND (2))
  CFU/CFB/CFNRc/CFNRy  Failure  (Error IMS code tag  0x90, Cause  404_NOT_FOUND (2)
==**/
test_result ril_utf_ims_set_call_forward_status_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 3;  // QCRIL_QMI_VOICE_MODE_REG
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 4;  // QCRIL_QMI_VOICE_CCFC_REASON_ALLCALL
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 3;  // voice(1)|data(2)
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 5;  // no reply time
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->number.arg = qcril_malloc(sizeof("8613716857495"));
  strlcpy((char*)ptr[0]->number.arg, "8613716857495", strlen("8613716857495")+1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_REQ_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_req_msg(VOICE_SERVICE_REGISTER_V02,
          VOICE_REASON_FWD_ALLFORWARDING_V02);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_timer_value(5);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_service_class((voice_service_class_enum_v02)0x03); // voice(1)|data(2)
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_number("+8613716857495");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_RESP_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  uint16_t failure_cause_description[QMI_VOICE_FAILURE_CAUSE_DESC_MAX_LEN_V02+1] = {'4', '0', '4', '_', 'N', 'O', 'T', '_', 'F', 'O', 'U', 'N', 'D', 0};
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_failure_cause_description(failure_cause_description);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_sip_error_code(404);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  ims_CallForwardStatusInfo *resp = IMS_node.update_default_ims_request_set_call_forward_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  resp->has_errorDetails = TRUE;
  resp->errorDetails.has_sipErrorCode = TRUE;
  resp->errorDetails.sipErrorCode = 404;
  resp->errorDetails.sipErrorString.arg = (void *)("404_NOT_FOUND");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_call_forward_status_007
Request:
  Registration/Activation/Deactivation/Erasure request for all forwarding
Scenario:
  CFU/CFB/CFNRc 400
  CFNRy fails with 404
Modem response:
  Overall QMI response  Failure (Error code tag  0x02, Cause  SYSTEM_FAILURE (34))
  CFU/CFB/CFNRc  Failure  (Error Invoke Problem  0x81, Cause  BADLY_STRUCTURED_COMPONENT(2))
  CFNRy  Failure  (Error IMS code tag  0x90, Cause  404_NOT_FOUND (2))
==**/
test_result ril_utf_ims_set_call_forward_status_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 3;  // QCRIL_QMI_VOICE_MODE_REG
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 4;  // QCRIL_QMI_VOICE_CCFC_REASON_ALLCALL
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 3;  // voice(1)|data(2)
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 5;  // no reply time
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->number.arg = qcril_malloc(sizeof("8613716857495"));
  strlcpy((char*)ptr[0]->number.arg, "8613716857495", strlen("8613716857495")+1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_REQ_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_req_msg(VOICE_SERVICE_REGISTER_V02,
          VOICE_REASON_FWD_ALLFORWARDING_V02);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_timer_value(5);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_service_class((voice_service_class_enum_v02)0x03); // voice(1)|data(2)
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_req_number("+8613716857495");
  t.expect(QMI_node);

  uint16_t failure_cause_description[QMI_VOICE_FAILURE_CAUSE_DESC_MAX_LEN_V02+1] = {'B', 'A', 'D', 'L', 'Y', '_', 'S', 'T', 'R', 'U', 'C', 'T', 'U', 'R', 'E', 'D', '_', 'C', 'O', 'M', 'P', 'O', 'N', 'E', 'N', 'T', 0};
  // Inject: QMI_VOICE_SET_ALL_CALL_FWD_SUPS_RESP_V02
  QMI_node.update_default_qmi_voice_set_all_call_fwd_sups_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_failure_cause(QMI_FAILURE_CAUSE_SYSTEM_FAILURE_V02);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfu_result(
      TRUE, QMI_RESULT_FAILURE_V01,
      FALSE, QMI_FAILURE_CAUSE_REJECTED_BY_NETWORK_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      TRUE, 400);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfb_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_FAILURE_CAUSE_REJECTED_BY_NETWORK_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      TRUE, 400);
  uint16_t cfnry_failure_cause_description[QMI_VOICE_FAILURE_CAUSE_DESC_MAX_LEN_V02+1] = {'4', '0', '4', '_', 'N', 'O', 'T', '_', 'F', 'O', 'U', 'N', 'D', 0};
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfnry_result(
      TRUE, QMI_RESULT_FAILURE_V01,
      FALSE, QMI_FAILURE_CAUSE_REJECTED_BY_NETWORK_V02,
      FALSE, cfnry_failure_cause_description,
      FALSE, 0,
      TRUE, 404);
  QMI_node.set_qmi_voice_set_all_call_fwd_sups_resp_cfnrc_result(
      TRUE, QMI_RESULT_SUCCESS_V01,
      FALSE, QMI_FAILURE_CAUSE_REJECTED_BY_NETWORK_V02,
      FALSE, failure_cause_description,
      FALSE, 0,
      TRUE, 400);
  t.inject(QMI_node);

  t.set_start();

  // Expect: QCRIL_REQ_HOOK_UNSOL_SS_ERROR_CODE
  OEM_node.update_default_qcril_evt_hook_unsol_ss_error_code();
  OEM_node.set_expect_skip_verification_status(false);
  t.expect(OEM_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  ims_CallForwardStatusInfo *resp = IMS_node.update_default_ims_request_set_call_forward_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  resp->status_len = 4;
  resp->status[0].reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND - CFU
  resp->status[0].status = FAILURE;
  resp->status[0].errorDetails.has_sipErrorCode = TRUE;
  resp->status[0].errorDetails.sipErrorCode = 400;
  resp->status[0].errorDetails.sipErrorString.arg = (void *)("BADLY_STRUCTURED_COMPONENT");
  resp->status[1].reason = 1;  // QCRIL_QMI_VOICE_CCFC_REASON_BUSY - CFB
  resp->status[1].status = FAILURE;
  resp->status[1].errorDetails.has_sipErrorCode = TRUE;
  resp->status[1].errorDetails.sipErrorCode = 400;
  resp->status[1].errorDetails.sipErrorString.arg = (void *)("BADLY_STRUCTURED_COMPONENT");
  resp->status[2].reason = 2;  // QCRIL_QMI_VOICE_CCFC_REASON_NOREPLY - CFNRy
  resp->status[2].status = FAILURE;
  resp->status[2].errorDetails.has_sipErrorCode = TRUE;
  resp->status[2].errorDetails.sipErrorCode = 404;
  resp->status[2].errorDetails.sipErrorString.arg = (void *)("404_NOT_FOUND");
  resp->status[3].reason = 3;  // QCRIL_QMI_VOICE_CCFC_REASON_NOTREACH - CFNRc
  resp->status[3].status = FAILURE;
  resp->status[3].errorDetails.has_sipErrorCode = TRUE;
  resp->status[3].errorDetails.sipErrorCode = 400;
  resp->status[3].errorDetails.sipErrorString.arg = (void *)("BADLY_STRUCTURED_COMPONENT");
  t.expect(IMS_node);

  t.set_end();

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_forward_status_001
==**/
test_result ril_utf_ims_query_call_forward_status_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(1);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x01; // VOICE
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 20;
  ptr[0]->number.arg = malloc(sizeof("+8613716857493"));
  strlcpy((char*)ptr[0]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_forward_status_002
==**/
test_result ril_utf_ims_query_call_forward_status_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(3);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  call_forwarding_info[1].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[1].service_class = 0x10;  // CLASS_DATACIRCUITSYNC
  call_forwarding_info[1].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[1].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[1].no_reply_timer = 10;
  call_forwarding_info[2].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[2].service_class = 0x20;  // CLASS_DATACIRCUITASYNC
  call_forwarding_info[2].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[2].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[2].no_reply_timer = 10;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(2);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x01; // VOICE
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 20;
  ptr[0]->number.arg = malloc(sizeof("+8613716857493"));
  strlcpy((char*)ptr[0]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  ptr[1]->has_status = TRUE;
  ptr[1]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[1]->has_reason = TRUE;
  ptr[1]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  ptr[1]->has_service_class = TRUE;
  ptr[1]->service_class = 0x30; // CLASS_DATACIRCUITSYNC | CLASS_DATACIRCUITASYNC
  ptr[1]->has_toa = TRUE;
  ptr[1]->toa = 145;
  ptr[1]->has_time_seconds = TRUE;
  ptr[1]->time_seconds = 10;
  ptr[1]->number.arg = malloc(sizeof("+8613716857493"));
  strlcpy((char*)ptr[1]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10, 1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10, 1);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_forward_status_003
==**/
test_result ril_utf_ims_query_call_forward_status_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 1;  // QCRIL_QMI_VOICE_CCFC_REASON_BUSY
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_MOBILEBUSY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(3);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  call_forwarding_info[1].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[1].service_class = 0x10;  // CLASS_DATACIRCUITSYNC
  call_forwarding_info[1].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[1].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[1].no_reply_timer = 10;
  call_forwarding_info[2].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[2].service_class = 0x20;  // CLASS_DATACIRCUITASYNC
  call_forwarding_info[2].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[2].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[2].no_reply_timer = 10;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(2);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 1;  // QCRIL_QMI_VOICE_CCFC_REASON_BUSY
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x01; // VOICE
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 20;
  ptr[0]->number.arg = malloc(sizeof("+8613716857493"));
  strlcpy((char*)ptr[0]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
//  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
//  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  ptr[1]->has_status = TRUE;
  ptr[1]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[1]->has_reason = TRUE;
  ptr[1]->reason = 1;  // QCRIL_QMI_VOICE_CCFC_REASON_BUSY
  ptr[1]->has_service_class = TRUE;
  ptr[1]->service_class = 0x30; // CLASS_DATACIRCUITSYNC | CLASS_DATACIRCUITASYNC
  ptr[1]->has_toa = TRUE;
  ptr[1]->toa = 145;
  ptr[1]->has_time_seconds = TRUE;
  ptr[1]->time_seconds = 10;
  ptr[1]->number.arg = malloc(sizeof("+8613716857493"));
  strlcpy((char*)ptr[1]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
//  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10, 1);
//  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10, 1);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_query_call_forward_status_004
==**/
test_result ril_utf_ims_query_call_forward_status_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(1);
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_forward_status_005
==**/
test_result ril_utf_ims_query_call_forward_status_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_get_call_forwarding_resp_sip_error_code(401);
  //failure cause text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_get_call_forwarding_resp_failure_cause_description(16, text);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(1);
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  ims_SipErrorInfo *sipErrorInfo = IMS_node.set_ims_request_query_call_forward_status_resp_error_details();
  sipErrorInfo->has_sipErrorCode = TRUE;
  sipErrorInfo->sipErrorCode = 401;
  sipErrorInfo->sipErrorString.arg = (void *)("Signalling error");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_forward_status_006
==**/
test_result ril_utf_ims_query_call_forward_status_006(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(3);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = 0;
  call_forwarding_info[0].no_reply_timer = 20;
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  call_forwarding_info[1].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[1].service_class = 0x10;  // CLASS_DATACIRCUITSYNC
  call_forwarding_info[1].number_len = 0;
  call_forwarding_info[1].no_reply_timer = 10;
  call_forwarding_info[2].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[2].service_class = 0x20;  // CLASS_DATACIRCUITASYNC
  call_forwarding_info[2].number_len = 0;
  call_forwarding_info[2].no_reply_timer = 10;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(2);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x01; // VOICE
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 0;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 20;
//  ptr[0]->number.arg = malloc(sizeof("+8613716857493"));
//  strlcpy((char*)ptr[0]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  ptr[1]->has_status = TRUE;
  ptr[1]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[1]->has_reason = TRUE;
  ptr[1]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  ptr[1]->has_service_class = TRUE;
  ptr[1]->service_class = 0x30; // CLASS_DATACIRCUITSYNC | CLASS_DATACIRCUITASYNC
  ptr[1]->has_toa = TRUE;
  ptr[1]->toa = 0;
  ptr[1]->has_time_seconds = TRUE;
  ptr[1]->time_seconds = 10;
//  ptr[1]->number.arg = malloc(sizeof("+8613716857493"));
//  strlcpy((char*)ptr[1]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10, 1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10, 1);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_query_call_forward_status_007
==**/
test_result ril_utf_ims_query_call_forward_status_007(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(3);
  call_forwarding_info[0].service_status = SERVICE_STATUS_INACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = 0;
  call_forwarding_info[0].no_reply_timer = 0;
  call_forwarding_info[1].service_status = SERVICE_STATUS_INACTIVE_V02;
  call_forwarding_info[1].service_class = 0x10;  // CLASS_DATACIRCUITSYNC
  call_forwarding_info[1].number_len = 0;
  call_forwarding_info[1].no_reply_timer = 0;
  call_forwarding_info[2].service_status = SERVICE_STATUS_INACTIVE_V02;
  call_forwarding_info[2].service_class = 0x20;  // CLASS_DATACIRCUITASYNC
  call_forwarding_info[2].number_len = 0;
  call_forwarding_info[2].no_reply_timer = 0;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(2);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 0;  // QCRIL_QMI_VOICE_MODE_DISABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x31; // VOICE | CLASS_DATACIRCUITSYNC | CLASS_DATACIRCUITASYNC
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 0;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 0;
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_timer_call_forwarding_status
==**/
test_result ril_utf_ims_timer_call_forwarding_status(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
#ifndef RIL_UTF_L_MASTER
  ptr[0]->reason = 6;  // QCRIL_QMI_VOICE_CCFC_REASON_TIMER
#else
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
#endif
  IMS_node.set_ims_request_set_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_set_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
          VOICE_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_set_sups_service_req_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  IMS_node.update_default_ims_request_set_call_forward_status_resp();
  t.expect(IMS_node);

#if 0

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(1);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x01; // VOICE
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 20;
  ptr[0]->number.arg = malloc(sizeof("+8613716857493"));
  strlcpy((char*)ptr[0]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
#ifndef RIL_UTF_L_MASTER
  ptr[0]->reason = 6;  // QCRIL_QMI_VOICE_CCFC_REASON_TIMER
#else
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
#endif
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(1);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_start_time(2014, 7, 10, 19, 30, 10, 10);
  QMI_node.set_qmi_voice_get_call_forwarding_resp_call_fwd_end_time(2014, 7, 11, 10, 45, 15, 10);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
#ifndef RIL_UTF_L_MASTER
  ptr[0]->reason = 6;  // QCRIL_QMI_VOICE_CCFC_REASON_TIMER
#else
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
#endif
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x01; // VOICE
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 20;
  ptr[0]->number.arg = qcril_malloc(strlen("+8613716857493")+1);
  //ptr[0]->number.arg = qcril_malloc(sizeof("+8613716857493"));
  strlcpy((char*)ptr[0]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerstart(2014, 7, 10, 19, 30, 10, 10);
  IMS_node.set_ims_request_query_call_forward_status_callfwdtimerend(2014, 7, 11, 10, 45, 15, 10);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
          VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  IMS_node.update_default_ims_request_set_call_forward_status_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 2;  // QCRIL_QMI_VOICE_CCFC_REASON_NOREPLY
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
          VOICE_REASON_FWD_NOREPLY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  IMS_node.update_default_ims_request_set_call_forward_status_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 3;  // QCRIL_QMI_VOICE_MODE_REG
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 4;  // QCRIL_QMI_VOICE_CCFC_REASON_ALLCALL
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 3;  // voice(1)|data(2)
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 5;  // no reply time
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->number.arg = qcril_malloc(sizeof("8613716857495"));
  strlcpy((char*)ptr[0]->number.arg, "8613716857495", strlen("8613716857495")+1);
  IMS_node.add_callflow_tag("status = REG, reason = ALLCALL,\\ntimeSeconds = 5, serviceClass = 3");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_REGISTER_V02,
          VOICE_REASON_FWD_ALLFORWARDING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_timer_value(5);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(0x03); // voice(1)|data(2)
  char *num = QMI_node.set_qmi_voice_set_sups_service_req_number();
  strlcpy(num, "+8613716857495", strlen("+8613716857495")+1);
//  QMI_node.add_callflow_tag("status = REG, reason = ALLFORWARDING,\\ntimer = 5, service class = 3");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  QMI_node.add_callflow_tag("Success");
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  IMS_node.update_default_ims_request_set_call_forward_status_resp();
  IMS_node.add_callflow_tag("Success");
  t.expect(IMS_node);
#endif

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_call_forwarding_status
  Back to back QUERY_CALL_FORWARD_STATUS on IMS
==**/
test_result ril_utf_ims_call_forwarding_status(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  IMS_node.set_token_id(100);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);


  // Inject: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_query_call_forward_status(1);
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 1;  // QCRIL_QMI_VOICE_CCFC_REASON_BUSY
  IMS_node.set_token_id(101);
  t.inject(IMS_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(1);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x01; // VOICE
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 20;
  ptr[0]->number.arg = malloc(sizeof("+8613716857493"));
  strlcpy((char*)ptr[0]->number.arg, "+8613716857493", strlen("+8613716857493")+1);
  IMS_node.set_token_id(100);
  t.expect(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_MOBILEBUSY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(1);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+919876543210");
  strlcpy(call_forwarding_info[0].number, "+919876543210", strlen("+919876543210")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  ptr = IMS_node.update_default_ims_request_query_call_forward_status_resp(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 1;  // QCRIL_QMI_VOICE_CCFC_REASON_BUSY
  ptr[0]->has_service_class = TRUE;
  ptr[0]->service_class = 0x01; // VOICE
  ptr[0]->has_toa = TRUE;
  ptr[0]->toa = 145;
  ptr[0]->has_time_seconds = TRUE;
  ptr[0]->time_seconds = 20;
  ptr[0]->number.arg = qcril_malloc(strlen("+919876543210")+1);
  strlcpy((char*)ptr[0]->number.arg, "+919876543210", strlen("+919876543210")+1);
  IMS_node.set_token_id(101);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_query_call_forward_status_001
@description: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
==**/
test_result ril_utf_query_call_forward_status_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  RIL_CallForwardInfo* ptr;
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info;
  RIL_CallForwardInfo **callfwdinfo;

  // Inject: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = RIL_node.update_default_ril_request_query_call_forward_status();
  ptr->reason = 2;
  ptr->serviceClass = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_NOREPLY_V02);
  t.expect(QMI_node);


  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(2);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  call_forwarding_info[1].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[1].service_class = 0x10;  // CLASS_DATACIRCUITSYNC
  call_forwarding_info[1].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[1].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[1].no_reply_timer = 10;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  callfwdinfo = RIL_node.update_default_ril_request_query_call_forward_status_resp(2);
  callfwdinfo[0]->status       = 1;     // enabled
  callfwdinfo[0]->reason       = 2;     // NOREPLY
  callfwdinfo[0]->serviceClass = 0x01;  // CLASS_VOICE
  callfwdinfo[0]->toa          = 145;
  callfwdinfo[0]->timeSeconds  = 20;
  RIL_node.set_query_call_forward_status_resp_number(0, "+8613716857493");
  callfwdinfo[1]->status       = 1;     // enabled
  callfwdinfo[1]->reason       = 2;     // NOREPLY
  callfwdinfo[1]->serviceClass = 0x10;  // CLASS_DATACIRCUITSYNC
  callfwdinfo[1]->toa          = 145;
  callfwdinfo[1]->timeSeconds  = 10;
  RIL_node.set_query_call_forward_status_resp_number(1, "+8613716857493");
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_query_call_forward_status_002
@description: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
==**/
test_result ril_utf_query_call_forward_status_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  RIL_CallForwardInfo* ptr;
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info;
  RIL_CallForwardInfo **callfwdinfo;


  // Inject: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = RIL_node.update_default_ril_request_query_call_forward_status();
  ptr->reason = 2;
  ptr->serviceClass = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_NOREPLY_V02);
  t.expect(QMI_node);


  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(3);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  call_forwarding_info[1].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[1].service_class = 0x10;  // CLASS_DATACIRCUITSYNC
  call_forwarding_info[1].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[1].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[1].no_reply_timer = 10;
  call_forwarding_info[2].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[2].service_class = 0x20;  // CLASS_DATACIRCUITASYNC
  call_forwarding_info[2].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[2].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[2].no_reply_timer = 10;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  callfwdinfo = RIL_node.update_default_ril_request_query_call_forward_status_resp(2);
  callfwdinfo[0]->status       = 1;     // enabled
  callfwdinfo[0]->reason       = 2;     // NOREPLY
  callfwdinfo[0]->serviceClass = 0x01;  // CLASS_VOICE
  callfwdinfo[0]->toa          = 145;
  callfwdinfo[0]->timeSeconds  = 20;
  RIL_node.set_query_call_forward_status_resp_number(0, "+8613716857493");
  callfwdinfo[1]->status       = 1;     // enabled
  callfwdinfo[1]->reason       = 2;     // NOREPLY
  callfwdinfo[1]->serviceClass = 0x30;  // CLASS_DATACIRCUITSYNC | CLASS_DATACIRCUITASYNC
  callfwdinfo[1]->toa          = 145;
  callfwdinfo[1]->timeSeconds  = 10;
  RIL_node.set_query_call_forward_status_resp_number(1, "+8613716857493");
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_query_call_forward_status_003
@description: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS failure response from modem
==**/
test_result ril_utf_query_call_forward_status_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  RIL_CallForwardInfo* ptr;
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info;
  RIL_CallForwardInfo **callfwdinfo;

  // Inject: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = RIL_node.update_default_ril_request_query_call_forward_status();
  ptr->reason = 2;
  ptr->serviceClass = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_NOREPLY_V02);
  t.expect(QMI_node);


  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  callfwdinfo = RIL_node.update_default_ril_request_query_call_forward_status_resp(0);
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_query_call_forward_status_004
@description: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS failure response from modem
==**/
test_result ril_utf_query_call_forward_status_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  RIL_CallForwardInfo* ptr;
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info;
  RIL_CallForwardInfo **callfwdinfo;

  // Inject: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = RIL_node.update_default_ril_request_query_call_forward_status();
  ptr->reason = 2;
  ptr->serviceClass = 0;
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_NOREPLY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  QMI_node.set_qmi_voice_get_call_forwarding_resp_sip_error_code(404);
  //failure cause text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_get_call_forwarding_resp_failure_cause_description(16, text);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  callfwdinfo = RIL_node.update_default_ril_request_query_call_forward_status_resp(0);
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_query_call_forward_status_005
@description: Back to back RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
==**/
test_result ril_utf_query_call_forward_status_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  RIL_CallForwardInfo **callfwdinfo;
  RIL_CallForwardInfo  * ptr;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = RIL_node.update_default_ril_request_query_call_forward_status();
  ptr->reason = 2;  // QCRIL_QMI_VOICE_CCFC_REASON_NOREPLY
  ptr->serviceClass = 0;
  RIL_node.set_token_id(100);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_NOREPLY_V02);
  t.expect(QMI_node);

  // Inject: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS
  ptr = RIL_node.update_default_ril_request_query_call_forward_status();
  ptr->reason = 4;  // QCRIL_QMI_VOICE_CCFC_REASON_ALLCALL
  ptr->serviceClass = 0;
  RIL_node.set_token_id(101);
  t.inject(RIL_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_get_call_forwarding_resp_get_call_forwarding_info(3);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  call_forwarding_info[1].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[1].service_class = 0x10;  // CLASS_DATACIRCUITSYNC
  call_forwarding_info[1].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[1].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[1].no_reply_timer = 10;
  call_forwarding_info[2].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[2].service_class = 0x20;  // CLASS_DATACIRCUITASYNC
  call_forwarding_info[2].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[2].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[2].no_reply_timer = 10;
  t.inject(QMI_node);

  t.set_start();

  // Expect: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  callfwdinfo = RIL_node.update_default_ril_request_query_call_forward_status_resp(2);
  callfwdinfo[0]->status       = 1;     // enabled
  callfwdinfo[0]->reason       = 2;     // NOREPLY
  callfwdinfo[0]->serviceClass = 0x01;  // CLASS_VOICE
  callfwdinfo[0]->toa          = 145;
  callfwdinfo[0]->timeSeconds  = 20;
  RIL_node.set_query_call_forward_status_resp_number(0, "+8613716857493");
  callfwdinfo[1]->status       = 1;     // enabled
  callfwdinfo[1]->reason       = 2;     // NOREPLY
  callfwdinfo[1]->serviceClass = 0x30;  // CLASS_DATACIRCUITSYNC | CLASS_DATACIRCUITASYNC
  callfwdinfo[1]->toa          = 145;
  callfwdinfo[1]->timeSeconds  = 10;
  RIL_node.set_query_call_forward_status_resp_number(1, "+8613716857493");
  RIL_node.set_token_id(100);
  t.expect(RIL_node);

  // Expect: QMI_VOICE_GET_CALL_FORWARDING_REQ
  QMI_node.update_default_qmi_voice_get_call_forwarding_req_msg(VOICE_REASON_FWD_ALLFORWARDING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_FORWARDING_RESP
  QMI_node.update_default_qmi_voice_get_call_forwarding_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_INTERNAL_V01);
  t.inject(QMI_node);


  // Expect: RIL_REQUEST_QUERY_CALL_FORWARD_STATUS (resp)
  callfwdinfo = RIL_node.update_default_ril_request_query_call_forward_status_resp(0);
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  RIL_node.set_token_id(101);
  t.expect(RIL_node);

  t.set_end();

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_get_clip_001
@description: IMS SS request to query CLIP
==**/
test_result ril_utf_ims_get_clip_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // 1: INACTIVE & NOT_PROVISIONED

  // Inject: ims_MsgId_REQUEST_QUERY_CLIP
  IMS_node.update_default_ims_request_query_clip();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_clip_response (ACTIVE_STATUS_INACTIVE_V02,
    PROVISION_STATUS_NOT_PROVISIONED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CLIP (resp)
  IMS_node.update_default_ims_request_query_clip_resp(ims_ClipStatus_NOT_PROVISIONED);
  t.expect(IMS_node);

  // INACTIVE & PROVISIONED

  // Inject: ims_MsgId_REQUEST_QUERY_CLIP
  IMS_node.update_default_ims_request_query_clip();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_clip_response (ACTIVE_STATUS_INACTIVE_V02,
    PROVISION_STATUS_PROVISIONED_PERMANENT_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CLIP (resp)
  IMS_node.update_default_ims_request_query_clip_resp(ims_ClipStatus_NOT_PROVISIONED);
  t.expect(IMS_node);


  // ACTIVE & NOT_PROVISIONED

  // Inject: ims_MsgId_REQUEST_QUERY_CLIP
  IMS_node.update_default_ims_request_query_clip();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_clip_response (ACTIVE_STATUS_ACTIVE_V02,
    PROVISION_STATUS_NOT_PROVISIONED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CLIP (resp)
  IMS_node.update_default_ims_request_query_clip_resp(ims_ClipStatus_PROVISIONED);
  t.expect(IMS_node);

  // ACTIVE & PROVISIONED

  // Inject: ims_MsgId_REQUEST_QUERY_CLIP
  IMS_node.update_default_ims_request_query_clip();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_clip_response (ACTIVE_STATUS_ACTIVE_V02,
    PROVISION_STATUS_PROVISIONED_PERMANENT_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CLIP (resp)
  IMS_node.update_default_ims_request_query_clip_resp(ims_ClipStatus_PROVISIONED);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_get_clip_002
@description: IMS SS request to query CLIP. gets failure
==**/
test_result ril_utf_ims_get_clip_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_QUERY_CLIP
  IMS_node.update_default_ims_request_query_clip();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_NO_RADIO_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CLIP (resp)
  IMS_node.update_default_ims_request_query_clip_resp_no_status();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_get_clip_003
@description: IMS SS request to query CLIP, gets failure
==**/
test_result ril_utf_ims_get_clip_003
(
  user_specified_attrib_t attr
  )
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_QUERY_CLIP
  IMS_node.update_default_ims_request_query_clip();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_NO_RADIO_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_sip_error_code(401);
  //failure cause text - "Signalling error"
  uint16_t text[16] = {0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_get_clip_resp_msg_failure_cause_description(16, text);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CLIP (resp)
  ims_ClipProvisionStatus *resp = IMS_node.update_default_ims_request_query_clip_resp_no_status();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  resp->has_errorDetails = TRUE;
  resp->errorDetails.has_sipErrorCode = TRUE;
  resp->errorDetails.sipErrorCode = 401;
  resp->errorDetails.sipErrorString.arg = (void *)("Signalling error");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_get_colp_001
@description: IMS SS request to query COLP
==**/
test_result ril_utf_ims_get_colp_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr))
  {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_COLP);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_COLP_REQ_V02
  QMI_node.update_default_qmi_voice_get_colp_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_COLP_RESP_V02
  QMI_node.update_default_qmi_voice_get_colp_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_colp_resp_msg_colp_response(
      ACTIVE_STATUS_ACTIVE_V02, PROVISION_STATUS_PROVISIONED_PERMANENT_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status(ims_ServiceClassStatus_ENABLED,
                                                             ims_SuppSvcFacilityType_FACILITY_COLP);
  IMS_node.set_ims_request_set_supp_svc_response_resp_provisionStatus(
      ims_ServiceClassProvisionStatus_PROVISIONED);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_COLP);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_COLP_REQ_V02
  QMI_node.update_default_qmi_voice_get_colp_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_COLP_RESP_V02
  QMI_node.update_default_qmi_voice_get_colp_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_colp_resp_msg_colp_response(ACTIVE_STATUS_ACTIVE_V02,
                                                         PROVISION_STATUS_NOT_PROVISIONED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status(ims_ServiceClassStatus_ENABLED,
                                                             ims_SuppSvcFacilityType_FACILITY_COLP);
  IMS_node.set_ims_request_set_supp_svc_response_resp_provisionStatus(
      ims_ServiceClassProvisionStatus_NOT_PROVISIONED);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_get_colp_002
@description: IMS SS request to query COLP
==**/
test_result ril_utf_ims_get_colp_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr))
  {
    test_result ret;
    return ret;
  }
  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_COLP);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_COLP_REQ_V02
  QMI_node.update_default_qmi_voice_get_colp_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_COLP_RESP_V02
  QMI_node.update_default_qmi_voice_get_colp_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_colp_resp_msg_colp_response(
      ACTIVE_STATUS_INACTIVE_V02, PROVISION_STATUS_PROVISIONED_PERMANENT_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status(ims_ServiceClassStatus_DISABLED,
                                                             ims_SuppSvcFacilityType_FACILITY_COLP);
  IMS_node.set_ims_request_set_supp_svc_response_resp_provisionStatus(
      ims_ServiceClassProvisionStatus_PROVISIONED);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_COLP);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_COLP_REQ_V02
  QMI_node.update_default_qmi_voice_get_colp_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_COLP_RESP_V02
  QMI_node.update_default_qmi_voice_get_colp_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_colp_resp_msg_colp_response(ACTIVE_STATUS_INACTIVE_V02,
                                                         PROVISION_STATUS_NOT_PROVISIONED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status(ims_ServiceClassStatus_DISABLED,
                                                             ims_SuppSvcFacilityType_FACILITY_COLP);
  IMS_node.set_ims_request_set_supp_svc_response_resp_provisionStatus(
      ims_ServiceClassProvisionStatus_NOT_PROVISIONED);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_get_colp_003
@description: IMS SS request to query COLP, QMI returns error
==**/
test_result ril_utf_ims_get_colp_003(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_COLP);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_COLP_REQ_V02
  QMI_node.update_default_qmi_voice_get_colp_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_COLP_RESP_V02
  QMI_node.update_default_qmi_voice_get_colp_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_NO_RADIO_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  ims_SuppSvcResponse *resp = IMS_node.update_default_ims_request_supp_svc_status_resp();
  resp->has_facilityType = TRUE;
  resp->facilityType = ims_SuppSvcFacilityType_FACILITY_COLP;
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_get_colp_004
@description: IMS SS request to query COLP, QMI returns error
==**/
test_result ril_utf_ims_get_colp_004(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_COLP);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_COLP_REQ_V02
  QMI_node.update_default_qmi_voice_get_colp_req_v02();
  t.expect(QMI_node);

  uint16_t description[] = {85, 110, 97, 98, 108, 101, 32, 116,
                          111, 32, 102, 105, 110, 100, 32, 112,
                          97, 114, 101, 110, 116, 32, 111, 102,
                          32, 110, 111, 100, 101, 0};
  // Inject: QMI_VOICE_GET_COLP_RESP_V02
  QMI_node.update_default_qmi_voice_get_colp_resp_msg(QMI_RESULT_FAILURE_V01, QMI_ERR_NO_RADIO_V01);
  QMI_node.set_qmi_voice_get_colp_resp_sip_error_code(409);
  QMI_node.set_qmi_voice_get_colp_resp_failure_cause_description(30, description);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  ims_SuppSvcResponse *resp = IMS_node.update_default_ims_request_supp_svc_status_resp();
  resp->has_facilityType = TRUE;
  resp->facilityType = ims_SuppSvcFacilityType_FACILITY_COLP;
  resp->has_errorDetails = TRUE;
  resp->errorDetails.has_sipErrorCode = TRUE;
  resp->errorDetails.sipErrorCode = 409;
  resp->errorDetails.sipErrorString.arg = (void *)("Unable to find parent of node");
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_001
@description: IMS SS request to query call barring facilities
==**/
test_result ril_utf_ims_supp_service_status_001(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_BAOC);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg(VOICE_REASON_BARR_ALLOUTGOING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_SS_service_type(
      VOICE_CC_SUPS_RESULT_REASON_BARR_ALLOUTGOING_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status(ims_ServiceClassStatus_DISABLED,
                                                             ims_SuppSvcFacilityType_FACILITY_BAOC);
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_BAOC);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg(VOICE_REASON_BARR_ALLOUTGOING_V02);
  QMI_node.set_voice_get_call_barring_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(1);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_SS_service_type(
      VOICE_CC_SUPS_RESULT_REASON_BARR_ALLOUTGOING_V02);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_sip_error_code(200);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status(ims_ServiceClassStatus_ENABLED,
                                                             ims_SuppSvcFacilityType_FACILITY_BAOC);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_002
@description: IMS SS request to set call barring successfully
==**/
test_result ril_utf_ims_supp_service_status_002(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_ACTIVATE,
                                           ims_SuppSvcFacilityType_FACILITY_BAOIC);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  IMS_node.set_ims_request_supp_svc_status_password("1234");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_ACTIVATE_V02, (voice_reason_enum_v02)VOICE_REASON_BARR_OUTGOINGINT_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  QMI_node.set_qmi_voice_set_sups_service_req_password("1234");
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_003
@description: IMS SS request to set call barring successfully
==**/
test_result ril_utf_ims_supp_service_status_003(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_ACTIVATE,
                                           ims_SuppSvcFacilityType_FACILITY_BA_ALL);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_ACTIVATE_V02, (voice_reason_enum_v02)VOICE_REASON_BARR_ALLBARRING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_ACTIVATE,
                                           ims_SuppSvcFacilityType_FACILITY_BA_MO);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_ACTIVATE_V02, (voice_reason_enum_v02)VOICE_REASON_BARR_ALLOUTGOINGBARRING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_DEACTIVATE,
                                           ims_SuppSvcFacilityType_FACILITY_BA_MT);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_DEACTIVATE_V02,
      (voice_reason_enum_v02)VOICE_REASON_BARR_ALLINCOMINGBARRING_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_004
@description: IMS SS request to set call barring successfully
==**/
test_result ril_utf_ims_supp_service_status_004(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_REGISTER,
                                           ims_SuppSvcFacilityType_FACILITY_BS_MT);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  ims_CbNumList **cb_num_list = IMS_node.set_ims_request_supp_svc_status_cb_num_list(3);
  cb_num_list[0] = (ims_CbNumList *)qcril_malloc(sizeof(ims_CbNumList));
  //  cb_num_list[0]->has_status = TRUE;
  //  cb_num_list[0]->status = ims_ServiceClassStatus_ENABLED;
  cb_num_list[0]->number.arg = strdup("9876543210");
  cb_num_list[1] = (ims_CbNumList *)qcril_malloc(sizeof(ims_CbNumList));
  cb_num_list[1]->number.arg = strdup("1234567890");
  cb_num_list[2] = (ims_CbNumList *)qcril_malloc(sizeof(ims_CbNumList));
  cb_num_list[2]->number.arg = strdup("1212121212");
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_REGISTER_V02, (voice_reason_enum_v02)VOICE_REASON_BARR_INCOMING_NUMBER_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  voice_barred_number_type_v02 *cb_nums =
      QMI_node.set_qmi_voice_set_sups_service_req_call_barring_numbers_list(3);
  strlcpy(cb_nums[0].barred_number, "9876543210", strlen("9876543210") + 1);
  strlcpy(cb_nums[1].barred_number, "1234567890", strlen("1234567890") + 1);
  strlcpy(cb_nums[2].barred_number, "1212121212", strlen("1212121212") + 1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_005
@description: IMS SS request to set call barring successfully
==**/
test_result ril_utf_ims_supp_service_status_005(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_ERASURE,
                                           ims_SuppSvcFacilityType_FACILITY_BS_MT);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_ERASE_V02, (voice_reason_enum_v02)VOICE_REASON_BARR_INCOMING_NUMBER_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_ACTIVATE,
                                           ims_SuppSvcFacilityType_FACILITY_BAICa);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_ACTIVATE_V02, (voice_reason_enum_v02)VOICE_REASON_BARR_INCOMING_ANONYMOUS_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_service_class(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_006
@description: Query failure case
==**/
test_result ril_utf_ims_supp_service_status_006(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_BAOICxH);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg(
      (voice_reason_enum_v02)VOICE_REASON_BARR_OUTGOINGINTEXTOHOME_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_FAILURE_V01,
                                                              QMI_ERR_NO_RADIO_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);


  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_BAOICxH);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg(
      (voice_reason_enum_v02)VOICE_REASON_BARR_OUTGOINGINTEXTOHOME_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_FAILURE_V01,
                                                              QMI_ERR_NETWORK_ABORTED_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_sip_error_code(409);
  uint16_t description[] = {85, 110, 97, 98, 108, 101, 32, 116,
                          111, 32, 102, 105, 110, 100, 32, 112,
                          97, 114, 101, 110, 116, 32, 111, 102,
                          32, 110, 111, 100, 101, 0};
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_failure_cause_description(30, description);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  ims_SuppSvcResponse *resp = IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  resp->has_errorDetails = TRUE;
  resp->errorDetails.has_sipErrorCode = TRUE;
  resp->errorDetails.sipErrorCode = 409;
  resp->errorDetails.sipErrorString.arg = (void *)("Unable to find parent of node");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_007
@description: Set failure case
==**/
test_result ril_utf_ims_supp_service_status_007(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_DEACTIVATE,
                                           ims_SuppSvcFacilityType_FACILITY_BAIC);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_DEACTIVATE_V02, (voice_reason_enum_v02)VOICE_REASON_BARR_ALLINCOMING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01,
                                                              QMI_ERR_NO_RADIO_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_008
@description: REQUEST_SUPP_SVC_STATUS failure case
==**/
test_result ril_utf_ims_supp_service_status_008(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_DEACTIVATE,
                                           ims_SuppSvcFacilityType_FACILITY_BAICr);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(
      VOICE_SERVICE_DEACTIVATE_V02, (voice_reason_enum_v02)VOICE_REASON_BARR_INCOMINGROAMING_V02);
  t.expect(QMI_node);

  uint16_t description[] = {85,  110, 97,  98,  108, 101, 32, 116, 111, 32, 102, 105, 110, 100, 32,
                            112, 97,  114, 101, 110, 116, 32, 111, 102, 32, 110, 111, 100, 101, 0};

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01,
                                                              QMI_ERR_SUPS_FAILURE_CAUSE_V01);
  QMI_node.set_qmi_voice_set_sups_service_sip_error_code(409);
  QMI_node.set_qmi_voice_set_sups_service_failure_cause_description(30, description);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  ims_SuppSvcResponse *resp = IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  resp->has_errorDetails = TRUE;
  resp->errorDetails.has_sipErrorCode = TRUE;
  resp->errorDetails.sipErrorCode = 409;
  resp->errorDetails.sipErrorString.arg = (void *)("Unable to find parent of node");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_009
@description: Invalid operation with REGISTER
==**/
test_result ril_utf_ims_supp_service_status_009(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_REGISTER,
                                           ims_SuppSvcFacilityType_FACILITY_BAOC);
  IMS_node.set_ims_request_supp_svc_status_service_class(1);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_supp_service_status_010
@description: IMS SS request to query call barring facilities
==**/
test_result ril_utf_ims_supp_service_status_010(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SUPP_SVC_STATUS
  IMS_node.update_default_ims_request_supp_svc_status();
  IMS_node.set_ims_request_supp_svc_status(ims_SuppSvcOperationType_QUERY,
                                           ims_SuppSvcFacilityType_FACILITY_BS_MT);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CALL_BARRING_REQ_V02
  QMI_node.update_default_qmi_voice_get_call_barring_req_msg(VOICE_REASON_BARR_INCOMING_NUMBER_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CALL_BARRING_RESP_V02
  QMI_node.update_default_qmi_voice_get_call_barring_resp_msg(QMI_RESULT_SUCCESS_V01,
                                                              QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_service_class(0x01);
  QMI_node.set_qmi_voice_get_call_barring_resp_msg_SS_service_type(
      VOICE_CC_SUPS_RESULT_REASON_BARR_INCOMING_NUMBER_V02);
  voice_serviceclass_barred_number_list_type_v02 *sc_barred_nums =
      QMI_node.set_qmi_voice_get_call_barring_resp_msg_sc_barred_numbers_status_list(1);
  sc_barred_nums[0].service_class_ext = VOICE_SUPS_CLASS_VOICE_V02;
  sc_barred_nums[0].call_barring_numbers_list_len = 3;
  sc_barred_nums[0].call_barring_numbers_list[0].active_status = ACTIVE_STATUS_ACTIVE_V02;
  strlcpy(sc_barred_nums[0].call_barring_numbers_list[0].barred_number, "9876543210",
          strlen("9876543210") + 1);
  sc_barred_nums[0].call_barring_numbers_list[1].active_status = ACTIVE_STATUS_ACTIVE_V02;
  strlcpy(sc_barred_nums[0].call_barring_numbers_list[1].barred_number, "1234567890",
          strlen("1234567890") + 1);
  sc_barred_nums[0].call_barring_numbers_list[2].active_status = ACTIVE_STATUS_INACTIVE_V02;
  strlcpy(sc_barred_nums[0].call_barring_numbers_list[2].barred_number, "1212121212",
          strlen("1212121212") + 1);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SUPP_SVC_STATUS (resp)
  ims_SuppSvcResponse *resp = IMS_node.update_default_ims_request_supp_svc_status_resp();
  IMS_node.set_ims_request_set_supp_svc_response_resp_status(
      ims_ServiceClassStatus_ENABLED, ims_SuppSvcFacilityType_FACILITY_BS_MT);
  ims_CbNumListType **cbNumListType =
      (ims_CbNumListType **)qcril_malloc((1 + 1) * sizeof(ims_CbNumListType *));
  resp->cbNumListType.arg = (void *)cbNumListType;
  cbNumListType[0] = (ims_CbNumListType *)qcril_malloc(sizeof(ims_CbNumListType));
  cbNumListType[0]->has_serviceClass = TRUE;
  cbNumListType[0]->serviceClass.has_service_Class = TRUE;
  cbNumListType[0]->serviceClass.service_Class = 0x01;
  ims_CbNumList **cbNumList = (ims_CbNumList **)qcril_malloc((3 + 1) * sizeof(ims_CbNumList *));
  cbNumListType[0]->cb_num_list.arg = (void *)cbNumList;
  cbNumList[0] = (ims_CbNumList *)qcril_malloc(sizeof(ims_CbNumList));
  cbNumList[0]->has_status = TRUE;
  cbNumList[0]->status = ims_ServiceClassStatus_ENABLED;
  cbNumList[0]->number.arg = strdup("9876543210");
  cbNumList[1] = (ims_CbNumList *)qcril_malloc(sizeof(ims_CbNumList));
  cbNumList[1]->has_status = TRUE;
  cbNumList[1]->status = ims_ServiceClassStatus_ENABLED;
  cbNumList[1]->number.arg = strdup("1234567890");
  cbNumList[2] = (ims_CbNumList *)qcril_malloc(sizeof(ims_CbNumList));
  cbNumList[2]->has_status = TRUE;
  cbNumList[2]->status = ims_ServiceClassStatus_DISABLED;
  cbNumList[2]->number.arg = strdup("1212121212");
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_set_supp_svc_notification_001
@description: set_supp_svc_notification
==**/
test_result ril_utf_ims_set_supp_svc_notification_001(user_specified_attrib_t attr) {
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_SET_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_request_set_supp_svc_notification();
  IMS_node.set_ims_request_set_supp_svc_notification_status(ims_ServiceClassStatus_ENABLED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_INDICATION_REGISTER_REQ
  QMI_node.update_default_qmi_voice_ind_reg_req_msg();
  QMI_node.set_qmi_voice_ind_req_supps_notification_events(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_INDICATION_REGISTER_RESP
  QMI_node.update_default_qmi_voice_ind_reg_resp_msg();
  QMI_node.set_qmi_voice_indication_register_resp_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SUPP_SVC_NOTIFICATION (resp)
  IMS_node.update_default_ims_request_set_supp_svc_notification_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_SUPP_SVC_NOTIFICATION
  IMS_node.update_default_ims_request_set_supp_svc_notification();
  IMS_node.set_ims_request_set_supp_svc_notification_status(ims_ServiceClassStatus_DISABLED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_INDICATION_REGISTER_REQ
  QMI_node.update_default_qmi_voice_ind_reg_req_msg();
  QMI_node.set_qmi_voice_ind_req_supps_notification_events(0);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_INDICATION_REGISTER_RESP
  QMI_node.update_default_qmi_voice_ind_reg_resp_msg();
  QMI_node.set_qmi_voice_indication_register_resp_result(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_SUPP_SVC_NOTIFICATION (resp)
  IMS_node.update_default_ims_request_set_supp_svc_notification_resp();
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_ussd_failed_notification_001
@description:
Send USSD Notification - IMS USSD Failure
==**/
test_result ril_utf_ims_ussd_failed_notification_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("*234#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss =
      QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(
      QMI_RESULT_FAILURE_V01, QMI_ERR_SUPS_FAILURE_CAUSE_V01);
  //USSD Error Description - "IMS error"
  uint16_t text[9] = {0x49, 0x4d, 0x53, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_orig_ussd_resp_sip_error_code(401);
  QMI_node.set_qmi_voice_orig_ussd_resp_ussd_error_description(9, text);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_USSD_FAILED (ind)
  IMS_node.update_default_ims_unsol_ussd_failed(ims_UssdModeType_NOTIFY, TRUE, 401, "IMS error");
  t.expect(IMS_node);

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req1 = RIL_node.update_default_ril_request_send_ussd("*234#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss1 =
      QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(
      QMI_RESULT_FAILURE_V01, QMI_ERR_SUPS_FAILURE_CAUSE_V01);
  QMI_node.set_qmi_voice_orig_ussd_resp_sip_error_code(401);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_USSD_FAILED (ind)
  IMS_node.update_default_ims_unsol_ussd_failed(ims_UssdModeType_NOTIFY, TRUE, 401, "");
  t.expect(IMS_node);

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req2 = RIL_node.update_default_ril_request_send_ussd("*234#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss2 =
      QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(
      QMI_RESULT_FAILURE_V01, QMI_ERR_SUPS_FAILURE_CAUSE_V01);
  //USSD Error Description - "IMS error"
  QMI_node.set_qmi_voice_orig_ussd_resp_ussd_error_description(9, text);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);

  // Expect: ims_MsgId_UNSOL_USSD_FAILED (ind)
  IMS_node.update_default_ims_unsol_ussd_failed(ims_UssdModeType_NOTIFY, FALSE, 0, "IMS error");
  t.expect(IMS_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_ussd_failed_notification_002
@description:
Send USSD Notification - IMS USSD Failure
==**/
test_result ril_utf_ims_ussd_failed_notification_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_USSD_IND_V02
  QMI_node.update_default_qmi_voice_ussd_ind_msg(FURTHER_USER_ACTION_NOT_REQUIRED_V02);
  ////USSD Error Description - "IMS error"
  uint16_t text[9] = {0x49, 0x4d, 0x53, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72};
  QMI_node.set_qmi_voice_orig_ussd_ind_sip_error_code(401);
  QMI_node.set_qmi_voice_orig_ussd_ind_ussd_error_description(9, text);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_USSD_FAILED (ind)
  IMS_node.update_default_ims_unsol_ussd_failed(ims_UssdModeType_NOTIFY, TRUE, 401, "IMS error");
  t.expect(IMS_node);

  // Inject: QMI_VOICE_USSD_IND_V02
  QMI_node.update_default_qmi_voice_ussd_ind_msg(FURTHER_USER_ACTION_NOT_REQUIRED_V02);
  QMI_node.set_qmi_voice_orig_ussd_ind_sip_error_code(401);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_USSD_FAILED (ind)
  IMS_node.update_default_ims_unsol_ussd_failed(ims_UssdModeType_NOTIFY, TRUE, 401, "");
  t.expect(IMS_node);

  // Inject: QMI_VOICE_USSD_IND_V02
  QMI_node.update_default_qmi_voice_ussd_ind_msg(FURTHER_USER_ACTION_NOT_REQUIRED_V02);
  ////USSD Error Description - "IMS error"
  QMI_node.set_qmi_voice_orig_ussd_ind_ussd_error_description(9, text);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_USSD_FAILED (ind)
  IMS_node.update_default_ims_unsol_ussd_failed(ims_UssdModeType_NOTIFY, FALSE, 0, "IMS error");
  t.expect(IMS_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_colr_success
@description:
Success Scenario
1. Telephony queries COLR
2. Modem sends NOT_RESTRICTED
3. Telephony receives ALLOWED
4. Telephony sets COLR RESTRICTED
5. Modem receives QMI_VOICE_SET_SUPS_SERVICE_REQ with colr_pi RESTRICTED
6. Modem sends success
7. Telephony gets success
==**/
test_result ril_utf_ims_colr_success(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_GET_COLR
  IMS_node.update_default_ims_request_get_colr();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_COLR_REQ_V02
  QMI_node.update_default_qmi_voice_get_colr_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_COLR_RESP_V02
  QMI_node.update_default_qmi_voice_get_colr_resp_msg(QMI_RESULT_SUCCESS_V01,
    QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_colr_resp_msg_colr_response(ACTIVE_STATUS_ACTIVE_V02,
      PROVISION_STATUS_PROVISIONED_PERMANENT_V02);
  QMI_node.set_qmi_voice_get_colr_resp_msg_colr_pi(COLR_PRESENTATION_NOT_RESTRICTED_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_GET_COLR (resp)
  IMS_node.update_default_ims_request_get_colr_resp();
  IMS_node.set_ims_request_get_colr_resp_colr(ims_IpPresentation_IP_PRESENTATION_NUM_ALLOWED);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_COLR
  IMS_node.update_default_ims_request_set_colr();
  IMS_node.set_ims_request_set_colr_req_colr(ims_IpPresentation_IP_PRESENTATION_NUM_RESTRICTED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
      (voice_reason_enum_v02)QMI_VOICE_REASON_COLR_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_colr_pi(COLR_PRESENTATION_RESTRICTED_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_COLR (resp)
  IMS_node.update_default_ims_request_set_colr_resp();
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_COLR
  IMS_node.update_default_ims_request_set_colr();
  IMS_node.set_ims_request_set_colr_req_colr(ims_IpPresentation_IP_PRESENTATION_NUM_ALLOWED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_DEACTIVATE_V02,
      (voice_reason_enum_v02)QMI_VOICE_REASON_COLR_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_colr_pi(COLR_PRESENTATION_NOT_RESTRICTED_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01,
      QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_COLR (resp)
  IMS_node.update_default_ims_request_set_colr_resp();
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_colr_failure
@description:
1. Telephony query colr
2. Modem returns failure
3. Telephony receives generic failure
4. Telephony sets colr
5. Modem returns failure
6. Telephony receives generic failure
7. Telephony sets colr but the 'colr' param not set
8. Telephony receives generic failure
9. Telephony sets colr but the 'colr' param set to invalid value (10)
10. Telephony receives generic failure
==**/
test_result ril_utf_ims_colr_failure(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_GET_COLR
  IMS_node.update_default_ims_request_get_colr();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_COLR_REQ_V02
  QMI_node.update_default_qmi_voice_get_colr_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_COLR_RESP_V02
  QMI_node.update_default_qmi_voice_get_colr_resp_msg(QMI_RESULT_FAILURE_V01,
    QMI_ERR_GENERAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_GET_COLR (resp)
  IMS_node.update_default_ims_request_get_colr_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_COLR
  IMS_node.update_default_ims_request_set_colr();
  IMS_node.set_ims_request_set_colr_req_colr(ims_IpPresentation_IP_PRESENTATION_NUM_RESTRICTED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ_V02
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02,
      (voice_reason_enum_v02)QMI_VOICE_REASON_COLR_V02);
  QMI_node.set_qmi_voice_set_sups_service_req_colr_pi(COLR_PRESENTATION_RESTRICTED_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_FAILURE_V01,
      QMI_ERR_GENERAL_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_COLR (resp)
  IMS_node.update_default_ims_request_set_colr_resp();
  IMS_node.set_ims_error_value(ims_Error_E_GENERIC_FAILURE);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_COLR
  IMS_node.update_default_ims_request_set_colr();
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_COLR (resp)
  IMS_node.update_default_ims_request_set_colr_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_COLR
  IMS_node.update_default_ims_request_set_colr();
  IMS_node.set_ims_request_set_colr_req_colr((ims_IpPresentation)10);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_COLR (resp)
  IMS_node.update_default_ims_request_set_colr_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);

  // Inject: ims_MsgId_REQUEST_SET_COLR
  IMS_node.update_default_ims_request_set_colr();
  IMS_node.set_ims_request_set_colr_req_colr(ims_IpPresentation_IP_PRESENTATION_NUM_DEFAULT);
  t.inject(IMS_node);

  // Expect: ims_MsgId_REQUEST_SET_COLR (resp)
  IMS_node.update_default_ims_request_set_colr_resp();
  IMS_node.set_ims_error_value(ims_Error_E_INVALID_PARAMETER);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**=======
@testname: ril_utf_stk_cc_dial_modified_to_ss_001
@description: MO CS call. And voice call got converted to SS
==**/
test_result ril_utf_stk_cc_dial_modified_to_ss_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");

  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536960");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_UNKNOWN_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("2428536960");
  strlcpy(number_list1[0].number, "2428536960", strlen("2428536960")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);
#endif

  // Inject: QMI_VOICE_CALL_CONTROL_RESULT_INFO_IND_V02
  voice_call_control_result_info_ind_msg_v02 *call_control_result1 = QMI_node.update_default_qmi_voice_call_control_result_ind_msg();
  call_control_result1->alpha_presence = VOICE_CC_ALPHA_NULL_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  voice_alpha_ident_type_v02* alpha_iden = QMI_node.set_qmi_voice_dial_call_resp_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  QMI_node.set_qmi_voice_dial_call_cc_result_type(VOICE_CC_RESULT_TYPE_SUPS_V02);
  voice_cc_sups_result_type_v02* cc_sups_result = QMI_node.set_qmi_voice_dial_call_resp_cc_sups_result();
  cc_sups_result->service_type = VOICE_CC_SUPS_RESULT_SERVICE_TYPE_ACTIVATE_V02;
  cc_sups_result->reason = VOICE_CC_SUPS_RESULT_REASON_NONE_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_DIAL_MODIFIED_TO_SS);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_DIAL_MODIFIED_TO_SS;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_ACTIVATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  alpha_iden = QMI_node.set_qmi_voice_sups_ind_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  voice_uss_info_type_v02* voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_ACTIVATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  QMI_node.set_qmi_voice_sups_ind_reason(VOICE_SUPS_IND_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_SS
  RIL_StkCcUnsolSsResponse* unsol_ss_resp = RIL_node.update_default_ril_unsol_on_ss();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**=======
@testname: ril_utf_stk_cc_dial_modified_to_ss_002
@description: MO CS call. And voice call got converted to SS
==**/
test_result ril_utf_stk_cc_dial_modified_to_ss_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");

  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("1213");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("1213");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_UNKNOWN_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list1 = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list1[0].call_id = 1;
  number_list1[0].number_len = strlen("1213");
  strlcpy(number_list1[0].number, "1213", strlen("1213")+1);
  number_list1[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

#ifdef RIL_UTF_L_MASTER
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);
#endif

  // Inject: QMI_VOICE_CALL_CONTROL_RESULT_INFO_IND_V02
  voice_call_control_result_info_ind_msg_v02 *call_control_result1 = QMI_node.update_default_qmi_voice_call_control_result_ind_msg();
  call_control_result1->alpha_presence = VOICE_CC_ALPHA_NULL_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  voice_alpha_ident_type_v02* alpha_iden = QMI_node.set_qmi_voice_dial_call_resp_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  QMI_node.set_qmi_voice_dial_call_cc_result_type(VOICE_CC_RESULT_TYPE_SUPS_V02);
  voice_cc_sups_result_type_v02* cc_sups_result = QMI_node.set_qmi_voice_dial_call_resp_cc_sups_result();
  cc_sups_result->service_type = VOICE_CC_SUPS_RESULT_SERVICE_TYPE_INTERROGATE_V02;
  cc_sups_result->reason = VOICE_CC_SUPS_RESULT_REASON_FWD_UNCONDITIONAL_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  RIL_node.set_ril_error_value(RIL_E_DIAL_MODIFIED_TO_SS);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause = RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_DIAL_MODIFIED_TO_SS;
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_INTERROGATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  alpha_iden = QMI_node.set_qmi_voice_sups_ind_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  voice_uss_info_type_v02* voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_INTERROGATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  QMI_node.set_qmi_voice_sups_ind_reason(VOICE_SUPS_IND_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_sups_ind_call_forwarding_info(1);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_SS
  RIL_StkCcUnsolSsResponse* unsol_ss_resp = RIL_node.update_default_ril_unsol_on_ss();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}



/**=======
@testname: ril_utf_stk_cc_dial_modified_to_ss_002
@description: MO CS call. And voice call got converted to SS
==**/
test_result ril_utf_stk_cc_dial_modified_to_ss_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  char *extra[2] = {"DisplayText=TestDisplayTextHello", nullptr};
  ptr->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  IMS_node.set_ims_request_dial_isencrypted(FALSE);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_AUTOMATIC_V02);
  uint16_t display_text[20] = {'T','e','s','t','D','i','s','p','l','a','y','T','e','x','t','H','e','l','l','o'};
  uint16_t *dial_req_display_text = QMI_node.set_qmi_voice_dial_call_req_display_text(20);
  for(int i=0; i<20; i++) {
    dial_req_display_text[i] = display_text[i];
  }
  QMI_node.set_qmi_voice_dial_call_req_is_secure_call(FALSE);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CC_IN_PROGRESS_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // Media ID
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 2;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  QMI_node.set_qmi_voice_dial_call_cc_result_type(VOICE_CC_RESULT_TYPE_SUPS_V02);
  voice_cc_sups_result_type_v02* cc_sups_result = QMI_node.set_qmi_voice_dial_call_resp_cc_sups_result();
  cc_sups_result->service_type = VOICE_CC_SUPS_RESULT_SERVICE_TYPE_INTERROGATE_V02;
  cc_sups_result->reason = VOICE_CC_SUPS_RESULT_REASON_FWD_UNCONDITIONAL_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  IMS_node.set_ims_error_value(ims_Error_E_DIAL_MODIFIED_TO_SS);
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_AUTOMATIC;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_DIAL_MODIFIED_TO_SS;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_INTERROGATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  voice_alpha_ident_type_v02 *alpha_iden = QMI_node.set_qmi_voice_sups_ind_alpha_ident();
  alpha_iden->alpha_dcs = (alpha_dcs_enum_v02)0;
  alpha_iden->alpha_text_len = 1;
  alpha_iden->alpha_text[0] = 0;
  voice_uss_info_type_v02* voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_INTERROGATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  QMI_node.set_qmi_voice_sups_ind_reason(VOICE_SUPS_IND_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_sups_ind_call_forwarding_info(1);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_ON_SS
  IMS_node.update_default_ims_unsol_on_ss();
  IMS_node.set_expect_skip_verification_status(false);
  t.expect(IMS_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_stk_cc_set_call_forward_ss_modified_to_ss_001
==**/
test_result ril_utf_stk_cc_set_call_forward_ss_modified_to_ss_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_CALL_FORWARD
  RIL_CallForwardInfo *ptr = RIL_node.update_default_ril_request_set_call_forward();
  ptr->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02, VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_set_sups_service_cc_result_type(VOICE_CC_RESULT_TYPE_SUPS_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_FORWARD (resp)
  RIL_node.update_default_ril_request_set_call_forward_resp();
  RIL_node.set_ril_error_value(RIL_E_SS_MODIFIED_TO_SS);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_ACTIVATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_ACTIVATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  QMI_node.set_qmi_voice_sups_ind_reason(VOICE_SUPS_IND_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_SS
  RIL_StkCcUnsolSsResponse* unsol_ss_resp = RIL_node.update_default_ril_unsol_on_ss();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_stk_cc_set_call_forward_ss_modified_to_ss_002
==**/
test_result ril_utf_stk_cc_set_call_forward_ss_modified_to_ss_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  ims_CallForwardInfoList_CallForwardInfo **ptr;

  // Inject: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS
  ptr = IMS_node.update_default_ims_request_set_call_forward_status(1);
  ptr[0]->has_status = TRUE;
  ptr[0]->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr[0]->has_reason = TRUE;
  ptr[0]->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(IMS_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02, VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_set_sups_service_cc_result_type(VOICE_CC_RESULT_TYPE_SUPS_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_SET_CALL_FORWARD_STATUS (resp)
  ims_CallForwardStatusInfo *resp = IMS_node.update_default_ims_request_set_call_forward_status_resp();
  IMS_node.set_ims_error_value(ims_Error_E_SS_MODIFIED_TO_SS);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_ACTIVATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_ACTIVATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_call_id(1);
  QMI_node.set_qmi_voice_sups_ind_reason(VOICE_SUPS_IND_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  t.inject(QMI_node);

#if 0
  // Expect: RIL_UNSOL_ON_SS
  RIL_StkCcUnsolSsResponse* unsol_ss_resp = RIL_node.update_default_ril_unsol_on_ss();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);
#endif

  // Expect: ims_MsgId_UNSOL_ON_SS
  IMS_node.update_default_ims_unsol_on_ss();
  IMS_node.set_expect_skip_verification_status(false);
  t.expect(IMS_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_stk_cc_set_call_forward_ss_modified_to_ussd_001
==**/
test_result ril_utf_stk_cc_set_call_forward_ss_modified_to_ussd_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_CALL_FORWARD
  RIL_CallForwardInfo *ptr = RIL_node.update_default_ril_request_set_call_forward();
  ptr->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02, VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_set_sups_service_cc_result_type(VOICE_CC_RESULT_TYPE_USSD_V02);
  QMI_node.set_qmi_voice_set_sups_service_cc_sups_result(VOICE_CC_SUPS_RESULT_SERVICE_TYPE_USSD_V02, VOICE_CC_SUPS_RESULT_REASON_NONE_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_FORWARD (resp)
  RIL_node.update_default_ril_request_set_call_forward_resp();
  RIL_node.set_ril_error_value(RIL_E_SS_MODIFIED_TO_USSD);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_USSD_V02, TRUE);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_USSD_V02, TRUE);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  uint16_t* uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info(6);
  uss_info[0] = 'H';
  uss_info[1] = 'e';
  uss_info[2] = 'l';
  uss_info[3] = 'l';
  uss_info[4] = 'o';
  uss_info[4] = '\0';
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('0', "Hello", 6);
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_stk_cc_set_call_forward_ss_modified_to_ussd_002
==**/
test_result ril_utf_stk_cc_set_call_forward_ss_modified_to_ussd_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_CALL_FORWARD
  RIL_CallForwardInfo *ptr = RIL_node.update_default_ril_request_set_call_forward();
  ptr->status = 1;  // QCRIL_QMI_VOICE_MODE_ENABLE
  ptr->reason = 0;  // QCRIL_QMI_VOICE_CCFC_REASON_UNCOND
  t.inject(RIL_node);

  // Expect: QMI_VOICE_SET_SUPS_SERVICE_REQ
  QMI_node.update_default_qmi_voice_set_sups_service_req_msg(VOICE_SERVICE_ACTIVATE_V02, VOICE_REASON_FWD_UNCONDITIONAL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_SET_SUPS_SERVICE_RSEP_V02
  QMI_node.update_default_qmi_voice_set_sups_service_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_set_sups_service_cc_result_type(VOICE_CC_RESULT_TYPE_USSD_V02);
  QMI_node.set_qmi_voice_set_sups_service_cc_sups_result(VOICE_CC_SUPS_RESULT_SERVICE_TYPE_USSD_V02, VOICE_CC_SUPS_RESULT_REASON_NONE_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SET_CALL_FORWARD (resp)
  RIL_node.update_default_ril_request_set_call_forward_resp();
  RIL_node.set_ril_error_value(RIL_E_SS_MODIFIED_TO_USSD);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_USSD_V02, TRUE);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_USSD_V02, TRUE);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  voice_uss_info_type_v02* voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('0', "A", 2);
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_stk_cc_query_clip_ss_modified_to_ussd_001
@description: query CLIP, gets STK CC modifed to USSD
==**/
test_result ril_utf_stk_cc_query_clip_ss_modified_to_ussd_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_QUERY_CLIP
  RIL_node.update_default_ril_request_query_clip();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_cc_result_type(VOICE_CC_RESULT_TYPE_USSD_V02);
  QMI_node.set_qmi_voice_get_clip_resp_msg_cc_sups_result(VOICE_CC_SUPS_RESULT_SERVICE_TYPE_USSD_V02, VOICE_CC_SUPS_RESULT_REASON_NONE_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_QUERY_CLIP (resp)
  RIL_node.update_default_ril_request_query_clip_resp(1);
  RIL_node.set_ril_error_value(RIL_E_SS_MODIFIED_TO_USSD);
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_USSD_V02, TRUE);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_USSD_V02, TRUE);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  voice_uss_info_type_v02* voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('0', "A", 2);
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_stk_cc_query_clip_ss_modified_to_ussd_002
@description: query CLIP, gets STK CC modifed to USSD
==**/
test_result ril_utf_stk_cc_query_clip_ss_modified_to_ussd_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: ims_MsgId_REQUEST_QUERY_CLIP
  IMS_node.update_default_ims_request_query_clip();
  t.inject(IMS_node);

  // Expect: QMI_VOICE_GET_CLIP_REQ_V02
  QMI_node.update_default_qmi_voice_get_clip_req_v02();
  t.expect(QMI_node);

  // Inject: QMI_VOICE_GET_CLIP_RESP_V02
  QMI_node.update_default_qmi_voice_get_clip_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_get_clip_resp_msg_cc_result_type(VOICE_CC_RESULT_TYPE_USSD_V02);
  QMI_node.set_qmi_voice_get_clip_resp_msg_cc_sups_result(VOICE_CC_SUPS_RESULT_SERVICE_TYPE_USSD_V02, VOICE_CC_SUPS_RESULT_REASON_NONE_V02);
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_QUERY_CLIP (resp)
  ims_ClipProvisionStatus *resp = IMS_node.update_default_ims_request_query_clip_resp_no_status();
  IMS_node.set_ims_error_value(ims_Error_E_SS_MODIFIED_TO_USSD);
  t.expect(IMS_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_USSD_V02, TRUE);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_USSD_V02, TRUE);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  voice_uss_info_type_v02* voice_uss_info = QMI_node.set_qmi_voice_sups_ind_uss_info();
  voice_uss_info->uss_dcs = USS_DCS_8BIT_V02;
  voice_uss_info->uss_data_len = 1;
  voice_uss_info->uss_data[0] = 65;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_USSD
  RIL_node.update_default_ril_unsol_on_ussd('0', "A", 2);
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_stk_cc_send_ussd_ussd_modified_to_ss_001
@description:
Send USSD, STK CC modifies to SS
==**/
test_result ril_utf_stk_cc_send_ussd_ussd_modified_to_ss_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("Send USSD, STK CC modifies to SS");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SEND_USSD
  ril_request_send_ussd_t *send_ussd_req = RIL_node.update_default_ril_request_send_ussd("*1918#");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_ORIG_USSD_REQ_V02
  voice_uss_info_type_v02 *orig_ussd_req_uss = QMI_node.update_default_qmi_voice_orig_ussd_req_msg();
  // TODO verify parameters
  QMI_node.set_expect_skip_verification_status(false);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ORIG_USSD_RESP_V02
  QMI_node.update_default_qmi_voice_orig_ussd_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_orig_ussd_resp_cc_result_type(VOICE_CC_RESULT_TYPE_SUPS_V02);
  QMI_node.set_qmi_voice_orig_ussd_resp_cc_sups_result(VOICE_CC_SUPS_RESULT_SERVICE_TYPE_INTERROGATE_V02, VOICE_CC_SUPS_RESULT_REASON_FWD_UNCONDITIONAL_V02);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_SEND_USSD (resp)
  RIL_node.update_default_ril_request_send_ussd_resp();
  RIL_node.set_ril_error_value(RIL_E_USSD_MODIFIED_TO_SS);
  t.expect(RIL_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_INTERROGATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_MS_V02);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_SUPS_IND_V02
  QMI_node.update_default_qmi_voice_sups_ind_msg(SERVICE_TYPE_INTERROGATE_V02, 1);
  QMI_node.set_qmi_voice_sups_ind_reason(VOICE_SUPS_IND_REASON_FWD_UNCONDITIONAL_V02);
  QMI_node.set_qmi_voice_sups_ind_data_source(VOICE_SUPS_DATA_SOURCE_NETWORK_V02);
  voice_get_call_forwarding_info_type_v02 *call_forwarding_info = QMI_node.set_qmi_voice_sups_ind_call_forwarding_info(1);
  call_forwarding_info[0].service_status = SERVICE_STATUS_ACTIVE_V02;
  call_forwarding_info[0].service_class = 0x01;  // CLASS_VOICE
  call_forwarding_info[0].number_len = strlen("+8613716857493");
  strlcpy(call_forwarding_info[0].number, "+8613716857493", strlen("+8613716857493")+1);
  call_forwarding_info[0].no_reply_timer = 20;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_ON_SS
  RIL_StkCcUnsolSsResponse* unsol_ss_resp = RIL_node.update_default_ril_unsol_on_ss();
  RIL_node.set_expect_skip_verification_status(false);
  t.expect(RIL_node);


  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_set_local_call_hold_001
@description:
Set local call hold
==**/
test_result ril_utf_test_set_local_call_hold_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("Oemhook : set local hold");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QCRIL_REQ_HOOK_SET_LOCAL_CALL_HOLD_v01
  OEM_node.update_default_qcril_evt_hook_request_set_local_call_hold(1);
  t.inject(OEM_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_LOCAL_HOLD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QCRIL_REQ_HOOK_SET_LOCAL_CALL_HOLD_v01 (resp)
  OEM_node.update_default_qcril_evt_hook_request_set_local_call_hold_resp();
  t.expect(OEM_node);

  // Inject: QCRIL_REQ_HOOK_SET_LOCAL_CALL_HOLD_v01
  OEM_node.update_default_qcril_evt_hook_request_set_local_call_hold(0);
  t.inject(OEM_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_LOCAL_UNHOLD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: QCRIL_REQ_HOOK_SET_LOCAL_CALL_HOLD_v01 (resp)
  OEM_node.update_default_qcril_evt_hook_request_set_local_call_hold_resp();
  t.expect(OEM_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_oemhook_unsol_cdma_burst_dtmf_001
@description:
Oemhook indication
==**/
test_result ril_utf_oemhook_unsol_cdma_burst_dtmf_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("Oemhook indication: unsol dtmf");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_DTMF_IND_V02
  voice_dtmf_info_type_v02 *dtmf_info = QMI_node.update_default_qmi_voice_dtmf_ind_msg();
  dtmf_info->call_id = 0;
  dtmf_info->dtmf_event = DTMF_EVENT_FWD_BURST_V02;
  dtmf_info->digit_buffer_len = 10;
  strlcpy(dtmf_info->digit_buffer, "1234567890", strlen("1234567890")+1);
  QMI_node.set_qmi_voice_dtmf_ind_on_length(DTMF_ONLENGTH_95MS_V02);
  QMI_node.set_qmi_voice_dtmf_ind_off_length(DTMF_OFFLENGTH_60MS_V02);
  t.inject(QMI_node);

  // Expect: QCRIL_REQ_HOOK_UNSOL_CDMA_BURST_DTMF
  OEM_node.update_default_qcril_evt_hook_cdma_burst_dtmf("1234567890", "95", "60");
  t.expect(OEM_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_oemhook_unsol_cdma_cont_dtmf_001
@description:
Oemhook indication
==**/
test_result ril_utf_oemhook_unsol_cdma_cont_dtmf_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("Oemhook indication: unsol dtmf");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_DTMF_IND_V02
  voice_dtmf_info_type_v02 *dtmf_info = QMI_node.update_default_qmi_voice_dtmf_ind_msg();
  dtmf_info->call_id = 0;
  dtmf_info->dtmf_event = DTMF_EVENT_FWD_START_CONT_V02;
  dtmf_info->digit_buffer_len = 1;
  strlcpy(dtmf_info->digit_buffer, "1", strlen("1")+1);
  t.inject(QMI_node);

  // Expect: QCRIL_REQ_HOOK_UNSOL_CDMA_CONT_DTMF_START
  OEM_node.update_default_qcril_evt_hook_cdma_cont_dtmf_start('1');
  t.expect(OEM_node);

  // Inject: QMI_VOICE_DTMF_IND_V02
  dtmf_info = QMI_node.update_default_qmi_voice_dtmf_ind_msg();
  dtmf_info->call_id = 0;
  dtmf_info->dtmf_event = DTMF_EVENT_FWD_STOP_CONT_V02;
  dtmf_info->digit_buffer_len = 1;
  strlcpy(dtmf_info->digit_buffer, "1", strlen("1")+1);
  t.inject(QMI_node);

  // Expect: QCRIL_REQ_HOOK_UNSOL_CDMA_CONT_DTMF_STOP
  OEM_node.update_default_qcril_evt_hook_cdma_cont_dtmf_stop();
  t.expect(OEM_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_oemhook_unsol_nss_release_001
@description:
Oemhook indication
==**/
test_result ril_utf_oemhook_unsol_nss_release_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("Oemhook indication: UNSOL_NSS_RELEASE");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_INFO_REC_IND_V02
  QMI_node.update_default_qmi_voice_info_rec_ind_msg(1);
  QMI_node.set_qmi_voice_info_rec_ind_nss_release(QMI_VOICE_NSS_RELEASE_FINISHED_V02);
  t.inject(QMI_node);

  // Expect: QCRIL_REQ_HOOK_UNSOL_NSS_RELEASE
  OEM_node.update_default_qcril_evt_hook_unsol_nss_release(1, QMI_VOICE_NSS_RELEASE_FINISHED_V02);
  t.expect(OEM_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_oemhook_unsol_extended_dbm_intl_001
@description:
Oemhook indication
==**/
test_result ril_utf_oemhook_unsol_extended_dbm_intl_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;
  OEMTestnode OEM_node;

  t.set_test_id(__func__);
  t.set_test_description("Oemhook indication: UNSOL_EXTENDED_DBM_INTL");
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_EXT_BRST_INTL_IND_V02
  QMI_node.update_default_qmi_voice_ext_brst_intl_ind_msg(480, 10, 20, 5, 7);
  t.inject(QMI_node);

  // Expect: QCRIL_REQ_HOOK_UNSOL_EXTENDED_DBM_INTL
  OEM_node.update_default_qcril_evt_hook_unsol_extended_dbm_intl(480, 10, 20, 5, 7);
  t.expect(OEM_node);

  t.execute();

  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_mt_call_with_tir_mode_001
@description: MT VoLTE call with tir mode permanent
==**/
test_result ril_utf_ims_mt_call_with_tir_mode_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960"));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;

  // tir mode for incoming call
  voice_tir_mode_type_v02 *tir_mode = QMI_node.set_qmi_voice_all_call_status_ind_tir_mode(1);
  tir_mode[0].call_id = 1;
  tir_mode[0].tir_mode = SUPS_MODE_PERMANENT_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->tirMode = ims_TirMode_PERMANENT;
  t.expect(IMS_node);

  call_type_enum_v02 connect_modem_call_type = CALL_TYPE_VOICE_IP_V02;
  voice_call_attribute_type_mask_v02 video_attributes = (voice_call_attribute_type_mask_v02)0;
  // Inject: ims_MsgID_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  IMS_node.set_ims_request_answer_call_type(ims_CallType_CALL_TYPE_VOICE);
  IMS_node.set_ims_request_answer_presentation(ims_IpPresentation_IP_PRESENTATION_NUM_DEFAULT);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = connect_modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960"));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
/**==
@testname: ril_utf_ims_mt_call_with_tir_mode_002
@description: MT VoLTE call with tir mode temporary
==**/
test_result ril_utf_ims_mt_call_with_tir_mode_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_INCOMING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960"));
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_media_id_with_id_type_v02 *media_id = QMI_node.set_qmi_voice_all_call_status_ind_media_id(1);
  media_id[0].call_id = 1;
  media_id[0].media_id = 0;
  voice_call_attributes_type_v02 *audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;

  // tir mode for incoming call
  voice_tir_mode_type_v02 *tir_mode = QMI_node.set_qmi_voice_all_call_status_ind_tir_mode(1);
  tir_mode[0].call_id = 1;
  tir_mode[0].tir_mode = SUPS_MODE_TEMPORARY_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_CALL_RING
  IMS_node.update_default_ims_unsol_call_ring();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_INCOMING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  calls[0]->tirMode = ims_TirMode_TEMPORARY;
  t.expect(IMS_node);

  call_type_enum_v02 connect_modem_call_type = CALL_TYPE_VOICE_IP_V02;
  voice_call_attribute_type_mask_v02 video_attributes = (voice_call_attribute_type_mask_v02)0;
  // Inject: ims_MsgID_REQUEST_ANSWER
  IMS_node.update_default_ims_request_answer();
  IMS_node.set_ims_request_answer_call_type(ims_CallType_CALL_TYPE_VOICE);
  IMS_node.set_ims_request_answer_presentation(ims_IpPresentation_IP_PRESENTATION_NUM_RESTRICTED);
  t.inject(IMS_node);

  // Expect: QMI_VOICE_ANSWER_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_answer_call_req_msg(1);
  QMI_node.set_qmi_voice_answer_call_req_pi(IP_PRESENTATION_NUM_RESTRICTED_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ANSWER_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_answer_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = connect_modem_call_type;
  call_info[0].direction = CALL_DIRECTION_MT_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960"));
  number_list[0].number_pi = PRESENTATION_NUM_RESTRICTED_V02;
  audio_attrib = QMI_node.set_qmi_voice_all_call_status_ind_audio_attrib(1);
  audio_attrib[0].call_id         = 1;
  audio_attrib[0].call_attributes = VOICE_CALL_ATTRIB_TX_V02 | VOICE_CALL_ATTRIB_RX_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_ANSWER (resp)
  IMS_node.update_default_ims_request_answer_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 0;
  t.expect(IMS_node);

  util_mt_ims_call_end_indication(t, IMS_node, QMI_node, ims_CallType_CALL_TYPE_VOICE);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_wlan_mo_call_002
@description: WiFi quality indication in a MO call
==**/
test_result ril_utf_ims_wlan_mo_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  t.set_test_description("WiFi quality indication in a MO VoWIFI call");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_WLAN_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  // Inject: QMI_IMSA_VoWIFI_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_vowifiprofile_status_ind(IMSA_SERVICE_VOWIFI_QUALITIY_BAD_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_VOWIFI_CALL_QUALITY
  IMS_node.update_default_ims_unsol_vowifi_call_quality(ims_voWiFiQuality_VOWIFI_QUALITY_BAD);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_VoWIFI_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_vowifiprofile_status_ind(IMSA_SERVICE_VOWIFI_QUALITIY_FAIR_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_VOWIFI_CALL_QUALITY
  IMS_node.update_default_ims_unsol_vowifi_call_quality(ims_voWiFiQuality_VOWIFI_QUALITY_FAIR);
  t.expect(IMS_node);

  // Inject: QMI_IMSA_VoWIFI_STATUS_IND_V01
  QMI_node.update_default_qmi_imsa_vowifiprofile_status_ind(IMSA_SERVICE_VOWIFI_QUALITIY_EXCELLENT_V01);
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_VOWIFI_CALL_QUALITY
  IMS_node.update_default_ims_unsol_vowifi_call_quality(ims_voWiFiQuality_VOWIFI_QUALITY_EXCELLENT);
  t.expect(IMS_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_wlan_mo_call_001
==**/
test_result ril_utf_ims_wlan_mo_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_WLAN_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_wlan_mo_vt_call_001
==**/
test_result ril_utf_ims_wlan_mo_vt_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_WLAN_V02, ims_CallType_CALL_TYPE_VT, ims_CallType_CALL_TYPE_VT, false);

  t.execute();
  t.print_summary();
  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_wlan_mo_vt_tx_call_001
==**/
test_result ril_utf_ims_wlan_mo_vt_tx_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_WLAN_V02, ims_CallType_CALL_TYPE_VT_TX, ims_CallType_CALL_TYPE_VT_TX, false);

  t.execute();
  t.print_summary();
  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_srvcc_mo_call_001
@description: LTE -> GSM SRVCC on MO LTE call through IMS. Hangup call.
==**/
test_result ril_utf_ims_srvcc_mo_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("LTE -> GSM SRVCC on MO LTE call through IMS. Hangup call.");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_voice_handover_ind(t, VOICE_HO_SRVCC_L_2_G_V02, VOICE_HANDOVER_COMPLETE_V02);


  // Updated call info for GSM call after SRVCC from LTE.
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // SRVCC Info
  voice_is_srvcc_call_with_id_type_v02 *srvcc_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(1);
  srvcc_info[0].call_id = 1;
  srvcc_info[0].is_srvcc_call = 1;
  t.inject(QMI_node);

  // Inform ATEL of SRVCC
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Hangup sequence for ATEL and IMS
  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_srvcc_mo_call_001

/**==
@testname: ril_utf_ims_srvcc_mo_call_002
@description: LTE -> GSM SRVCC FAILURE on MO LTE call through IMS. Hangup call.
==**/
test_result ril_utf_ims_srvcc_mo_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("LTE -> GSM SRVCC FAILURE on MO LTE call through IMS. Hangup call.");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_voice_handover_ind(t, VOICE_HO_SRVCC_L_2_G_V02, VOICE_HANDOVER_FAIL_V02);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_INVALID_TRANSACTION_IDENTIFIER_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED;
  calls[0]->failCause.errorDetails.has_sipErrorCode = FALSE;
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_srvcc_mo_call_002

/**==
@testname: ril_utf_ims_srvcc_mo_call_003
@description: LTE -> GSM SRVCC CANCEL
==**/
test_result ril_utf_ims_srvcc_mo_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_description("LTE -> GSM SRVCC CANCEL");
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_voice_handover_ind(t, VOICE_HO_SRVCC_L_2_G_V02, VOICE_HANDOVER_CANCEL_V02);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_LTE_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_INVALID_TRANSACTION_IDENTIFIER_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_END;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->has_numberPresentation = TRUE;
  calls[0]->numberPresentation     = 0;
  calls[0]->has_namePresentation = TRUE;
  calls[0]->namePresentation     = 2;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  calls[0]->callDetails.has_mediaId = TRUE;
  calls[0]->callDetails.mediaId = 2;
  calls[0]->callDetails.has_callSubstate = TRUE;
  calls[0]->callDetails.callSubstate = ims_CallSubstate_CALL_SUBSTATE_NONE;
  char *extra[2] = {"Codec=AMR_WB", nullptr};
  calls[0]->callDetails.extras.arg = util_allocate_call_details_extra(extra);
  calls[0]->has_failCause = TRUE;
  calls[0]->failCause.has_failcause = TRUE;
  calls[0]->failCause.failcause = ims_CallFailCause_CALL_FAIL_ERROR_UNSPECIFIED;
  calls[0]->failCause.errorDetails.has_sipErrorCode = FALSE;
  t.expect(IMS_node);


  // Execute test
  t.execute();
  t.print_summary();

  return t.get_test_result();

} // ril_utf_ims_srvcc_mo_call_003

/**==
@testname: ril_utf_ims_srvcc_conf_call_001
@description:
1. VoLTE conference call with 2 participants
2. SRVCC from LTE to G with mid-call support
3. Both the calls are transfered to G with mpty bit set
==**/
test_result ril_utf_ims_srvcc_conf_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  t.set_test_description("LTE -> GSM SRVCC SUCCESS with ACTIVE conference call.");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);
  util_voice_handover_ind(t, VOICE_HO_SRVCC_L_2_G_V02, VOICE_HANDOVER_COMPLETE_V02);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 4;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  call_info[0].call_id = 5;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 4;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 5;
  number_list[0].number_len = strlen("2428536961");
  strlcpy(number_list[0].number, "2428536961", strlen("2428536961")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  // SRVCC Info
  voice_is_srvcc_call_with_id_type_v02 *srvcc_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(2);
  srvcc_info[1].call_id = 4;
  srvcc_info[1].is_srvcc_call = 1;
  srvcc_info[0].call_id = 5;
  srvcc_info[0].is_srvcc_call = 1;

  // SRVCC parent call info
  voice_srvcc_parent_call_id_type_v02 *srvcc_parent_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_parent_call_info(2);
  srvcc_parent_info[1].call_id = 4;
  srvcc_parent_info[1].parent_call_id = 3;
  srvcc_parent_info[1].is_parent_id_cleared = TRUE;
  srvcc_parent_info[0].call_id = 5;
  srvcc_parent_info[0].parent_call_id = 3;
  srvcc_parent_info[0].is_parent_id_cleared = TRUE;

  t.inject(QMI_node);


  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
  call[0]->isMpty = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
  call[1]->isMpty = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536961");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 4;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  call_info[0].call_id = 5;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 4;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 5;
  number_list[0].number_len = strlen("2428536961");
  strlcpy(number_list[0].number, "2428536961", strlen("2428536961")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND (RESP)
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_srvcc_held_conf_call
@description:
1. VoLTE conference call with 2 participants
2. Conference call in CALL_STATE_HOLD
3. SRVCC from LTE to G with mid-call support
4. Both the calls are transfered to G with mpty bit set
==**/
test_result ril_utf_ims_srvcc_conf_call_002(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  t.set_test_description("LTE -> GSM SRVCC SUCCESS with HELD conference call.");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);
  util_ims_hold_volte_conference_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);
  util_voice_handover_ind(t, VOICE_HO_SRVCC_L_2_G_V02, VOICE_HANDOVER_COMPLETE_V02);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 4;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  call_info[0].call_id = 5;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 4;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 5;
  number_list[0].number_len = strlen("2428536961");
  strlcpy(number_list[0].number, "2428536961", strlen("2428536961")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  // SRVCC Info
  voice_is_srvcc_call_with_id_type_v02 *srvcc_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(2);
  srvcc_info[1].call_id = 4;
  srvcc_info[1].is_srvcc_call = 1;
  srvcc_info[0].call_id = 5;
  srvcc_info[0].is_srvcc_call = 1;

  // SRVCC parent call info
  voice_srvcc_parent_call_id_type_v02 *srvcc_parent_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_parent_call_info(2);
  srvcc_parent_info[1].call_id = 4;
  srvcc_parent_info[1].parent_call_id = 3;
  srvcc_parent_info[1].is_parent_id_cleared = TRUE;
  srvcc_parent_info[0].call_id = 5;
  srvcc_parent_info[0].parent_call_id = 3;
  srvcc_parent_info[0].is_parent_id_cleared = TRUE;

  t.inject(QMI_node);


  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 2;
  call[0]->isMpty = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->index = 1;
  call[1]->isMpty = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "2428536961");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND
  RIL_node.update_default_ril_request_hangup_waiting_or_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_RELEASE_HELD_OR_WAITING_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 4;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  call_info[0].call_id = 5;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(2);
  number_list[1].call_id = 4;
  number_list[1].number_len = strlen("2428536960");
  strlcpy(number_list[1].number, "2428536960", strlen("2428536960")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  number_list[0].call_id = 5;
  number_list[0].number_len = strlen("2428536961");
  strlcpy(number_list[0].number, "2428536961", strlen("2428536961")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND (Resp)
  RIL_node.update_default_ril_request_hangup_waiting_or_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}


/**==
@testname: ril_utf_ims_srvcc_conf_call_003
@description:
1. VoLTE conference call with 2 participants
2. SRVCC from LTE to G *without* mid-call support
3. Calls is transfered to CS domain, but only one call present
   with mpty bit set to FALSE
4. Report the call as mpty to Telephony.
   1 call to RILD
==**/
test_result ril_utf_ims_srvcc_conf_call_003(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  t.set_test_description("LTE -> GSM SRVCC (no mid-call support) SUCCESS with ACTIVE conf call.");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);
  util_voice_handover_ind(t, VOICE_HO_SRVCC_L_2_G_V02, VOICE_HANDOVER_COMPLETE_V02);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // SRVCC Info
  voice_is_srvcc_call_with_id_type_v02 *srvcc_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(1);
  srvcc_info[0].call_id = 3;
  srvcc_info[0].is_srvcc_call = 1;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->index = 3;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMpty = 0;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "n_way_voice");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup(3);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(3);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;
  t.expect(RIL_node);


  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_srvcc_conf_call_004
@description:
1. VoLTE conference call with 2 participants
2. Conference call in CALL_STATE_HOLD
3. SRVCC from LTE to G *without* mid-call support
4. Calls is transfered to CS domain but only one call with mpty set to FALSE
==**/
test_result ril_utf_ims_srvcc_conf_call_004(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  t.set_test_description("LTE -> GSM SRVCC (no mid-call support) SUCCESS with HELD conf call.");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }


  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);
  util_ims_hold_volte_conference_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);
  util_voice_handover_ind(t, VOICE_HO_SRVCC_L_2_G_V02, VOICE_HANDOVER_COMPLETE_V02);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // SRVCC Info
  voice_is_srvcc_call_with_id_type_v02 *srvcc_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(1);
  srvcc_info[0].call_id = 3;
  srvcc_info[0].is_srvcc_call = 1;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->index = 3;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMpty = 0;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "n_way_voice");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup(3);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(3);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_ims_srvcc_conf_call_005
@description:
1. VoLTE conference call with 2 participants
2. SRVCC from LTE to G *without* mid-call support
3. Calls is transfered to CS domain, but only one call present
   with mpty bit set to FALSE
4. Report the call as mpty to Telephony.
   1 call to RILD and 2 calls to IMS
5. Add a new CS voice call and make conference
==**/
test_result ril_utf_ims_srvcc_conf_call_005(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  util_ims_mo_call_active(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE, false);
  util_ims_mo_call_hold(t, CALL_MODE_LTE_V02, CALL_TYPE_VOICE_IP_V02);
  util_ims_add_second_mo_call_to_held_mo_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE, ims_CallType_CALL_TYPE_VOICE);
  util_ims_conference_mo_active_call_and_held_call(t, CALL_MODE_LTE_V02, ims_CallType_CALL_TYPE_VOICE);
  util_voice_handover_ind(t, VOICE_HO_SRVCC_L_2_G_V02, VOICE_HANDOVER_COMPLETE_V02);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // SRVCC Info
  voice_is_srvcc_call_with_id_type_v02 *srvcc_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(1);
  srvcc_info[0].call_id = 3;
  srvcc_info[0].is_srvcc_call = 1;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->index = 3;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMpty = 0;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "n_way_voice");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // HOLD REQUEST
  // Inject: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 3;
  call_info[0].call_state = CALL_STATE_HOLD_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 3;
  number_list[0].number_len = strlen("n_way_voice");
  strlcpy(number_list[0].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Expect: RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE (resp)
  RIL_node.update_default_ril_request_switch_waiting_or_holding_and_active_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_HOLDING;
  call[0]->index = 3;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMpty = 0;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "n_way_voice");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_DIAL
  RIL_node.update_default_ril_request_dial("2428536962");
  t.inject(RIL_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536962");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_V02);
  QMI_node.set_qmi_voice_dial_call_req_service_type(VOICE_DIAL_CALL_SRV_TYPE_CS_ONLY_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 3;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[1].call_id = 3;
  number_list[1].number_len = strlen("n_way_voice");
  strlcpy(number_list[1].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536962");
  strlcpy(number_list[0].number, "2428536962", strlen("2428536962")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_DIAL (resp)
  RIL_node.update_default_ril_request_dial_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 3;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[1].call_id = 3;
  number_list[1].number_len = strlen("n_way_voice");
  strlcpy(number_list[1].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536962");
  strlcpy(number_list[0].number, "2428536962", strlen("2428536962")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 3;
  call_info[1].call_state = CALL_STATE_HOLD_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 0;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[1].call_id = 3;
  number_list[1].number_len = strlen("n_way_voice");
  strlcpy(number_list[1].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536962");
  strlcpy(number_list[0].number, "2428536962", strlen("2428536962")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->index = 1;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMpty = 0;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536962");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  call[1]->state = RIL_CALL_HOLDING;
  call[1]->index = 3;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMpty = 0;
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "n_way_voice");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_CONFERENCE
  RIL_node.update_default_ril_request_conference();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_FAILURE_V01, QMI_ERR_GENERAL_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CONFERENCE (resp)
  RIL_node.update_default_ril_request_conference_resp();
  RIL_node.set_ril_error_value(RIL_E_MODEM_ERR);
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_CONFERENCE
  RIL_node.update_default_ril_request_conference();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_MANAGE_CALLS_REQ_V02
  QMI_node.update_default_qmi_voice_manage_calls_req_v02(SUPS_TYPE_MAKE_CONFERENCE_CALL_V02);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_MANAGE_CALLS_RESP_V02
  QMI_node.update_default_qmi_voice_manage_calls_resp_v02(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_CONFERENCE (resp)
  RIL_node.update_default_ril_request_conference_resp();
  t.expect(RIL_node);


  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 3;
  call_info[1].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[1].call_id = 3;
  number_list[1].number_len = strlen("n_way_voice");
  strlcpy(number_list[1].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 1;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536962");
  strlcpy(number_list[0].number, "2428536962", strlen("2428536962")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(2);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->index = 1;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMpty = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536962");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  call[1]->state = RIL_CALL_ACTIVE;
  call[1]->index = 3;
  call[1]->toa = 129;
  call[1]->isVoice = 1;
  call[1]->isMpty = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(1, "n_way_voice");
  call[1]->numberPresentation = 0;
  call[1]->namePresentation = 2;
  t.expect(RIL_node);


  // Inject: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup(3);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(3);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(3);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[1].call_id = 3;
  call_info[1].call_state = CALL_STATE_END_V02;
  call_info[1].call_type = CALL_TYPE_VOICE_V02;
  call_info[1].direction = CALL_DIRECTION_MO_V02;
  call_info[1].is_mpty = 1;
  call_info[1].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[1].call_id = 3;
  number_list[1].number_len = strlen("n_way_voice");
  strlcpy(number_list[1].number, "n_way_voice", strlen("n_way_voice")+1);
  number_list[1].number_pi = PRESENTATION_NUM_ALLOWED_V02;

  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536962");
  strlcpy(number_list[0].number, "2428536962", strlen("2428536962")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup_resp();
  RIL_node.set_ril_error_value(RIL_E_SUCCESS);
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->index = 1;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->isMpty = 0;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536962");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup(1);
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(2);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_GSM_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536962");
  strlcpy(number_list[0].number, "2428536962", strlen("2428536962")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP
  RIL_node.update_default_ril_request_hangup_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  call = RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_ERROR_UNSPECIFIED;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}



/**==
@testname: ril_utf_ims_drvcc_mo_call_001
@description: DRVCC WIFI to 1x
==**/
test_result ril_utf_ims_drvcc_mo_call_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  IMSTestnode IMS_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("IMS");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }
  // Inject: ims_MsgId_REQUEST_DIAL
  ims_Dial* ptr = IMS_node.update_default_ims_request_dial("2428536960");
  ptr->has_callDetails = true;
  ptr->callDetails.has_callDomain = TRUE;
  ptr->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  ptr->callDetails.has_callType = TRUE;
  ptr->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.inject(IMS_node);

  // Expect: QMI_VOICE_DIAL_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_dial_call_req_msg("2428536960");
  QMI_node.set_qmi_voice_dial_call_req_call_type(CALL_TYPE_VOICE_IP_V02);
  QMI_node.set_qmi_voice_dial_call_req_audio_attrib(3);
  QMI_node.set_qmi_voice_dial_call_req_video_attrib(0);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_DIAL_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_dial_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_dial_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  voice_call_info2_type_v02 *call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ORIGINATING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_WLAN_V02;
  // remote_party_number
  voice_remote_party_number2_type_v02 *number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_REQUEST_DIAL (resp)
  IMS_node.update_default_ims_request_dial_resp();
  t.expect(IMS_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  ims_CallList_Call** calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_DIALING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_ALERTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_WLAN_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ALERTING;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_IP_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_WLAN_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Expect: ims_MsgId_UNSOL_RESPONSE_CALL_STATE_CHANGED
  calls = IMS_node.update_default_ims_unsol_response_call_state_changed_L(1);
  calls[0]->has_index = TRUE;
  calls[0]->index = 1;
  calls[0]->has_state = TRUE;
  calls[0]->state = ims_CallState_CALL_ACTIVE;
  calls[0]->has_toa = TRUE;
  calls[0]->toa = 129;
  calls[0]->has_isMpty = TRUE;
  calls[0]->has_isMT = TRUE;
  calls[0]->has_als = TRUE;
  calls[0]->has_isVoice = TRUE;
  calls[0]->isVoice = 1;
  calls[0]->has_isVoicePrivacy = TRUE;
  calls[0]->isVoicePrivacy = 0;
  calls[0]->callDetails.has_callDomain = TRUE;
  calls[0]->callDetails.callDomain = ims_CallDomain_CALL_DOMAIN_PS;
  calls[0]->callDetails.has_callType = TRUE;
  calls[0]->callDetails.callType = ims_CallType_CALL_TYPE_VOICE;
  t.expect(IMS_node);


  // DRVCC WIFI to 1x start indication
  util_voice_handover_ind(t, VOICE_HO_DRVCC_WIFI_2_C_V02, VOICE_HANDOVER_FAIL_V02);

  // DRVCC WIFI to 1x start indication
  util_voice_handover_ind(t, VOICE_HO_DRVCC_WIFI_2_C_V02, VOICE_HANDOVER_COMPLETE_V02);

  // Updated call info for GSM call after SRVCC from LTE.
  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_CONVERSATION_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  // SRVCC Info
  voice_is_srvcc_call_with_id_type_v02 *srvcc_info = QMI_node.set_qmi_voice_all_call_status_ind_srvcc_attrib(1);
  srvcc_info[0].call_id = 1;
  srvcc_info[0].is_srvcc_call = 1;
  t.inject(QMI_node);

  // Inform ATEL of SRVCC
  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_Call** call = RIL_node.update_default_ril_request_get_current_calls_resp(1);
  call[0]->state = RIL_CALL_ACTIVE;
  call[0]->toa = 129;
  call[0]->isVoice = 1;
  call[0]->index = 1;
  RIL_node.set_ril_request_get_current_calls_resp_number(0, "2428536960");
  call[0]->numberPresentation = 0;
  call[0]->namePresentation = 2;
  t.expect(RIL_node);

  // Hangup sequence for ATEL and IMS
  // Inject: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background();
  t.inject(RIL_node);

  // Expect: QMI_VOICE_END_CALL_REQ_V02
  QMI_node.update_default_qmi_voice_end_call_req_msg(1);
  t.expect(QMI_node);

  // Inject: QMI_VOICE_END_CALL_RESP_V02
  QMI_node.update_default_qmi_voice_end_call_resp_msg(QMI_RESULT_SUCCESS_V01, QMI_ERR_NONE_V01);
  QMI_node.set_qmi_voice_end_call_resp_call_id(1);
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_DISCONNECTING_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  t.inject(QMI_node);

  // Inject: QMI_VOICE_ALL_CALL_STATUS_IND_V02
  call_info = QMI_node.update_default_qmi_voice_all_call_status_ind_msg(1);
  call_info[0].call_id = 1;
  call_info[0].call_state = CALL_STATE_END_V02;
  call_info[0].call_type = CALL_TYPE_VOICE_V02;
  call_info[0].direction = CALL_DIRECTION_MO_V02;
  call_info[0].is_mpty = 0;
  call_info[0].mode = CALL_MODE_CDMA_V02;
  // remote_party_number
  number_list = QMI_node.set_qmi_voice_all_call_status_ind_remote_party_number(1);
  number_list[0].call_id = 1;
  number_list[0].number_len = strlen("2428536960");
  strlcpy(number_list[0].number, "2428536960", strlen("2428536960")+1);
  number_list[0].number_pi = PRESENTATION_NUM_ALLOWED_V02;
  voice_call_end_reason_type_v02* end = QMI_node.set_qmi_voice_all_call_status_ind_call_end_reason(1);
  end[0].call_id = 1;
  end[0].call_end_reason = CALL_END_CAUSE_NORMAL_CALL_CLEARING_V02;
  t.inject(QMI_node);

  // Expect: RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND
  RIL_node.update_default_ril_request_hangup_foreground_resume_background_resp();
  t.expect(RIL_node);

  // Expect: RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED
  RIL_node.update_default_ril_unsol_response_call_state_changed();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_CURRENT_CALLS
  RIL_node.update_default_ril_request_get_current_calls();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_CURRENT_CALLS (resp)
  RIL_node.update_default_ril_request_get_current_calls_resp(0);
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_node.update_default_ril_request_last_call_fail_cause();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_LAST_CALL_FAIL_CAUSE
  RIL_LastCallFailCauseInfo *fail_cause =
    RIL_node.update_default_ril_request_last_call_fail_cause_resp();
  fail_cause->cause_code = CALL_FAIL_NORMAL;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}

/**==
@testname: ril_utf_test_mute_001
@description: GET and SET MUTE test cases.
==**/
test_result ril_utf_test_mute_001(user_specified_attrib_t attr)
{
  Testcase t;
  QMIRILTestnode QMI_node;
  AndroidTelTestnode RIL_node;

  t.set_test_id(__func__);
  t.set_test_attribute("VOICE");
  if (!t.isAttributeMatch(attr)) {
    test_result ret;
    return ret;
  }

  // Inject: RIL_REQUEST_SET_MUTE
  ril_request_mute_t* set_mute_req = RIL_node.update_default_ril_request_set_mute();
  set_mute_req->enable = true;
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_SET_MUTE (Resp)
  RIL_node.update_default_ril_request_set_mute_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_MUTE
  RIL_node.update_default_ril_request_get_mute();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_MUTE (resp)
  ril_request_mute_t *get_mute_resp = RIL_node.update_default_ril_request_get_mute_resp();
  get_mute_resp->enable = true;
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_SET_MUTE
  set_mute_req = RIL_node.update_default_ril_request_set_mute();
  set_mute_req->enable = false;
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_SET_MUTE (Resp)
  RIL_node.update_default_ril_request_set_mute_resp();
  t.expect(RIL_node);

  // Inject: RIL_REQUEST_GET_MUTE
  RIL_node.update_default_ril_request_get_mute();
  t.inject(RIL_node);

  // Expect: RIL_REQUEST_GET_MUTE (resp)
  get_mute_resp = RIL_node.update_default_ril_request_get_mute_resp();
  get_mute_resp->enable = false;
  t.expect(RIL_node);

  t.execute();
  t.print_summary();

  return t.get_test_result();
}
