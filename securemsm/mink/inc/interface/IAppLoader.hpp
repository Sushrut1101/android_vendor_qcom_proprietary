// =======================================================================
// Copyright (c) 2017-2019 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
// =======================================================================

#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <cstdint>
#include "object.h"
#include "proxy_base.hpp"
#include "IAppController.hpp"

class IIAppLoader {
   public:
    static const int32_t ERROR_INVALID_BUFFER = INT32_C(10);
    static const int32_t ERROR_PIL_ROLLBACK_FAILURE = INT32_C(11);
    static const int32_t ERROR_ELF_SIGNATURE_ERROR = INT32_C(12);
    static const int32_t ERROR_METADATA_INVALID = INT32_C(13);
    static const int32_t ERROR_MAX_NUM_APPS = INT32_C(14);
    static const int32_t ERROR_NO_NAME_IN_METADATA = INT32_C(15);
    static const int32_t ERROR_ALREADY_LOADED = INT32_C(16);
    static const int32_t ERROR_EMBEDDED_IMAGE_NOT_FOUND = INT32_C(17);
    static const int32_t ERROR_TZ_HEAP_MALLOC_FAILURE = INT32_C(18);
    static const int32_t ERROR_TA_APP_REGION_MALLOC_FAILURE = INT32_C(19);
    static const int32_t ERROR_CLIENT_CRED_PARSING_FAILURE = INT32_C(20);
    static const int32_t ERROR_APP_UNTRUSTED_CLIENT = INT32_C(21);

    virtual ~IIAppLoader() {}

    virtual int32_t loadFromBuffer(const void* appElf_ptr, size_t appElf_len, ProxyBase &appController_ref) = 0;
    virtual int32_t loadFromRegion(const ProxyBase &appElf_ref, ProxyBase &appController_ref) = 0;
    virtual int32_t loadEmbedded(const void* appName_ptr, size_t appName_len, ProxyBase &appController_ref) = 0;

   protected:
    static const ObjectOp OP_loadFromBuffer = 0;
    static const ObjectOp OP_loadFromRegion = 1;
    static const ObjectOp OP_loadEmbedded = 2;
};

class IAppLoader : public IIAppLoader, public ProxyBase {
   public:
    IAppLoader() {}
    IAppLoader(Object impl) : ProxyBase(impl) {}
    virtual ~IAppLoader() {}

    virtual int32_t loadFromBuffer(const void* appElf_ptr, size_t appElf_len, ProxyBase &appController_ref) {
        ObjectArg a[2];
        a[0].bi = (ObjectBufIn) {appElf_ptr, appElf_len * 1};

        int32_t result = invoke(OP_loadFromBuffer, a, ObjectCounts_pack(1, 0, 0, 1));
        if (Object_OK != result) { return result; }

        appController_ref.consume(a[1].o);

        return result;
    }

    virtual int32_t loadFromRegion(const ProxyBase &appElf_ref, ProxyBase &appController_ref) {
        ObjectArg a[2];
        a[0].o = appElf_ref.get();

        int32_t result = invoke(OP_loadFromRegion, a, ObjectCounts_pack(0, 0, 1, 1));
        if (Object_OK != result) { return result; }

        appController_ref.consume(a[1].o);

        return result;
    }

    virtual int32_t loadEmbedded(const void* appName_ptr, size_t appName_len, ProxyBase &appController_ref) {
        ObjectArg a[2];
        a[0].bi = (ObjectBufIn) {appName_ptr, appName_len * 1};

        int32_t result = invoke(OP_loadEmbedded, a, ObjectCounts_pack(1, 0, 0, 1));
        if (Object_OK != result) { return result; }

        appController_ref.consume(a[1].o);

        return result;
    }

};

